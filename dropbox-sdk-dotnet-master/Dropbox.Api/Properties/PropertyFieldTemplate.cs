// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Properties
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>Describe a single property field type which that can be part of a property
    /// template.</para>
    /// </summary>
    public class PropertyFieldTemplate
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<PropertyFieldTemplate> Encoder = new PropertyFieldTemplateEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<PropertyFieldTemplate> Decoder = new PropertyFieldTemplateDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="PropertyFieldTemplate" />
        /// class.</para>
        /// </summary>
        /// <param name="name">This is the name or key of a custom property in a property
        /// template. File property names can be up to 256 bytes.</param>
        /// <param name="description">This is the description for a custom property in a
        /// property template. File property description can be up to 1024 bytes.</param>
        /// <param name="type">This is the data type of the value of this property. This type
        /// will be enforced upon property creation and modifications.</param>
        public PropertyFieldTemplate(string name,
                                     string description,
                                     PropertyType type)
        {
            if (name == null)
            {
                throw new sys.ArgumentNullException("name");
            }

            if (description == null)
            {
                throw new sys.ArgumentNullException("description");
            }

            if (type == null)
            {
                throw new sys.ArgumentNullException("type");
            }

            this.Name = name;
            this.Description = description;
            this.Type = type;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="PropertyFieldTemplate" />
        /// class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        public PropertyFieldTemplate()
        {
        }

        /// <summary>
        /// <para>This is the name or key of a custom property in a property template. File
        /// property names can be up to 256 bytes.</para>
        /// </summary>
        public string Name { get; protected set; }

        /// <summary>
        /// <para>This is the description for a custom property in a property template. File
        /// property description can be up to 1024 bytes.</para>
        /// </summary>
        public string Description { get; protected set; }

        /// <summary>
        /// <para>This is the data type of the value of this property. This type will be
        /// enforced upon property creation and modifications.</para>
        /// </summary>
        public PropertyType Type { get; protected set; }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="PropertyFieldTemplate" />.</para>
        /// </summary>
        private class PropertyFieldTemplateEncoder : enc.StructEncoder<PropertyFieldTemplate>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(PropertyFieldTemplate value, enc.IJsonWriter writer)
            {
                WriteProperty("name", value.Name, writer, enc.StringEncoder.Instance);
                WriteProperty("description", value.Description, writer, enc.StringEncoder.Instance);
                WriteProperty("type", value.Type, writer, Dropbox.Api.Properties.PropertyType.Encoder);
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="PropertyFieldTemplate" />.</para>
        /// </summary>
        private class PropertyFieldTemplateDecoder : enc.StructDecoder<PropertyFieldTemplate>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="PropertyFieldTemplate"
            /// />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override PropertyFieldTemplate Create()
            {
                return new PropertyFieldTemplate();
            }

            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(PropertyFieldTemplate value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "name":
                        value.Name = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "description":
                        value.Description = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "type":
                        value.Type = Dropbox.Api.Properties.PropertyType.Decoder.Decode(reader);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }
        }

        #endregion
    }
}
