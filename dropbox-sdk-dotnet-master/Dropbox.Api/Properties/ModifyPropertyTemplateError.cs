// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Properties
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The modify property template error object</para>
    /// </summary>
    public class ModifyPropertyTemplateError
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<ModifyPropertyTemplateError> Encoder = new ModifyPropertyTemplateErrorEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<ModifyPropertyTemplateError> Decoder = new ModifyPropertyTemplateErrorDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="ModifyPropertyTemplateError" />
        /// class.</para>
        /// </summary>
        public ModifyPropertyTemplateError()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is
        /// ConflictingPropertyNames</para>
        /// </summary>
        public bool IsConflictingPropertyNames
        {
            get
            {
                return this is ConflictingPropertyNames;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a ConflictingPropertyNames, or <c>null</c>.</para>
        /// </summary>
        public ConflictingPropertyNames AsConflictingPropertyNames
        {
            get
            {
                return this as ConflictingPropertyNames;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is TooManyProperties</para>
        /// </summary>
        public bool IsTooManyProperties
        {
            get
            {
                return this is TooManyProperties;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a TooManyProperties, or <c>null</c>.</para>
        /// </summary>
        public TooManyProperties AsTooManyProperties
        {
            get
            {
                return this as TooManyProperties;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is TooManyTemplates</para>
        /// </summary>
        public bool IsTooManyTemplates
        {
            get
            {
                return this is TooManyTemplates;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a TooManyTemplates, or <c>null</c>.</para>
        /// </summary>
        public TooManyTemplates AsTooManyTemplates
        {
            get
            {
                return this as TooManyTemplates;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is
        /// TemplateAttributeTooLarge</para>
        /// </summary>
        public bool IsTemplateAttributeTooLarge
        {
            get
            {
                return this is TemplateAttributeTooLarge;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a TemplateAttributeTooLarge, or <c>null</c>.</para>
        /// </summary>
        public TemplateAttributeTooLarge AsTemplateAttributeTooLarge
        {
            get
            {
                return this as TemplateAttributeTooLarge;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is TemplateNotFound</para>
        /// </summary>
        public bool IsTemplateNotFound
        {
            get
            {
                return this is TemplateNotFound;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a TemplateNotFound, or <c>null</c>.</para>
        /// </summary>
        public TemplateNotFound AsTemplateNotFound
        {
            get
            {
                return this as TemplateNotFound;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is RestrictedContent</para>
        /// </summary>
        public bool IsRestrictedContent
        {
            get
            {
                return this is RestrictedContent;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a RestrictedContent, or <c>null</c>.</para>
        /// </summary>
        public RestrictedContent AsRestrictedContent
        {
            get
            {
                return this as RestrictedContent;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="ModifyPropertyTemplateError" />.</para>
        /// </summary>
        private class ModifyPropertyTemplateErrorEncoder : enc.StructEncoder<ModifyPropertyTemplateError>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(ModifyPropertyTemplateError value, enc.IJsonWriter writer)
            {
                if (value is ConflictingPropertyNames)
                {
                    WriteProperty(".tag", "conflicting_property_names", writer, enc.StringEncoder.Instance);
                    ConflictingPropertyNames.Encoder.EncodeFields((ConflictingPropertyNames)value, writer);
                    return;
                }
                if (value is TooManyProperties)
                {
                    WriteProperty(".tag", "too_many_properties", writer, enc.StringEncoder.Instance);
                    TooManyProperties.Encoder.EncodeFields((TooManyProperties)value, writer);
                    return;
                }
                if (value is TooManyTemplates)
                {
                    WriteProperty(".tag", "too_many_templates", writer, enc.StringEncoder.Instance);
                    TooManyTemplates.Encoder.EncodeFields((TooManyTemplates)value, writer);
                    return;
                }
                if (value is TemplateAttributeTooLarge)
                {
                    WriteProperty(".tag", "template_attribute_too_large", writer, enc.StringEncoder.Instance);
                    TemplateAttributeTooLarge.Encoder.EncodeFields((TemplateAttributeTooLarge)value, writer);
                    return;
                }
                if (value is TemplateNotFound)
                {
                    WriteProperty(".tag", "template_not_found", writer, enc.StringEncoder.Instance);
                    TemplateNotFound.Encoder.EncodeFields((TemplateNotFound)value, writer);
                    return;
                }
                if (value is RestrictedContent)
                {
                    WriteProperty(".tag", "restricted_content", writer, enc.StringEncoder.Instance);
                    RestrictedContent.Encoder.EncodeFields((RestrictedContent)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="ModifyPropertyTemplateError" />.</para>
        /// </summary>
        private class ModifyPropertyTemplateErrorDecoder : enc.UnionDecoder<ModifyPropertyTemplateError>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="ModifyPropertyTemplateError"
            /// />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override ModifyPropertyTemplateError Create()
            {
                return new ModifyPropertyTemplateError();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override ModifyPropertyTemplateError Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "conflicting_property_names":
                        return ConflictingPropertyNames.Decoder.DecodeFields(reader);
                    case "too_many_properties":
                        return TooManyProperties.Decoder.DecodeFields(reader);
                    case "too_many_templates":
                        return TooManyTemplates.Decoder.DecodeFields(reader);
                    case "template_attribute_too_large":
                        return TemplateAttributeTooLarge.Decoder.DecodeFields(reader);
                    case "template_not_found":
                        return TemplateNotFound.Decoder.DecodeFields(reader);
                    case "restricted_content":
                        return RestrictedContent.Decoder.DecodeFields(reader);
                    case "other":
                        return Other.Decoder.DecodeFields(reader);
                    default:
                        throw new sys.InvalidOperationException();
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>A property field name already exists in the template.</para>
        /// </summary>
        public sealed class ConflictingPropertyNames : ModifyPropertyTemplateError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<ConflictingPropertyNames> Encoder = new ConflictingPropertyNamesEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<ConflictingPropertyNames> Decoder = new ConflictingPropertyNamesDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="ConflictingPropertyNames" />
            /// class.</para>
            /// </summary>
            private ConflictingPropertyNames()
            {
            }

            /// <summary>
            /// <para>A singleton instance of ConflictingPropertyNames</para>
            /// </summary>
            public static readonly ConflictingPropertyNames Instance = new ConflictingPropertyNames();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="ConflictingPropertyNames" />.</para>
            /// </summary>
            private class ConflictingPropertyNamesEncoder : enc.StructEncoder<ConflictingPropertyNames>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(ConflictingPropertyNames value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="ConflictingPropertyNames" />.</para>
            /// </summary>
            private class ConflictingPropertyNamesDecoder : enc.StructDecoder<ConflictingPropertyNames>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="ConflictingPropertyNames"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override ConflictingPropertyNames Create()
                {
                    return new ConflictingPropertyNames();
                }

                /// <summary>
                /// <para>Decode fields without ensuring start and end object.</para>
                /// </summary>
                /// <param name="reader">The json reader.</param>
                /// <returns>The decoded object.</returns>
                public override ConflictingPropertyNames DecodeFields(enc.IJsonReader reader)
                {
                    return ConflictingPropertyNames.Instance;
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>There are too many properties in the changed template. The maximum number of
        /// properties per template is 32.</para>
        /// </summary>
        public sealed class TooManyProperties : ModifyPropertyTemplateError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<TooManyProperties> Encoder = new TooManyPropertiesEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<TooManyProperties> Decoder = new TooManyPropertiesDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="TooManyProperties" />
            /// class.</para>
            /// </summary>
            private TooManyProperties()
            {
            }

            /// <summary>
            /// <para>A singleton instance of TooManyProperties</para>
            /// </summary>
            public static readonly TooManyProperties Instance = new TooManyProperties();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="TooManyProperties" />.</para>
            /// </summary>
            private class TooManyPropertiesEncoder : enc.StructEncoder<TooManyProperties>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(TooManyProperties value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="TooManyProperties" />.</para>
            /// </summary>
            private class TooManyPropertiesDecoder : enc.StructDecoder<TooManyProperties>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="TooManyProperties"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override TooManyProperties Create()
                {
                    return new TooManyProperties();
                }

                /// <summary>
                /// <para>Decode fields without ensuring start and end object.</para>
                /// </summary>
                /// <param name="reader">The json reader.</param>
                /// <returns>The decoded object.</returns>
                public override TooManyProperties DecodeFields(enc.IJsonReader reader)
                {
                    return TooManyProperties.Instance;
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>There are too many templates for the team.</para>
        /// </summary>
        public sealed class TooManyTemplates : ModifyPropertyTemplateError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<TooManyTemplates> Encoder = new TooManyTemplatesEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<TooManyTemplates> Decoder = new TooManyTemplatesDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="TooManyTemplates" />
            /// class.</para>
            /// </summary>
            private TooManyTemplates()
            {
            }

            /// <summary>
            /// <para>A singleton instance of TooManyTemplates</para>
            /// </summary>
            public static readonly TooManyTemplates Instance = new TooManyTemplates();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="TooManyTemplates" />.</para>
            /// </summary>
            private class TooManyTemplatesEncoder : enc.StructEncoder<TooManyTemplates>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(TooManyTemplates value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="TooManyTemplates" />.</para>
            /// </summary>
            private class TooManyTemplatesDecoder : enc.StructDecoder<TooManyTemplates>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="TooManyTemplates" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override TooManyTemplates Create()
                {
                    return new TooManyTemplates();
                }

                /// <summary>
                /// <para>Decode fields without ensuring start and end object.</para>
                /// </summary>
                /// <param name="reader">The json reader.</param>
                /// <returns>The decoded object.</returns>
                public override TooManyTemplates DecodeFields(enc.IJsonReader reader)
                {
                    return TooManyTemplates.Instance;
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>The template name, description or field names is too large.</para>
        /// </summary>
        public sealed class TemplateAttributeTooLarge : ModifyPropertyTemplateError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<TemplateAttributeTooLarge> Encoder = new TemplateAttributeTooLargeEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<TemplateAttributeTooLarge> Decoder = new TemplateAttributeTooLargeDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="TemplateAttributeTooLarge"
            /// /> class.</para>
            /// </summary>
            private TemplateAttributeTooLarge()
            {
            }

            /// <summary>
            /// <para>A singleton instance of TemplateAttributeTooLarge</para>
            /// </summary>
            public static readonly TemplateAttributeTooLarge Instance = new TemplateAttributeTooLarge();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="TemplateAttributeTooLarge" />.</para>
            /// </summary>
            private class TemplateAttributeTooLargeEncoder : enc.StructEncoder<TemplateAttributeTooLarge>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(TemplateAttributeTooLarge value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="TemplateAttributeTooLarge" />.</para>
            /// </summary>
            private class TemplateAttributeTooLargeDecoder : enc.StructDecoder<TemplateAttributeTooLarge>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="TemplateAttributeTooLarge"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override TemplateAttributeTooLarge Create()
                {
                    return new TemplateAttributeTooLarge();
                }

                /// <summary>
                /// <para>Decode fields without ensuring start and end object.</para>
                /// </summary>
                /// <param name="reader">The json reader.</param>
                /// <returns>The decoded object.</returns>
                public override TemplateAttributeTooLarge DecodeFields(enc.IJsonReader reader)
                {
                    return TemplateAttributeTooLarge.Instance;
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>Property template does not exist for given identifier.</para>
        /// </summary>
        public sealed class TemplateNotFound : ModifyPropertyTemplateError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<TemplateNotFound> Encoder = new TemplateNotFoundEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<TemplateNotFound> Decoder = new TemplateNotFoundDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="TemplateNotFound" />
            /// class.</para>
            /// </summary>
            /// <param name="value">The value</param>
            public TemplateNotFound(string value)
            {
                this.Value = value;
            }
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="TemplateNotFound" />
            /// class.</para>
            /// </summary>
            private TemplateNotFound()
            {
            }

            /// <summary>
            /// <para>Gets the value of this instance.</para>
            /// </summary>
            public string Value { get; private set; }

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="TemplateNotFound" />.</para>
            /// </summary>
            private class TemplateNotFoundEncoder : enc.StructEncoder<TemplateNotFound>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(TemplateNotFound value, enc.IJsonWriter writer)
                {
                    WriteProperty("template_not_found", value.Value, writer, enc.StringEncoder.Instance);
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="TemplateNotFound" />.</para>
            /// </summary>
            private class TemplateNotFoundDecoder : enc.StructDecoder<TemplateNotFound>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="TemplateNotFound" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override TemplateNotFound Create()
                {
                    return new TemplateNotFound();
                }

                /// <summary>
                /// <para>Set given field.</para>
                /// </summary>
                /// <param name="value">The field value.</param>
                /// <param name="fieldName">The field name.</param>
                /// <param name="reader">The json reader.</param>
                protected override void SetField(TemplateNotFound value, string fieldName, enc.IJsonReader reader)
                {
                    switch (fieldName)
                    {
                        case "template_not_found":
                            value.Value = enc.StringDecoder.Instance.Decode(reader);
                            break;
                        default:
                            reader.Skip();
                            break;
                    }
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>You do not have the permissions to modify this property template.</para>
        /// </summary>
        public sealed class RestrictedContent : ModifyPropertyTemplateError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<RestrictedContent> Encoder = new RestrictedContentEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<RestrictedContent> Decoder = new RestrictedContentDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="RestrictedContent" />
            /// class.</para>
            /// </summary>
            private RestrictedContent()
            {
            }

            /// <summary>
            /// <para>A singleton instance of RestrictedContent</para>
            /// </summary>
            public static readonly RestrictedContent Instance = new RestrictedContent();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="RestrictedContent" />.</para>
            /// </summary>
            private class RestrictedContentEncoder : enc.StructEncoder<RestrictedContent>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(RestrictedContent value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="RestrictedContent" />.</para>
            /// </summary>
            private class RestrictedContentDecoder : enc.StructDecoder<RestrictedContent>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="RestrictedContent"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override RestrictedContent Create()
                {
                    return new RestrictedContent();
                }

                /// <summary>
                /// <para>Decode fields without ensuring start and end object.</para>
                /// </summary>
                /// <param name="reader">The json reader.</param>
                /// <returns>The decoded object.</returns>
                public override RestrictedContent DecodeFields(enc.IJsonReader reader)
                {
                    return RestrictedContent.Instance;
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : ModifyPropertyTemplateError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return new Other();
                }

                /// <summary>
                /// <para>Decode fields without ensuring start and end object.</para>
                /// </summary>
                /// <param name="reader">The json reader.</param>
                /// <returns>The decoded object.</returns>
                public override Other DecodeFields(enc.IJsonReader reader)
                {
                    return Other.Instance;
                }
            }

            #endregion
        }
    }
}
