// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Team
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>Argument for selecting a list of users, either by team_member_ids, external_ids
    /// or emails.</para>
    /// </summary>
    public class UsersSelectorArg
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<UsersSelectorArg> Encoder = new UsersSelectorArgEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<UsersSelectorArg> Decoder = new UsersSelectorArgDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="UsersSelectorArg" />
        /// class.</para>
        /// </summary>
        public UsersSelectorArg()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is TeamMemberIds</para>
        /// </summary>
        public bool IsTeamMemberIds
        {
            get
            {
                return this is TeamMemberIds;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a TeamMemberIds, or <c>null</c>.</para>
        /// </summary>
        public TeamMemberIds AsTeamMemberIds
        {
            get
            {
                return this as TeamMemberIds;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is ExternalIds</para>
        /// </summary>
        public bool IsExternalIds
        {
            get
            {
                return this is ExternalIds;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a ExternalIds, or <c>null</c>.</para>
        /// </summary>
        public ExternalIds AsExternalIds
        {
            get
            {
                return this as ExternalIds;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Emails</para>
        /// </summary>
        public bool IsEmails
        {
            get
            {
                return this is Emails;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Emails, or <c>null</c>.</para>
        /// </summary>
        public Emails AsEmails
        {
            get
            {
                return this as Emails;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="UsersSelectorArg" />.</para>
        /// </summary>
        private class UsersSelectorArgEncoder : enc.StructEncoder<UsersSelectorArg>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(UsersSelectorArg value, enc.IJsonWriter writer)
            {
                if (value is TeamMemberIds)
                {
                    WriteProperty(".tag", "team_member_ids", writer, enc.StringEncoder.Instance);
                    TeamMemberIds.Encoder.EncodeFields((TeamMemberIds)value, writer);
                    return;
                }
                if (value is ExternalIds)
                {
                    WriteProperty(".tag", "external_ids", writer, enc.StringEncoder.Instance);
                    ExternalIds.Encoder.EncodeFields((ExternalIds)value, writer);
                    return;
                }
                if (value is Emails)
                {
                    WriteProperty(".tag", "emails", writer, enc.StringEncoder.Instance);
                    Emails.Encoder.EncodeFields((Emails)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="UsersSelectorArg" />.</para>
        /// </summary>
        private class UsersSelectorArgDecoder : enc.UnionDecoder<UsersSelectorArg>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="UsersSelectorArg" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override UsersSelectorArg Create()
            {
                return new UsersSelectorArg();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override UsersSelectorArg Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "team_member_ids":
                        return TeamMemberIds.Decoder.DecodeFields(reader);
                    case "external_ids":
                        return ExternalIds.Decoder.DecodeFields(reader);
                    case "emails":
                        return Emails.Decoder.DecodeFields(reader);
                    default:
                        throw new sys.InvalidOperationException();
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>List of member IDs.</para>
        /// </summary>
        public sealed class TeamMemberIds : UsersSelectorArg
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<TeamMemberIds> Encoder = new TeamMemberIdsEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<TeamMemberIds> Decoder = new TeamMemberIdsDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="TeamMemberIds" />
            /// class.</para>
            /// </summary>
            /// <param name="value">The value</param>
            public TeamMemberIds(col.IEnumerable<string> value)
            {
                this.Value = new col.List<string>(value);
            }
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="TeamMemberIds" />
            /// class.</para>
            /// </summary>
            private TeamMemberIds()
            {
            }

            /// <summary>
            /// <para>Gets the value of this instance.</para>
            /// </summary>
            public col.IList<string> Value { get; private set; }

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="TeamMemberIds" />.</para>
            /// </summary>
            private class TeamMemberIdsEncoder : enc.StructEncoder<TeamMemberIds>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(TeamMemberIds value, enc.IJsonWriter writer)
                {
                    WriteListProperty("team_member_ids", value.Value, writer, enc.StringEncoder.Instance);
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="TeamMemberIds" />.</para>
            /// </summary>
            private class TeamMemberIdsDecoder : enc.StructDecoder<TeamMemberIds>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="TeamMemberIds" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override TeamMemberIds Create()
                {
                    return new TeamMemberIds();
                }

                /// <summary>
                /// <para>Set given field.</para>
                /// </summary>
                /// <param name="value">The field value.</param>
                /// <param name="fieldName">The field name.</param>
                /// <param name="reader">The json reader.</param>
                protected override void SetField(TeamMemberIds value, string fieldName, enc.IJsonReader reader)
                {
                    switch (fieldName)
                    {
                        case "team_member_ids":
                            value.Value = ReadList<string>(reader, enc.StringDecoder.Instance);
                            break;
                        default:
                            reader.Skip();
                            break;
                    }
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>List of external user IDs.</para>
        /// </summary>
        public sealed class ExternalIds : UsersSelectorArg
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<ExternalIds> Encoder = new ExternalIdsEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<ExternalIds> Decoder = new ExternalIdsDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="ExternalIds" />
            /// class.</para>
            /// </summary>
            /// <param name="value">The value</param>
            public ExternalIds(col.IEnumerable<string> value)
            {
                this.Value = new col.List<string>(value);
            }
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="ExternalIds" />
            /// class.</para>
            /// </summary>
            private ExternalIds()
            {
            }

            /// <summary>
            /// <para>Gets the value of this instance.</para>
            /// </summary>
            public col.IList<string> Value { get; private set; }

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="ExternalIds" />.</para>
            /// </summary>
            private class ExternalIdsEncoder : enc.StructEncoder<ExternalIds>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(ExternalIds value, enc.IJsonWriter writer)
                {
                    WriteListProperty("external_ids", value.Value, writer, enc.StringEncoder.Instance);
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="ExternalIds" />.</para>
            /// </summary>
            private class ExternalIdsDecoder : enc.StructDecoder<ExternalIds>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="ExternalIds" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override ExternalIds Create()
                {
                    return new ExternalIds();
                }

                /// <summary>
                /// <para>Set given field.</para>
                /// </summary>
                /// <param name="value">The field value.</param>
                /// <param name="fieldName">The field name.</param>
                /// <param name="reader">The json reader.</param>
                protected override void SetField(ExternalIds value, string fieldName, enc.IJsonReader reader)
                {
                    switch (fieldName)
                    {
                        case "external_ids":
                            value.Value = ReadList<string>(reader, enc.StringDecoder.Instance);
                            break;
                        default:
                            reader.Skip();
                            break;
                    }
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>List of email addresses.</para>
        /// </summary>
        public sealed class Emails : UsersSelectorArg
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Emails> Encoder = new EmailsEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Emails> Decoder = new EmailsDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Emails" /> class.</para>
            /// </summary>
            /// <param name="value">The value</param>
            public Emails(col.IEnumerable<string> value)
            {
                this.Value = new col.List<string>(value);
            }
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Emails" /> class.</para>
            /// </summary>
            private Emails()
            {
            }

            /// <summary>
            /// <para>Gets the value of this instance.</para>
            /// </summary>
            public col.IList<string> Value { get; private set; }

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Emails" />.</para>
            /// </summary>
            private class EmailsEncoder : enc.StructEncoder<Emails>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Emails value, enc.IJsonWriter writer)
                {
                    WriteListProperty("emails", value.Value, writer, enc.StringEncoder.Instance);
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Emails" />.</para>
            /// </summary>
            private class EmailsDecoder : enc.StructDecoder<Emails>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Emails" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Emails Create()
                {
                    return new Emails();
                }

                /// <summary>
                /// <para>Set given field.</para>
                /// </summary>
                /// <param name="value">The field value.</param>
                /// <param name="fieldName">The field name.</param>
                /// <param name="reader">The json reader.</param>
                protected override void SetField(Emails value, string fieldName, enc.IJsonReader reader)
                {
                    switch (fieldName)
                    {
                        case "emails":
                            value.Value = ReadList<string>(reader, enc.StringDecoder.Instance);
                            break;
                        default:
                            reader.Skip();
                            break;
                    }
                }
            }

            #endregion
        }
    }
}
