// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Team
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>Argument for selecting a list of groups, either by group_ids, or external group
    /// IDs.</para>
    /// </summary>
    public class GroupsSelector
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<GroupsSelector> Encoder = new GroupsSelectorEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<GroupsSelector> Decoder = new GroupsSelectorDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="GroupsSelector" /> class.</para>
        /// </summary>
        public GroupsSelector()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is GroupIds</para>
        /// </summary>
        public bool IsGroupIds
        {
            get
            {
                return this is GroupIds;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a GroupIds, or <c>null</c>.</para>
        /// </summary>
        public GroupIds AsGroupIds
        {
            get
            {
                return this as GroupIds;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is GroupExternalIds</para>
        /// </summary>
        public bool IsGroupExternalIds
        {
            get
            {
                return this is GroupExternalIds;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a GroupExternalIds, or <c>null</c>.</para>
        /// </summary>
        public GroupExternalIds AsGroupExternalIds
        {
            get
            {
                return this as GroupExternalIds;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="GroupsSelector" />.</para>
        /// </summary>
        private class GroupsSelectorEncoder : enc.StructEncoder<GroupsSelector>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(GroupsSelector value, enc.IJsonWriter writer)
            {
                if (value is GroupIds)
                {
                    WriteProperty(".tag", "group_ids", writer, enc.StringEncoder.Instance);
                    GroupIds.Encoder.EncodeFields((GroupIds)value, writer);
                    return;
                }
                if (value is GroupExternalIds)
                {
                    WriteProperty(".tag", "group_external_ids", writer, enc.StringEncoder.Instance);
                    GroupExternalIds.Encoder.EncodeFields((GroupExternalIds)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="GroupsSelector" />.</para>
        /// </summary>
        private class GroupsSelectorDecoder : enc.UnionDecoder<GroupsSelector>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="GroupsSelector" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override GroupsSelector Create()
            {
                return new GroupsSelector();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override GroupsSelector Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "group_ids":
                        return GroupIds.Decoder.DecodeFields(reader);
                    case "group_external_ids":
                        return GroupExternalIds.Decoder.DecodeFields(reader);
                    default:
                        throw new sys.InvalidOperationException();
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>List of group IDs.</para>
        /// </summary>
        public sealed class GroupIds : GroupsSelector
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<GroupIds> Encoder = new GroupIdsEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<GroupIds> Decoder = new GroupIdsDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="GroupIds" /> class.</para>
            /// </summary>
            /// <param name="value">The value</param>
            public GroupIds(col.IEnumerable<string> value)
            {
                this.Value = new col.List<string>(value);
            }
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="GroupIds" /> class.</para>
            /// </summary>
            private GroupIds()
            {
            }

            /// <summary>
            /// <para>Gets the value of this instance.</para>
            /// </summary>
            public col.IList<string> Value { get; private set; }

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="GroupIds" />.</para>
            /// </summary>
            private class GroupIdsEncoder : enc.StructEncoder<GroupIds>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(GroupIds value, enc.IJsonWriter writer)
                {
                    WriteListProperty("group_ids", value.Value, writer, enc.StringEncoder.Instance);
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="GroupIds" />.</para>
            /// </summary>
            private class GroupIdsDecoder : enc.StructDecoder<GroupIds>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="GroupIds" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override GroupIds Create()
                {
                    return new GroupIds();
                }

                /// <summary>
                /// <para>Set given field.</para>
                /// </summary>
                /// <param name="value">The field value.</param>
                /// <param name="fieldName">The field name.</param>
                /// <param name="reader">The json reader.</param>
                protected override void SetField(GroupIds value, string fieldName, enc.IJsonReader reader)
                {
                    switch (fieldName)
                    {
                        case "group_ids":
                            value.Value = ReadList<string>(reader, enc.StringDecoder.Instance);
                            break;
                        default:
                            reader.Skip();
                            break;
                    }
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>List of external IDs of groups.</para>
        /// </summary>
        public sealed class GroupExternalIds : GroupsSelector
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<GroupExternalIds> Encoder = new GroupExternalIdsEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<GroupExternalIds> Decoder = new GroupExternalIdsDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="GroupExternalIds" />
            /// class.</para>
            /// </summary>
            /// <param name="value">The value</param>
            public GroupExternalIds(col.IEnumerable<string> value)
            {
                this.Value = new col.List<string>(value);
            }
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="GroupExternalIds" />
            /// class.</para>
            /// </summary>
            private GroupExternalIds()
            {
            }

            /// <summary>
            /// <para>Gets the value of this instance.</para>
            /// </summary>
            public col.IList<string> Value { get; private set; }

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="GroupExternalIds" />.</para>
            /// </summary>
            private class GroupExternalIdsEncoder : enc.StructEncoder<GroupExternalIds>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(GroupExternalIds value, enc.IJsonWriter writer)
                {
                    WriteListProperty("group_external_ids", value.Value, writer, enc.StringEncoder.Instance);
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="GroupExternalIds" />.</para>
            /// </summary>
            private class GroupExternalIdsDecoder : enc.StructDecoder<GroupExternalIds>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="GroupExternalIds" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override GroupExternalIds Create()
                {
                    return new GroupExternalIds();
                }

                /// <summary>
                /// <para>Set given field.</para>
                /// </summary>
                /// <param name="value">The field value.</param>
                /// <param name="fieldName">The field name.</param>
                /// <param name="reader">The json reader.</param>
                protected override void SetField(GroupExternalIds value, string fieldName, enc.IJsonReader reader)
                {
                    switch (fieldName)
                    {
                        case "group_external_ids":
                            value.Value = ReadList<string>(reader, enc.StringDecoder.Instance);
                            break;
                        default:
                            reader.Skip();
                            break;
                    }
                }
            }

            #endregion
        }
    }
}
