// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Team
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The group create error object</para>
    /// </summary>
    public class GroupCreateError
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<GroupCreateError> Encoder = new GroupCreateErrorEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<GroupCreateError> Decoder = new GroupCreateErrorDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="GroupCreateError" />
        /// class.</para>
        /// </summary>
        public GroupCreateError()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is GroupNameAlreadyUsed</para>
        /// </summary>
        public bool IsGroupNameAlreadyUsed
        {
            get
            {
                return this is GroupNameAlreadyUsed;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a GroupNameAlreadyUsed, or <c>null</c>.</para>
        /// </summary>
        public GroupNameAlreadyUsed AsGroupNameAlreadyUsed
        {
            get
            {
                return this as GroupNameAlreadyUsed;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is GroupNameInvalid</para>
        /// </summary>
        public bool IsGroupNameInvalid
        {
            get
            {
                return this is GroupNameInvalid;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a GroupNameInvalid, or <c>null</c>.</para>
        /// </summary>
        public GroupNameInvalid AsGroupNameInvalid
        {
            get
            {
                return this as GroupNameInvalid;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is
        /// ExternalIdAlreadyInUse</para>
        /// </summary>
        public bool IsExternalIdAlreadyInUse
        {
            get
            {
                return this is ExternalIdAlreadyInUse;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a ExternalIdAlreadyInUse, or <c>null</c>.</para>
        /// </summary>
        public ExternalIdAlreadyInUse AsExternalIdAlreadyInUse
        {
            get
            {
                return this as ExternalIdAlreadyInUse;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="GroupCreateError" />.</para>
        /// </summary>
        private class GroupCreateErrorEncoder : enc.StructEncoder<GroupCreateError>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(GroupCreateError value, enc.IJsonWriter writer)
            {
                if (value is GroupNameAlreadyUsed)
                {
                    WriteProperty(".tag", "group_name_already_used", writer, enc.StringEncoder.Instance);
                    GroupNameAlreadyUsed.Encoder.EncodeFields((GroupNameAlreadyUsed)value, writer);
                    return;
                }
                if (value is GroupNameInvalid)
                {
                    WriteProperty(".tag", "group_name_invalid", writer, enc.StringEncoder.Instance);
                    GroupNameInvalid.Encoder.EncodeFields((GroupNameInvalid)value, writer);
                    return;
                }
                if (value is ExternalIdAlreadyInUse)
                {
                    WriteProperty(".tag", "external_id_already_in_use", writer, enc.StringEncoder.Instance);
                    ExternalIdAlreadyInUse.Encoder.EncodeFields((ExternalIdAlreadyInUse)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="GroupCreateError" />.</para>
        /// </summary>
        private class GroupCreateErrorDecoder : enc.UnionDecoder<GroupCreateError>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="GroupCreateError" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override GroupCreateError Create()
            {
                return new GroupCreateError();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override GroupCreateError Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "group_name_already_used":
                        return GroupNameAlreadyUsed.Decoder.DecodeFields(reader);
                    case "group_name_invalid":
                        return GroupNameInvalid.Decoder.DecodeFields(reader);
                    case "external_id_already_in_use":
                        return ExternalIdAlreadyInUse.Decoder.DecodeFields(reader);
                    default:
                        return Other.Decoder.DecodeFields(reader);
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>There is already an existing group with the requested name.</para>
        /// </summary>
        public sealed class GroupNameAlreadyUsed : GroupCreateError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<GroupNameAlreadyUsed> Encoder = new GroupNameAlreadyUsedEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<GroupNameAlreadyUsed> Decoder = new GroupNameAlreadyUsedDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="GroupNameAlreadyUsed" />
            /// class.</para>
            /// </summary>
            private GroupNameAlreadyUsed()
            {
            }

            /// <summary>
            /// <para>A singleton instance of GroupNameAlreadyUsed</para>
            /// </summary>
            public static readonly GroupNameAlreadyUsed Instance = new GroupNameAlreadyUsed();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="GroupNameAlreadyUsed" />.</para>
            /// </summary>
            private class GroupNameAlreadyUsedEncoder : enc.StructEncoder<GroupNameAlreadyUsed>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(GroupNameAlreadyUsed value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="GroupNameAlreadyUsed" />.</para>
            /// </summary>
            private class GroupNameAlreadyUsedDecoder : enc.StructDecoder<GroupNameAlreadyUsed>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="GroupNameAlreadyUsed"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override GroupNameAlreadyUsed Create()
                {
                    return new GroupNameAlreadyUsed();
                }

                /// <summary>
                /// <para>Decode fields without ensuring start and end object.</para>
                /// </summary>
                /// <param name="reader">The json reader.</param>
                /// <returns>The decoded object.</returns>
                public override GroupNameAlreadyUsed DecodeFields(enc.IJsonReader reader)
                {
                    return GroupNameAlreadyUsed.Instance;
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>Group name is empty or has invalid characters.</para>
        /// </summary>
        public sealed class GroupNameInvalid : GroupCreateError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<GroupNameInvalid> Encoder = new GroupNameInvalidEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<GroupNameInvalid> Decoder = new GroupNameInvalidDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="GroupNameInvalid" />
            /// class.</para>
            /// </summary>
            private GroupNameInvalid()
            {
            }

            /// <summary>
            /// <para>A singleton instance of GroupNameInvalid</para>
            /// </summary>
            public static readonly GroupNameInvalid Instance = new GroupNameInvalid();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="GroupNameInvalid" />.</para>
            /// </summary>
            private class GroupNameInvalidEncoder : enc.StructEncoder<GroupNameInvalid>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(GroupNameInvalid value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="GroupNameInvalid" />.</para>
            /// </summary>
            private class GroupNameInvalidDecoder : enc.StructDecoder<GroupNameInvalid>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="GroupNameInvalid" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override GroupNameInvalid Create()
                {
                    return new GroupNameInvalid();
                }

                /// <summary>
                /// <para>Decode fields without ensuring start and end object.</para>
                /// </summary>
                /// <param name="reader">The json reader.</param>
                /// <returns>The decoded object.</returns>
                public override GroupNameInvalid DecodeFields(enc.IJsonReader reader)
                {
                    return GroupNameInvalid.Instance;
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>The new external ID is already being used by another group.</para>
        /// </summary>
        public sealed class ExternalIdAlreadyInUse : GroupCreateError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<ExternalIdAlreadyInUse> Encoder = new ExternalIdAlreadyInUseEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<ExternalIdAlreadyInUse> Decoder = new ExternalIdAlreadyInUseDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="ExternalIdAlreadyInUse" />
            /// class.</para>
            /// </summary>
            private ExternalIdAlreadyInUse()
            {
            }

            /// <summary>
            /// <para>A singleton instance of ExternalIdAlreadyInUse</para>
            /// </summary>
            public static readonly ExternalIdAlreadyInUse Instance = new ExternalIdAlreadyInUse();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="ExternalIdAlreadyInUse" />.</para>
            /// </summary>
            private class ExternalIdAlreadyInUseEncoder : enc.StructEncoder<ExternalIdAlreadyInUse>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(ExternalIdAlreadyInUse value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="ExternalIdAlreadyInUse" />.</para>
            /// </summary>
            private class ExternalIdAlreadyInUseDecoder : enc.StructDecoder<ExternalIdAlreadyInUse>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="ExternalIdAlreadyInUse"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override ExternalIdAlreadyInUse Create()
                {
                    return new ExternalIdAlreadyInUse();
                }

                /// <summary>
                /// <para>Decode fields without ensuring start and end object.</para>
                /// </summary>
                /// <param name="reader">The json reader.</param>
                /// <returns>The decoded object.</returns>
                public override ExternalIdAlreadyInUse DecodeFields(enc.IJsonReader reader)
                {
                    return ExternalIdAlreadyInUse.Instance;
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : GroupCreateError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return new Other();
                }

                /// <summary>
                /// <para>Decode fields without ensuring start and end object.</para>
                /// </summary>
                /// <param name="reader">The json reader.</param>
                /// <returns>The decoded object.</returns>
                public override Other DecodeFields(enc.IJsonReader reader)
                {
                    return Other.Instance;
                }
            }

            #endregion
        }
    }
}
