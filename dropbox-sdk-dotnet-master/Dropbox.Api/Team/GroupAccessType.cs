// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Team
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>Role of a user in group.</para>
    /// </summary>
    public class GroupAccessType
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<GroupAccessType> Encoder = new GroupAccessTypeEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<GroupAccessType> Decoder = new GroupAccessTypeDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="GroupAccessType" />
        /// class.</para>
        /// </summary>
        public GroupAccessType()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Member</para>
        /// </summary>
        public bool IsMember
        {
            get
            {
                return this is Member;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Member, or <c>null</c>.</para>
        /// </summary>
        public Member AsMember
        {
            get
            {
                return this as Member;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Owner</para>
        /// </summary>
        public bool IsOwner
        {
            get
            {
                return this is Owner;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Owner, or <c>null</c>.</para>
        /// </summary>
        public Owner AsOwner
        {
            get
            {
                return this as Owner;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="GroupAccessType" />.</para>
        /// </summary>
        private class GroupAccessTypeEncoder : enc.StructEncoder<GroupAccessType>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(GroupAccessType value, enc.IJsonWriter writer)
            {
                if (value is Member)
                {
                    WriteProperty(".tag", "member", writer, enc.StringEncoder.Instance);
                    Member.Encoder.EncodeFields((Member)value, writer);
                    return;
                }
                if (value is Owner)
                {
                    WriteProperty(".tag", "owner", writer, enc.StringEncoder.Instance);
                    Owner.Encoder.EncodeFields((Owner)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="GroupAccessType" />.</para>
        /// </summary>
        private class GroupAccessTypeDecoder : enc.UnionDecoder<GroupAccessType>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="GroupAccessType" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override GroupAccessType Create()
            {
                return new GroupAccessType();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override GroupAccessType Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "member":
                        return Member.Decoder.DecodeFields(reader);
                    case "owner":
                        return Owner.Decoder.DecodeFields(reader);
                    default:
                        throw new sys.InvalidOperationException();
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>User is a member of the group, but has no special permissions.</para>
        /// </summary>
        public sealed class Member : GroupAccessType
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Member> Encoder = new MemberEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Member> Decoder = new MemberDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Member" /> class.</para>
            /// </summary>
            private Member()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Member</para>
            /// </summary>
            public static readonly Member Instance = new Member();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Member" />.</para>
            /// </summary>
            private class MemberEncoder : enc.StructEncoder<Member>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Member value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Member" />.</para>
            /// </summary>
            private class MemberDecoder : enc.StructDecoder<Member>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Member" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Member Create()
                {
                    return new Member();
                }

                /// <summary>
                /// <para>Decode fields without ensuring start and end object.</para>
                /// </summary>
                /// <param name="reader">The json reader.</param>
                /// <returns>The decoded object.</returns>
                public override Member DecodeFields(enc.IJsonReader reader)
                {
                    return Member.Instance;
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>User can rename the group, and add/remove members.</para>
        /// </summary>
        public sealed class Owner : GroupAccessType
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Owner> Encoder = new OwnerEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Owner> Decoder = new OwnerDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Owner" /> class.</para>
            /// </summary>
            private Owner()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Owner</para>
            /// </summary>
            public static readonly Owner Instance = new Owner();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Owner" />.</para>
            /// </summary>
            private class OwnerEncoder : enc.StructEncoder<Owner>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Owner value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Owner" />.</para>
            /// </summary>
            private class OwnerDecoder : enc.StructDecoder<Owner>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Owner" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Owner Create()
                {
                    return new Owner();
                }

                /// <summary>
                /// <para>Decode fields without ensuring start and end object.</para>
                /// </summary>
                /// <param name="reader">The json reader.</param>
                /// <returns>The decoded object.</returns>
                public override Owner DecodeFields(enc.IJsonReader reader)
                {
                    return Owner.Instance;
                }
            }

            #endregion
        }
    }
}
