// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Team.Routes
{
    using sys = System;
    using io = System.IO;
    using col = System.Collections.Generic;
    using t = System.Threading.Tasks;
    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The routes for the <see cref="N:Dropbox.Api.Team"/> namespace</para>
    /// </summary>
    public class TeamRoutes
    {
        /// <summary>
        /// <para>Initializes a new instance of the <see cref="TeamRoutes" /> class.</para>
        /// </summary>
        /// <param name="transport">The transport to use</param>
        internal TeamRoutes(enc.ITransport transport)
        {
            this.Transport = transport;
        }

        /// <summary>
        /// <para>Gets the transport used for these routes</para>
        /// </summary>
        internal enc.ITransport Transport { get; private set; }

        /// <summary>
        /// <para>Creates a new, empty group, with a requested name.</para>
        /// <para>Permission : Team member management</para>
        /// </summary>
        /// <param name="groupCreateArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GroupCreateError"/>.</exception>
        public t.Task<GroupFullInfo> AlphaGroupsCreateAsync(GroupCreateArg groupCreateArg)
        {
            return this.Transport.SendRpcRequestAsync<GroupCreateArg, GroupFullInfo, GroupCreateError>(groupCreateArg, "api", "/team/alpha/groups/create", Dropbox.Api.Team.GroupCreateArg.Encoder, Dropbox.Api.Team.GroupFullInfo.Decoder, Dropbox.Api.Team.GroupCreateError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the alpha groups create route.</para>
        /// </summary>
        /// <param name="groupCreateArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginAlphaGroupsCreate(GroupCreateArg groupCreateArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.AlphaGroupsCreateAsync(groupCreateArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Creates a new, empty group, with a requested name.</para>
        /// <para>Permission : Team member management</para>
        /// </summary>
        /// <param name="groupName">Group name.</param>
        /// <param name="groupExternalId">The creator of a team can associate an arbitrary
        /// external ID to the group.</param>
        /// <param name="groupManagementType">Whether the team can be managed by selected
        /// users, or only by team admins</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GroupCreateError"/>.</exception>
        public t.Task<GroupFullInfo> AlphaGroupsCreateAsync(string groupName,
                                                            string groupExternalId = null,
                                                            Dropbox.Api.TeamCommon.GroupManagementType groupManagementType = null)
        {
            var groupCreateArg = new GroupCreateArg(groupName,
                                                    groupExternalId,
                                                    groupManagementType);

            return this.AlphaGroupsCreateAsync(groupCreateArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the alpha groups create route.</para>
        /// </summary>
        /// <param name="groupName">Group name.</param>
        /// <param name="groupExternalId">The creator of a team can associate an arbitrary
        /// external ID to the group.</param>
        /// <param name="groupManagementType">Whether the team can be managed by selected
        /// users, or only by team admins</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginAlphaGroupsCreate(string groupName,
                                                       string groupExternalId = null,
                                                       Dropbox.Api.TeamCommon.GroupManagementType groupManagementType = null,
                                                       sys.AsyncCallback callback = null,
                                                       object callbackState = null)
        {
            var groupCreateArg = new GroupCreateArg(groupName,
                                                    groupExternalId,
                                                    groupManagementType);

            return this.BeginAlphaGroupsCreate(groupCreateArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the alpha groups create route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GroupCreateError"/>.</exception>
        public GroupFullInfo EndAlphaGroupsCreate(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<GroupFullInfo>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Retrieves information about one or more groups.</para>
        /// <para>Permission : Team Information</para>
        /// </summary>
        /// <param name="groupsSelector">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GroupsGetInfoError"/>.</exception>
        public t.Task<col.List<GroupsGetInfoItem>> AlphaGroupsGetInfoAsync(GroupsSelector groupsSelector)
        {
            return this.Transport.SendRpcRequestAsync<GroupsSelector, col.List<GroupsGetInfoItem>, GroupsGetInfoError>(groupsSelector, "api", "/team/alpha/groups/get_info", Dropbox.Api.Team.GroupsSelector.Encoder, enc.Decoder.CreateListDecoder(Dropbox.Api.Team.GroupsGetInfoItem.Decoder), Dropbox.Api.Team.GroupsGetInfoError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the alpha groups get info route.</para>
        /// </summary>
        /// <param name="groupsSelector">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginAlphaGroupsGetInfo(GroupsSelector groupsSelector, sys.AsyncCallback callback, object state = null)
        {
            var task = this.AlphaGroupsGetInfoAsync(groupsSelector);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the alpha groups get info route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GroupsGetInfoError"/>.</exception>
        public col.List<GroupsGetInfoItem> EndAlphaGroupsGetInfo(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<col.List<GroupsGetInfoItem>>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Lists groups on a team.</para>
        /// <para>Permission : Team Information</para>
        /// </summary>
        /// <param name="groupsListArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        public t.Task<GroupsListResult> AlphaGroupsListAsync(GroupsListArg groupsListArg)
        {
            return this.Transport.SendRpcRequestAsync<GroupsListArg, GroupsListResult, enc.Empty>(groupsListArg, "api", "/team/alpha/groups/list", Dropbox.Api.Team.GroupsListArg.Encoder, Dropbox.Api.Team.GroupsListResult.Decoder, enc.EmptyDecoder.Instance);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the alpha groups list route.</para>
        /// </summary>
        /// <param name="groupsListArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginAlphaGroupsList(GroupsListArg groupsListArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.AlphaGroupsListAsync(groupsListArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Lists groups on a team.</para>
        /// <para>Permission : Team Information</para>
        /// </summary>
        /// <param name="limit">Number of results to return per call.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        public t.Task<GroupsListResult> AlphaGroupsListAsync(uint limit = 1000)
        {
            var groupsListArg = new GroupsListArg(limit);

            return this.AlphaGroupsListAsync(groupsListArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the alpha groups list route.</para>
        /// </summary>
        /// <param name="limit">Number of results to return per call.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginAlphaGroupsList(uint limit = 1000,
                                                     sys.AsyncCallback callback = null,
                                                     object callbackState = null)
        {
            var groupsListArg = new GroupsListArg(limit);

            return this.BeginAlphaGroupsList(groupsListArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the alpha groups list route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        public GroupsListResult EndAlphaGroupsList(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<GroupsListResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Once a cursor has been retrieved from <see
        /// cref="Dropbox.Api.Team.Routes.TeamRoutes.AlphaGroupsListAsync" />, use this to
        /// paginate through all groups.</para>
        /// <para>Permission : Team information</para>
        /// </summary>
        /// <param name="groupsListContinueArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GroupsListContinueError"/>.</exception>
        public t.Task<GroupsListResult> AlphaGroupsListContinueAsync(GroupsListContinueArg groupsListContinueArg)
        {
            return this.Transport.SendRpcRequestAsync<GroupsListContinueArg, GroupsListResult, GroupsListContinueError>(groupsListContinueArg, "api", "/team/alpha/groups/list/continue", Dropbox.Api.Team.GroupsListContinueArg.Encoder, Dropbox.Api.Team.GroupsListResult.Decoder, Dropbox.Api.Team.GroupsListContinueError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the alpha groups list continue route.</para>
        /// </summary>
        /// <param name="groupsListContinueArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginAlphaGroupsListContinue(GroupsListContinueArg groupsListContinueArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.AlphaGroupsListContinueAsync(groupsListContinueArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Once a cursor has been retrieved from <see
        /// cref="Dropbox.Api.Team.Routes.TeamRoutes.AlphaGroupsListAsync" />, use this to
        /// paginate through all groups.</para>
        /// <para>Permission : Team information</para>
        /// </summary>
        /// <param name="cursor">Indicates from what point to get the next set of
        /// groups.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GroupsListContinueError"/>.</exception>
        public t.Task<GroupsListResult> AlphaGroupsListContinueAsync(string cursor)
        {
            var groupsListContinueArg = new GroupsListContinueArg(cursor);

            return this.AlphaGroupsListContinueAsync(groupsListContinueArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the alpha groups list continue route.</para>
        /// </summary>
        /// <param name="cursor">Indicates from what point to get the next set of
        /// groups.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginAlphaGroupsListContinue(string cursor,
                                                             sys.AsyncCallback callback,
                                                             object callbackState = null)
        {
            var groupsListContinueArg = new GroupsListContinueArg(cursor);

            return this.BeginAlphaGroupsListContinue(groupsListContinueArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the alpha groups list continue
        /// route to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GroupsListContinueError"/>.</exception>
        public GroupsListResult EndAlphaGroupsListContinue(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<GroupsListResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Updates a group's name, external ID or management type.</para>
        /// <para>Permission : Team member management</para>
        /// </summary>
        /// <param name="groupUpdateArgs">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GroupUpdateError"/>.</exception>
        public t.Task<GroupFullInfo> AlphaGroupsUpdateAsync(GroupUpdateArgs groupUpdateArgs)
        {
            return this.Transport.SendRpcRequestAsync<GroupUpdateArgs, GroupFullInfo, GroupUpdateError>(groupUpdateArgs, "api", "/team/alpha/groups/update", Dropbox.Api.Team.GroupUpdateArgs.Encoder, Dropbox.Api.Team.GroupFullInfo.Decoder, Dropbox.Api.Team.GroupUpdateError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the alpha groups update route.</para>
        /// </summary>
        /// <param name="groupUpdateArgs">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginAlphaGroupsUpdate(GroupUpdateArgs groupUpdateArgs, sys.AsyncCallback callback, object state = null)
        {
            var task = this.AlphaGroupsUpdateAsync(groupUpdateArgs);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Updates a group's name, external ID or management type.</para>
        /// <para>Permission : Team member management</para>
        /// </summary>
        /// <param name="group">Specify a group.</param>
        /// <param name="returnMembers">Whether to return the list of members in the group.
        /// Note that the default value will cause all the group members  to be returned in the
        /// response. This may take a long time for large groups.</param>
        /// <param name="newGroupName">Optional argument. Set group name to this if
        /// provided.</param>
        /// <param name="newGroupExternalId">Optional argument. New group external ID. If the
        /// argument is None, the group's external_id won't be updated. If the argument is
        /// empty string, the group's external id will be cleared.</param>
        /// <param name="newGroupManagementType">Set new group management type, if
        /// provided.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GroupUpdateError"/>.</exception>
        public t.Task<GroupFullInfo> AlphaGroupsUpdateAsync(GroupSelector @group,
                                                            bool returnMembers = true,
                                                            string newGroupName = null,
                                                            string newGroupExternalId = null,
                                                            Dropbox.Api.TeamCommon.GroupManagementType newGroupManagementType = null)
        {
            var groupUpdateArgs = new GroupUpdateArgs(@group,
                                                      returnMembers,
                                                      newGroupName,
                                                      newGroupExternalId,
                                                      newGroupManagementType);

            return this.AlphaGroupsUpdateAsync(groupUpdateArgs);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the alpha groups update route.</para>
        /// </summary>
        /// <param name="group">Specify a group.</param>
        /// <param name="returnMembers">Whether to return the list of members in the group.
        /// Note that the default value will cause all the group members  to be returned in the
        /// response. This may take a long time for large groups.</param>
        /// <param name="newGroupName">Optional argument. Set group name to this if
        /// provided.</param>
        /// <param name="newGroupExternalId">Optional argument. New group external ID. If the
        /// argument is None, the group's external_id won't be updated. If the argument is
        /// empty string, the group's external id will be cleared.</param>
        /// <param name="newGroupManagementType">Set new group management type, if
        /// provided.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginAlphaGroupsUpdate(GroupSelector @group,
                                                       bool returnMembers = true,
                                                       string newGroupName = null,
                                                       string newGroupExternalId = null,
                                                       Dropbox.Api.TeamCommon.GroupManagementType newGroupManagementType = null,
                                                       sys.AsyncCallback callback = null,
                                                       object callbackState = null)
        {
            var groupUpdateArgs = new GroupUpdateArgs(@group,
                                                      returnMembers,
                                                      newGroupName,
                                                      newGroupExternalId,
                                                      newGroupManagementType);

            return this.BeginAlphaGroupsUpdate(groupUpdateArgs, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the alpha groups update route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GroupUpdateError"/>.</exception>
        public GroupFullInfo EndAlphaGroupsUpdate(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<GroupFullInfo>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>List all device sessions of a team's member.</para>
        /// </summary>
        /// <param name="listMemberDevicesArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListMemberDevicesError"/>.</exception>
        public t.Task<ListMemberDevicesResult> DevicesListMemberDevicesAsync(ListMemberDevicesArg listMemberDevicesArg)
        {
            return this.Transport.SendRpcRequestAsync<ListMemberDevicesArg, ListMemberDevicesResult, ListMemberDevicesError>(listMemberDevicesArg, "api", "/team/devices/list_member_devices", Dropbox.Api.Team.ListMemberDevicesArg.Encoder, Dropbox.Api.Team.ListMemberDevicesResult.Decoder, Dropbox.Api.Team.ListMemberDevicesError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the devices list member devices route.</para>
        /// </summary>
        /// <param name="listMemberDevicesArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginDevicesListMemberDevices(ListMemberDevicesArg listMemberDevicesArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.DevicesListMemberDevicesAsync(listMemberDevicesArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>List all device sessions of a team's member.</para>
        /// </summary>
        /// <param name="teamMemberId">The team's member id</param>
        /// <param name="includeWebSessions">Whether to list web sessions of the team's
        /// member</param>
        /// <param name="includeDesktopClients">Whether to list linked desktop devices of the
        /// team's member</param>
        /// <param name="includeMobileClients">Whether to list linked mobile devices of the
        /// team's member</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListMemberDevicesError"/>.</exception>
        public t.Task<ListMemberDevicesResult> DevicesListMemberDevicesAsync(string teamMemberId,
                                                                             bool includeWebSessions = true,
                                                                             bool includeDesktopClients = true,
                                                                             bool includeMobileClients = true)
        {
            var listMemberDevicesArg = new ListMemberDevicesArg(teamMemberId,
                                                                includeWebSessions,
                                                                includeDesktopClients,
                                                                includeMobileClients);

            return this.DevicesListMemberDevicesAsync(listMemberDevicesArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the devices list member devices route.</para>
        /// </summary>
        /// <param name="teamMemberId">The team's member id</param>
        /// <param name="includeWebSessions">Whether to list web sessions of the team's
        /// member</param>
        /// <param name="includeDesktopClients">Whether to list linked desktop devices of the
        /// team's member</param>
        /// <param name="includeMobileClients">Whether to list linked mobile devices of the
        /// team's member</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginDevicesListMemberDevices(string teamMemberId,
                                                              bool includeWebSessions = true,
                                                              bool includeDesktopClients = true,
                                                              bool includeMobileClients = true,
                                                              sys.AsyncCallback callback = null,
                                                              object callbackState = null)
        {
            var listMemberDevicesArg = new ListMemberDevicesArg(teamMemberId,
                                                                includeWebSessions,
                                                                includeDesktopClients,
                                                                includeMobileClients);

            return this.BeginDevicesListMemberDevices(listMemberDevicesArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the devices list member devices
        /// route to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListMemberDevicesError"/>.</exception>
        public ListMemberDevicesResult EndDevicesListMemberDevices(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<ListMemberDevicesResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>List all device sessions of a team.</para>
        /// </summary>
        /// <param name="listMembersDevicesArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListMembersDevicesError"/>.</exception>
        public t.Task<ListMembersDevicesResult> DevicesListMembersDevicesAsync(ListMembersDevicesArg listMembersDevicesArg)
        {
            return this.Transport.SendRpcRequestAsync<ListMembersDevicesArg, ListMembersDevicesResult, ListMembersDevicesError>(listMembersDevicesArg, "api", "/team/devices/list_members_devices", Dropbox.Api.Team.ListMembersDevicesArg.Encoder, Dropbox.Api.Team.ListMembersDevicesResult.Decoder, Dropbox.Api.Team.ListMembersDevicesError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the devices list members devices route.</para>
        /// </summary>
        /// <param name="listMembersDevicesArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginDevicesListMembersDevices(ListMembersDevicesArg listMembersDevicesArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.DevicesListMembersDevicesAsync(listMembersDevicesArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>List all device sessions of a team.</para>
        /// </summary>
        /// <param name="cursor">At the first call to the <see
        /// cref="Dropbox.Api.Team.Routes.TeamRoutes.DevicesListMembersDevicesAsync" /> the
        /// cursor shouldn't be passed. Then, if the result of the call includes a cursor, the
        /// following requests should include the received cursors in order to receive the next
        /// sub list of team devices</param>
        /// <param name="includeWebSessions">Whether to list web sessions of the team
        /// members</param>
        /// <param name="includeDesktopClients">Whether to list desktop clients of the team
        /// members</param>
        /// <param name="includeMobileClients">Whether to list mobile clients of the team
        /// members</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListMembersDevicesError"/>.</exception>
        public t.Task<ListMembersDevicesResult> DevicesListMembersDevicesAsync(string cursor = null,
                                                                               bool includeWebSessions = true,
                                                                               bool includeDesktopClients = true,
                                                                               bool includeMobileClients = true)
        {
            var listMembersDevicesArg = new ListMembersDevicesArg(cursor,
                                                                  includeWebSessions,
                                                                  includeDesktopClients,
                                                                  includeMobileClients);

            return this.DevicesListMembersDevicesAsync(listMembersDevicesArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the devices list members devices route.</para>
        /// </summary>
        /// <param name="cursor">At the first call to the <see
        /// cref="Dropbox.Api.Team.Routes.TeamRoutes.DevicesListMembersDevicesAsync" /> the
        /// cursor shouldn't be passed. Then, if the result of the call includes a cursor, the
        /// following requests should include the received cursors in order to receive the next
        /// sub list of team devices</param>
        /// <param name="includeWebSessions">Whether to list web sessions of the team
        /// members</param>
        /// <param name="includeDesktopClients">Whether to list desktop clients of the team
        /// members</param>
        /// <param name="includeMobileClients">Whether to list mobile clients of the team
        /// members</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginDevicesListMembersDevices(string cursor = null,
                                                               bool includeWebSessions = true,
                                                               bool includeDesktopClients = true,
                                                               bool includeMobileClients = true,
                                                               sys.AsyncCallback callback = null,
                                                               object callbackState = null)
        {
            var listMembersDevicesArg = new ListMembersDevicesArg(cursor,
                                                                  includeWebSessions,
                                                                  includeDesktopClients,
                                                                  includeMobileClients);

            return this.BeginDevicesListMembersDevices(listMembersDevicesArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the devices list members devices
        /// route to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListMembersDevicesError"/>.</exception>
        public ListMembersDevicesResult EndDevicesListMembersDevices(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<ListMembersDevicesResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>List all device sessions of a team.</para>
        /// </summary>
        /// <param name="listTeamDevicesArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListTeamDevicesError"/>.</exception>
        [sys.Obsolete("This function is deprecated, please use DevicesListMembersDevicesAsync instead.")]
        public t.Task<ListTeamDevicesResult> DevicesListTeamDevicesAsync(ListTeamDevicesArg listTeamDevicesArg)
        {
            return this.Transport.SendRpcRequestAsync<ListTeamDevicesArg, ListTeamDevicesResult, ListTeamDevicesError>(listTeamDevicesArg, "api", "/team/devices/list_team_devices", Dropbox.Api.Team.ListTeamDevicesArg.Encoder, Dropbox.Api.Team.ListTeamDevicesResult.Decoder, Dropbox.Api.Team.ListTeamDevicesError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the devices list team devices route.</para>
        /// </summary>
        /// <param name="listTeamDevicesArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        [sys.Obsolete("This function is deprecated, please use BeginDevicesListMembersDevices instead.")]
        public sys.IAsyncResult BeginDevicesListTeamDevices(ListTeamDevicesArg listTeamDevicesArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.DevicesListTeamDevicesAsync(listTeamDevicesArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>List all device sessions of a team.</para>
        /// </summary>
        /// <param name="cursor">At the first call to the <see
        /// cref="Dropbox.Api.Team.Routes.TeamRoutes.DevicesListTeamDevicesAsync" /> the cursor
        /// shouldn't be passed. Then, if the result of the call includes a cursor, the
        /// following requests should include the received cursors in order to receive the next
        /// sub list of team devices</param>
        /// <param name="includeWebSessions">Whether to list web sessions of the team
        /// members</param>
        /// <param name="includeDesktopClients">Whether to list desktop clients of the team
        /// members</param>
        /// <param name="includeMobileClients">Whether to list mobile clients of the team
        /// members</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListTeamDevicesError"/>.</exception>
        [sys.Obsolete("This function is deprecated, please use DevicesListMembersDevicesAsync instead.")]
        public t.Task<ListTeamDevicesResult> DevicesListTeamDevicesAsync(string cursor = null,
                                                                         bool includeWebSessions = true,
                                                                         bool includeDesktopClients = true,
                                                                         bool includeMobileClients = true)
        {
            var listTeamDevicesArg = new ListTeamDevicesArg(cursor,
                                                            includeWebSessions,
                                                            includeDesktopClients,
                                                            includeMobileClients);

            return this.DevicesListTeamDevicesAsync(listTeamDevicesArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the devices list team devices route.</para>
        /// </summary>
        /// <param name="cursor">At the first call to the <see
        /// cref="Dropbox.Api.Team.Routes.TeamRoutes.DevicesListTeamDevicesAsync" /> the cursor
        /// shouldn't be passed. Then, if the result of the call includes a cursor, the
        /// following requests should include the received cursors in order to receive the next
        /// sub list of team devices</param>
        /// <param name="includeWebSessions">Whether to list web sessions of the team
        /// members</param>
        /// <param name="includeDesktopClients">Whether to list desktop clients of the team
        /// members</param>
        /// <param name="includeMobileClients">Whether to list mobile clients of the team
        /// members</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        [sys.Obsolete("This function is deprecated, please use BeginDevicesListMembersDevices instead.")]
        public sys.IAsyncResult BeginDevicesListTeamDevices(string cursor = null,
                                                            bool includeWebSessions = true,
                                                            bool includeDesktopClients = true,
                                                            bool includeMobileClients = true,
                                                            sys.AsyncCallback callback = null,
                                                            object callbackState = null)
        {
            var listTeamDevicesArg = new ListTeamDevicesArg(cursor,
                                                            includeWebSessions,
                                                            includeDesktopClients,
                                                            includeMobileClients);

            return this.BeginDevicesListTeamDevices(listTeamDevicesArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the devices list team devices
        /// route to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListTeamDevicesError"/>.</exception>
        [sys.Obsolete("This function is deprecated, please use EndDevicesListMembersDevices instead.")]
        public ListTeamDevicesResult EndDevicesListTeamDevices(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<ListTeamDevicesResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Revoke a device session of a team's member</para>
        /// </summary>
        /// <param name="revokeDeviceSessionArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="RevokeDeviceSessionError"/>.</exception>
        public t.Task DevicesRevokeDeviceSessionAsync(RevokeDeviceSessionArg revokeDeviceSessionArg)
        {
            return this.Transport.SendRpcRequestAsync<RevokeDeviceSessionArg, enc.Empty, RevokeDeviceSessionError>(revokeDeviceSessionArg, "api", "/team/devices/revoke_device_session", Dropbox.Api.Team.RevokeDeviceSessionArg.Encoder, enc.EmptyDecoder.Instance, Dropbox.Api.Team.RevokeDeviceSessionError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the devices revoke device session
        /// route.</para>
        /// </summary>
        /// <param name="revokeDeviceSessionArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginDevicesRevokeDeviceSession(RevokeDeviceSessionArg revokeDeviceSessionArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.DevicesRevokeDeviceSessionAsync(revokeDeviceSessionArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the devices revoke device session
        /// route to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="RevokeDeviceSessionError"/>.</exception>
        public void EndDevicesRevokeDeviceSession(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }
        }

        /// <summary>
        /// <para>Revoke a list of device sessions of team members</para>
        /// </summary>
        /// <param name="revokeDeviceSessionBatchArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="RevokeDeviceSessionBatchError"/>.</exception>
        public t.Task<RevokeDeviceSessionBatchResult> DevicesRevokeDeviceSessionBatchAsync(RevokeDeviceSessionBatchArg revokeDeviceSessionBatchArg)
        {
            return this.Transport.SendRpcRequestAsync<RevokeDeviceSessionBatchArg, RevokeDeviceSessionBatchResult, RevokeDeviceSessionBatchError>(revokeDeviceSessionBatchArg, "api", "/team/devices/revoke_device_session_batch", Dropbox.Api.Team.RevokeDeviceSessionBatchArg.Encoder, Dropbox.Api.Team.RevokeDeviceSessionBatchResult.Decoder, Dropbox.Api.Team.RevokeDeviceSessionBatchError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the devices revoke device session batch
        /// route.</para>
        /// </summary>
        /// <param name="revokeDeviceSessionBatchArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginDevicesRevokeDeviceSessionBatch(RevokeDeviceSessionBatchArg revokeDeviceSessionBatchArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.DevicesRevokeDeviceSessionBatchAsync(revokeDeviceSessionBatchArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Revoke a list of device sessions of team members</para>
        /// </summary>
        /// <param name="revokeDevices">The revoke devices</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="RevokeDeviceSessionBatchError"/>.</exception>
        public t.Task<RevokeDeviceSessionBatchResult> DevicesRevokeDeviceSessionBatchAsync(col.IEnumerable<RevokeDeviceSessionArg> revokeDevices)
        {
            var revokeDeviceSessionBatchArg = new RevokeDeviceSessionBatchArg(revokeDevices);

            return this.DevicesRevokeDeviceSessionBatchAsync(revokeDeviceSessionBatchArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the devices revoke device session batch
        /// route.</para>
        /// </summary>
        /// <param name="revokeDevices">The revoke devices</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginDevicesRevokeDeviceSessionBatch(col.IEnumerable<RevokeDeviceSessionArg> revokeDevices,
                                                                     sys.AsyncCallback callback,
                                                                     object callbackState = null)
        {
            var revokeDeviceSessionBatchArg = new RevokeDeviceSessionBatchArg(revokeDevices);

            return this.BeginDevicesRevokeDeviceSessionBatch(revokeDeviceSessionBatchArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the devices revoke device session
        /// batch route to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="RevokeDeviceSessionBatchError"/>.</exception>
        public RevokeDeviceSessionBatchResult EndDevicesRevokeDeviceSessionBatch(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<RevokeDeviceSessionBatchResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Retrieves information about a team.</para>
        /// </summary>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        public t.Task<TeamGetInfoResult> GetInfoAsync()
        {
            return this.Transport.SendRpcRequestAsync<enc.Empty, TeamGetInfoResult, enc.Empty>(enc.Empty.Instance, "api", "/team/get_info", enc.EmptyEncoder.Instance, Dropbox.Api.Team.TeamGetInfoResult.Decoder, enc.EmptyDecoder.Instance);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the get info route.</para>
        /// </summary>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginGetInfo(sys.AsyncCallback callback, object state = null)
        {
            var task = this.GetInfoAsync();

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the get info route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        public TeamGetInfoResult EndGetInfo(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<TeamGetInfoResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Creates a new, empty group, with a requested name.</para>
        /// <para>Permission : Team member management</para>
        /// </summary>
        /// <param name="groupCreateArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GroupCreateError"/>.</exception>
        public t.Task<GroupFullInfo> GroupsCreateAsync(GroupCreateArg groupCreateArg)
        {
            return this.Transport.SendRpcRequestAsync<GroupCreateArg, GroupFullInfo, GroupCreateError>(groupCreateArg, "api", "/team/groups/create", Dropbox.Api.Team.GroupCreateArg.Encoder, Dropbox.Api.Team.GroupFullInfo.Decoder, Dropbox.Api.Team.GroupCreateError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the groups create route.</para>
        /// </summary>
        /// <param name="groupCreateArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginGroupsCreate(GroupCreateArg groupCreateArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.GroupsCreateAsync(groupCreateArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Creates a new, empty group, with a requested name.</para>
        /// <para>Permission : Team member management</para>
        /// </summary>
        /// <param name="groupName">Group name.</param>
        /// <param name="groupExternalId">The creator of a team can associate an arbitrary
        /// external ID to the group.</param>
        /// <param name="groupManagementType">Whether the team can be managed by selected
        /// users, or only by team admins</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GroupCreateError"/>.</exception>
        public t.Task<GroupFullInfo> GroupsCreateAsync(string groupName,
                                                       string groupExternalId = null,
                                                       Dropbox.Api.TeamCommon.GroupManagementType groupManagementType = null)
        {
            var groupCreateArg = new GroupCreateArg(groupName,
                                                    groupExternalId,
                                                    groupManagementType);

            return this.GroupsCreateAsync(groupCreateArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the groups create route.</para>
        /// </summary>
        /// <param name="groupName">Group name.</param>
        /// <param name="groupExternalId">The creator of a team can associate an arbitrary
        /// external ID to the group.</param>
        /// <param name="groupManagementType">Whether the team can be managed by selected
        /// users, or only by team admins</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginGroupsCreate(string groupName,
                                                  string groupExternalId = null,
                                                  Dropbox.Api.TeamCommon.GroupManagementType groupManagementType = null,
                                                  sys.AsyncCallback callback = null,
                                                  object callbackState = null)
        {
            var groupCreateArg = new GroupCreateArg(groupName,
                                                    groupExternalId,
                                                    groupManagementType);

            return this.BeginGroupsCreate(groupCreateArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the groups create route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GroupCreateError"/>.</exception>
        public GroupFullInfo EndGroupsCreate(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<GroupFullInfo>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Deletes a group.</para>
        /// <para>The group is deleted immediately. However the revoking of group-owned
        /// resources may take additional time. Use the <see
        /// cref="Dropbox.Api.Team.Routes.TeamRoutes.GroupsJobStatusGetAsync" /> to determine
        /// whether this process has completed.</para>
        /// <para>Permission : Team member management</para>
        /// </summary>
        /// <param name="groupSelector">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GroupDeleteError"/>.</exception>
        public t.Task<Dropbox.Api.Async.LaunchEmptyResult> GroupsDeleteAsync(GroupSelector groupSelector)
        {
            return this.Transport.SendRpcRequestAsync<GroupSelector, Dropbox.Api.Async.LaunchEmptyResult, GroupDeleteError>(groupSelector, "api", "/team/groups/delete", Dropbox.Api.Team.GroupSelector.Encoder, Dropbox.Api.Async.LaunchEmptyResult.Decoder, Dropbox.Api.Team.GroupDeleteError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the groups delete route.</para>
        /// </summary>
        /// <param name="groupSelector">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginGroupsDelete(GroupSelector groupSelector, sys.AsyncCallback callback, object state = null)
        {
            var task = this.GroupsDeleteAsync(groupSelector);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the groups delete route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GroupDeleteError"/>.</exception>
        public Dropbox.Api.Async.LaunchEmptyResult EndGroupsDelete(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<Dropbox.Api.Async.LaunchEmptyResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Retrieves information about one or more groups.</para>
        /// <para>Permission : Team Information</para>
        /// </summary>
        /// <param name="groupsSelector">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GroupsGetInfoError"/>.</exception>
        public t.Task<col.List<GroupsGetInfoItem>> GroupsGetInfoAsync(GroupsSelector groupsSelector)
        {
            return this.Transport.SendRpcRequestAsync<GroupsSelector, col.List<GroupsGetInfoItem>, GroupsGetInfoError>(groupsSelector, "api", "/team/groups/get_info", Dropbox.Api.Team.GroupsSelector.Encoder, enc.Decoder.CreateListDecoder(Dropbox.Api.Team.GroupsGetInfoItem.Decoder), Dropbox.Api.Team.GroupsGetInfoError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the groups get info route.</para>
        /// </summary>
        /// <param name="groupsSelector">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginGroupsGetInfo(GroupsSelector groupsSelector, sys.AsyncCallback callback, object state = null)
        {
            var task = this.GroupsGetInfoAsync(groupsSelector);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the groups get info route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GroupsGetInfoError"/>.</exception>
        public col.List<GroupsGetInfoItem> EndGroupsGetInfo(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<col.List<GroupsGetInfoItem>>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Once an async_job_id is returned from <see
        /// cref="Dropbox.Api.Team.Routes.TeamRoutes.GroupsDeleteAsync" />, <see
        /// cref="Dropbox.Api.Team.Routes.TeamRoutes.GroupsMembersAddAsync" /> , or <see
        /// cref="Dropbox.Api.Team.Routes.TeamRoutes.GroupsMembersRemoveAsync" /> use this
        /// method to poll the status of granting/revoking group members' access to group-owned
        /// resources.</para>
        /// <para>Permission : Team member management</para>
        /// </summary>
        /// <param name="pollArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GroupsPollError"/>.</exception>
        public t.Task<Dropbox.Api.Async.PollEmptyResult> GroupsJobStatusGetAsync(Dropbox.Api.Async.PollArg pollArg)
        {
            return this.Transport.SendRpcRequestAsync<Dropbox.Api.Async.PollArg, Dropbox.Api.Async.PollEmptyResult, GroupsPollError>(pollArg, "api", "/team/groups/job_status/get", Dropbox.Api.Async.PollArg.Encoder, Dropbox.Api.Async.PollEmptyResult.Decoder, Dropbox.Api.Team.GroupsPollError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the groups job status get route.</para>
        /// </summary>
        /// <param name="pollArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginGroupsJobStatusGet(Dropbox.Api.Async.PollArg pollArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.GroupsJobStatusGetAsync(pollArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Once an async_job_id is returned from <see
        /// cref="Dropbox.Api.Team.Routes.TeamRoutes.GroupsDeleteAsync" />, <see
        /// cref="Dropbox.Api.Team.Routes.TeamRoutes.GroupsMembersAddAsync" /> , or <see
        /// cref="Dropbox.Api.Team.Routes.TeamRoutes.GroupsMembersRemoveAsync" /> use this
        /// method to poll the status of granting/revoking group members' access to group-owned
        /// resources.</para>
        /// <para>Permission : Team member management</para>
        /// </summary>
        /// <param name="asyncJobId">Id of the asynchronous job. This is the value of a
        /// response returned from the method that launched the job.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GroupsPollError"/>.</exception>
        public t.Task<Dropbox.Api.Async.PollEmptyResult> GroupsJobStatusGetAsync(string asyncJobId)
        {
            var pollArg = new Dropbox.Api.Async.PollArg(asyncJobId);

            return this.GroupsJobStatusGetAsync(pollArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the groups job status get route.</para>
        /// </summary>
        /// <param name="asyncJobId">Id of the asynchronous job. This is the value of a
        /// response returned from the method that launched the job.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginGroupsJobStatusGet(string asyncJobId,
                                                        sys.AsyncCallback callback,
                                                        object callbackState = null)
        {
            var pollArg = new Dropbox.Api.Async.PollArg(asyncJobId);

            return this.BeginGroupsJobStatusGet(pollArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the groups job status get route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GroupsPollError"/>.</exception>
        public Dropbox.Api.Async.PollEmptyResult EndGroupsJobStatusGet(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<Dropbox.Api.Async.PollEmptyResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Lists groups on a team.</para>
        /// <para>Permission : Team Information</para>
        /// </summary>
        /// <param name="groupsListArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        public t.Task<GroupsListResult> GroupsListAsync(GroupsListArg groupsListArg)
        {
            return this.Transport.SendRpcRequestAsync<GroupsListArg, GroupsListResult, enc.Empty>(groupsListArg, "api", "/team/groups/list", Dropbox.Api.Team.GroupsListArg.Encoder, Dropbox.Api.Team.GroupsListResult.Decoder, enc.EmptyDecoder.Instance);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the groups list route.</para>
        /// </summary>
        /// <param name="groupsListArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginGroupsList(GroupsListArg groupsListArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.GroupsListAsync(groupsListArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Lists groups on a team.</para>
        /// <para>Permission : Team Information</para>
        /// </summary>
        /// <param name="limit">Number of results to return per call.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        public t.Task<GroupsListResult> GroupsListAsync(uint limit = 1000)
        {
            var groupsListArg = new GroupsListArg(limit);

            return this.GroupsListAsync(groupsListArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the groups list route.</para>
        /// </summary>
        /// <param name="limit">Number of results to return per call.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginGroupsList(uint limit = 1000,
                                                sys.AsyncCallback callback = null,
                                                object callbackState = null)
        {
            var groupsListArg = new GroupsListArg(limit);

            return this.BeginGroupsList(groupsListArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the groups list route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        public GroupsListResult EndGroupsList(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<GroupsListResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Once a cursor has been retrieved from <see
        /// cref="Dropbox.Api.Team.Routes.TeamRoutes.GroupsListAsync" />, use this to paginate
        /// through all groups.</para>
        /// <para>Permission : Team information</para>
        /// </summary>
        /// <param name="groupsListContinueArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GroupsListContinueError"/>.</exception>
        public t.Task<GroupsListResult> GroupsListContinueAsync(GroupsListContinueArg groupsListContinueArg)
        {
            return this.Transport.SendRpcRequestAsync<GroupsListContinueArg, GroupsListResult, GroupsListContinueError>(groupsListContinueArg, "api", "/team/groups/list/continue", Dropbox.Api.Team.GroupsListContinueArg.Encoder, Dropbox.Api.Team.GroupsListResult.Decoder, Dropbox.Api.Team.GroupsListContinueError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the groups list continue route.</para>
        /// </summary>
        /// <param name="groupsListContinueArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginGroupsListContinue(GroupsListContinueArg groupsListContinueArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.GroupsListContinueAsync(groupsListContinueArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Once a cursor has been retrieved from <see
        /// cref="Dropbox.Api.Team.Routes.TeamRoutes.GroupsListAsync" />, use this to paginate
        /// through all groups.</para>
        /// <para>Permission : Team information</para>
        /// </summary>
        /// <param name="cursor">Indicates from what point to get the next set of
        /// groups.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GroupsListContinueError"/>.</exception>
        public t.Task<GroupsListResult> GroupsListContinueAsync(string cursor)
        {
            var groupsListContinueArg = new GroupsListContinueArg(cursor);

            return this.GroupsListContinueAsync(groupsListContinueArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the groups list continue route.</para>
        /// </summary>
        /// <param name="cursor">Indicates from what point to get the next set of
        /// groups.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginGroupsListContinue(string cursor,
                                                        sys.AsyncCallback callback,
                                                        object callbackState = null)
        {
            var groupsListContinueArg = new GroupsListContinueArg(cursor);

            return this.BeginGroupsListContinue(groupsListContinueArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the groups list continue route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GroupsListContinueError"/>.</exception>
        public GroupsListResult EndGroupsListContinue(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<GroupsListResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Adds members to a group.</para>
        /// <para>The members are added immediately. However the granting of group-owned
        /// resources may take additional time. Use the <see
        /// cref="Dropbox.Api.Team.Routes.TeamRoutes.GroupsJobStatusGetAsync" /> to determine
        /// whether this process has completed.</para>
        /// <para>Permission : Team member management</para>
        /// </summary>
        /// <param name="groupMembersAddArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GroupMembersAddError"/>.</exception>
        public t.Task<GroupMembersChangeResult> GroupsMembersAddAsync(GroupMembersAddArg groupMembersAddArg)
        {
            return this.Transport.SendRpcRequestAsync<GroupMembersAddArg, GroupMembersChangeResult, GroupMembersAddError>(groupMembersAddArg, "api", "/team/groups/members/add", Dropbox.Api.Team.GroupMembersAddArg.Encoder, Dropbox.Api.Team.GroupMembersChangeResult.Decoder, Dropbox.Api.Team.GroupMembersAddError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the groups members add route.</para>
        /// </summary>
        /// <param name="groupMembersAddArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginGroupsMembersAdd(GroupMembersAddArg groupMembersAddArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.GroupsMembersAddAsync(groupMembersAddArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Adds members to a group.</para>
        /// <para>The members are added immediately. However the granting of group-owned
        /// resources may take additional time. Use the <see
        /// cref="Dropbox.Api.Team.Routes.TeamRoutes.GroupsJobStatusGetAsync" /> to determine
        /// whether this process has completed.</para>
        /// <para>Permission : Team member management</para>
        /// </summary>
        /// <param name="group">Group to which users will be added.</param>
        /// <param name="members">List of users to be added to the group.</param>
        /// <param name="returnMembers">Whether to return the list of members in the group.
        /// Note that the default value will cause all the group members  to be returned in the
        /// response. This may take a long time for large groups.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GroupMembersAddError"/>.</exception>
        public t.Task<GroupMembersChangeResult> GroupsMembersAddAsync(GroupSelector @group,
                                                                      col.IEnumerable<MemberAccess> members,
                                                                      bool returnMembers = true)
        {
            var groupMembersAddArg = new GroupMembersAddArg(@group,
                                                            members,
                                                            returnMembers);

            return this.GroupsMembersAddAsync(groupMembersAddArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the groups members add route.</para>
        /// </summary>
        /// <param name="group">Group to which users will be added.</param>
        /// <param name="members">List of users to be added to the group.</param>
        /// <param name="returnMembers">Whether to return the list of members in the group.
        /// Note that the default value will cause all the group members  to be returned in the
        /// response. This may take a long time for large groups.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginGroupsMembersAdd(GroupSelector @group,
                                                      col.IEnumerable<MemberAccess> members,
                                                      bool returnMembers = true,
                                                      sys.AsyncCallback callback = null,
                                                      object callbackState = null)
        {
            var groupMembersAddArg = new GroupMembersAddArg(@group,
                                                            members,
                                                            returnMembers);

            return this.BeginGroupsMembersAdd(groupMembersAddArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the groups members add route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GroupMembersAddError"/>.</exception>
        public GroupMembersChangeResult EndGroupsMembersAdd(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<GroupMembersChangeResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Lists members of a group.</para>
        /// <para>Permission : Team Information</para>
        /// </summary>
        /// <param name="groupsMembersListArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GroupSelectorError"/>.</exception>
        public t.Task<GroupsMembersListResult> GroupsMembersListAsync(GroupsMembersListArg groupsMembersListArg)
        {
            return this.Transport.SendRpcRequestAsync<GroupsMembersListArg, GroupsMembersListResult, GroupSelectorError>(groupsMembersListArg, "api", "/team/groups/members/list", Dropbox.Api.Team.GroupsMembersListArg.Encoder, Dropbox.Api.Team.GroupsMembersListResult.Decoder, Dropbox.Api.Team.GroupSelectorError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the groups members list route.</para>
        /// </summary>
        /// <param name="groupsMembersListArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginGroupsMembersList(GroupsMembersListArg groupsMembersListArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.GroupsMembersListAsync(groupsMembersListArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Lists members of a group.</para>
        /// <para>Permission : Team Information</para>
        /// </summary>
        /// <param name="group">The group whose members are to be listed.</param>
        /// <param name="limit">Number of results to return per call.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GroupSelectorError"/>.</exception>
        public t.Task<GroupsMembersListResult> GroupsMembersListAsync(GroupSelector @group,
                                                                      uint limit = 1000)
        {
            var groupsMembersListArg = new GroupsMembersListArg(@group,
                                                                limit);

            return this.GroupsMembersListAsync(groupsMembersListArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the groups members list route.</para>
        /// </summary>
        /// <param name="group">The group whose members are to be listed.</param>
        /// <param name="limit">Number of results to return per call.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginGroupsMembersList(GroupSelector @group,
                                                       uint limit = 1000,
                                                       sys.AsyncCallback callback = null,
                                                       object callbackState = null)
        {
            var groupsMembersListArg = new GroupsMembersListArg(@group,
                                                                limit);

            return this.BeginGroupsMembersList(groupsMembersListArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the groups members list route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GroupSelectorError"/>.</exception>
        public GroupsMembersListResult EndGroupsMembersList(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<GroupsMembersListResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Once a cursor has been retrieved from <see
        /// cref="Dropbox.Api.Team.Routes.TeamRoutes.GroupsMembersListAsync" />, use this to
        /// paginate through all members of the group.</para>
        /// <para>Permission : Team information</para>
        /// </summary>
        /// <param name="groupsMembersListContinueArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GroupsMembersListContinueError"/>.</exception>
        public t.Task<GroupsMembersListResult> GroupsMembersListContinueAsync(GroupsMembersListContinueArg groupsMembersListContinueArg)
        {
            return this.Transport.SendRpcRequestAsync<GroupsMembersListContinueArg, GroupsMembersListResult, GroupsMembersListContinueError>(groupsMembersListContinueArg, "api", "/team/groups/members/list/continue", Dropbox.Api.Team.GroupsMembersListContinueArg.Encoder, Dropbox.Api.Team.GroupsMembersListResult.Decoder, Dropbox.Api.Team.GroupsMembersListContinueError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the groups members list continue route.</para>
        /// </summary>
        /// <param name="groupsMembersListContinueArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginGroupsMembersListContinue(GroupsMembersListContinueArg groupsMembersListContinueArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.GroupsMembersListContinueAsync(groupsMembersListContinueArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Once a cursor has been retrieved from <see
        /// cref="Dropbox.Api.Team.Routes.TeamRoutes.GroupsMembersListAsync" />, use this to
        /// paginate through all members of the group.</para>
        /// <para>Permission : Team information</para>
        /// </summary>
        /// <param name="cursor">Indicates from what point to get the next set of
        /// groups.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GroupsMembersListContinueError"/>.</exception>
        public t.Task<GroupsMembersListResult> GroupsMembersListContinueAsync(string cursor)
        {
            var groupsMembersListContinueArg = new GroupsMembersListContinueArg(cursor);

            return this.GroupsMembersListContinueAsync(groupsMembersListContinueArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the groups members list continue route.</para>
        /// </summary>
        /// <param name="cursor">Indicates from what point to get the next set of
        /// groups.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginGroupsMembersListContinue(string cursor,
                                                               sys.AsyncCallback callback,
                                                               object callbackState = null)
        {
            var groupsMembersListContinueArg = new GroupsMembersListContinueArg(cursor);

            return this.BeginGroupsMembersListContinue(groupsMembersListContinueArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the groups members list continue
        /// route to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GroupsMembersListContinueError"/>.</exception>
        public GroupsMembersListResult EndGroupsMembersListContinue(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<GroupsMembersListResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Removes members from a group.</para>
        /// <para>The members are removed immediately. However the revoking of group-owned
        /// resources may take additional time. Use the <see
        /// cref="Dropbox.Api.Team.Routes.TeamRoutes.GroupsJobStatusGetAsync" /> to determine
        /// whether this process has completed.</para>
        /// <para>This method permits removing the only owner of a group, even in cases where
        /// this is not possible via the web client.</para>
        /// <para>Permission : Team member management</para>
        /// </summary>
        /// <param name="groupMembersRemoveArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GroupMembersRemoveError"/>.</exception>
        public t.Task<GroupMembersChangeResult> GroupsMembersRemoveAsync(GroupMembersRemoveArg groupMembersRemoveArg)
        {
            return this.Transport.SendRpcRequestAsync<GroupMembersRemoveArg, GroupMembersChangeResult, GroupMembersRemoveError>(groupMembersRemoveArg, "api", "/team/groups/members/remove", Dropbox.Api.Team.GroupMembersRemoveArg.Encoder, Dropbox.Api.Team.GroupMembersChangeResult.Decoder, Dropbox.Api.Team.GroupMembersRemoveError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the groups members remove route.</para>
        /// </summary>
        /// <param name="groupMembersRemoveArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginGroupsMembersRemove(GroupMembersRemoveArg groupMembersRemoveArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.GroupsMembersRemoveAsync(groupMembersRemoveArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Removes members from a group.</para>
        /// <para>The members are removed immediately. However the revoking of group-owned
        /// resources may take additional time. Use the <see
        /// cref="Dropbox.Api.Team.Routes.TeamRoutes.GroupsJobStatusGetAsync" /> to determine
        /// whether this process has completed.</para>
        /// <para>This method permits removing the only owner of a group, even in cases where
        /// this is not possible via the web client.</para>
        /// <para>Permission : Team member management</para>
        /// </summary>
        /// <param name="group">Group from which users will be removed.</param>
        /// <param name="users">List of users to be removed from the group.</param>
        /// <param name="returnMembers">Whether to return the list of members in the group.
        /// Note that the default value will cause all the group members  to be returned in the
        /// response. This may take a long time for large groups.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GroupMembersRemoveError"/>.</exception>
        public t.Task<GroupMembersChangeResult> GroupsMembersRemoveAsync(GroupSelector @group,
                                                                         col.IEnumerable<UserSelectorArg> users,
                                                                         bool returnMembers = true)
        {
            var groupMembersRemoveArg = new GroupMembersRemoveArg(@group,
                                                                  users,
                                                                  returnMembers);

            return this.GroupsMembersRemoveAsync(groupMembersRemoveArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the groups members remove route.</para>
        /// </summary>
        /// <param name="group">Group from which users will be removed.</param>
        /// <param name="users">List of users to be removed from the group.</param>
        /// <param name="returnMembers">Whether to return the list of members in the group.
        /// Note that the default value will cause all the group members  to be returned in the
        /// response. This may take a long time for large groups.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginGroupsMembersRemove(GroupSelector @group,
                                                         col.IEnumerable<UserSelectorArg> users,
                                                         bool returnMembers = true,
                                                         sys.AsyncCallback callback = null,
                                                         object callbackState = null)
        {
            var groupMembersRemoveArg = new GroupMembersRemoveArg(@group,
                                                                  users,
                                                                  returnMembers);

            return this.BeginGroupsMembersRemove(groupMembersRemoveArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the groups members remove route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GroupMembersRemoveError"/>.</exception>
        public GroupMembersChangeResult EndGroupsMembersRemove(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<GroupMembersChangeResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Sets a member's access type in a group.</para>
        /// <para>Permission : Team member management</para>
        /// </summary>
        /// <param name="groupMembersSetAccessTypeArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GroupMemberSetAccessTypeError"/>.</exception>
        public t.Task<col.List<GroupsGetInfoItem>> GroupsMembersSetAccessTypeAsync(GroupMembersSetAccessTypeArg groupMembersSetAccessTypeArg)
        {
            return this.Transport.SendRpcRequestAsync<GroupMembersSetAccessTypeArg, col.List<GroupsGetInfoItem>, GroupMemberSetAccessTypeError>(groupMembersSetAccessTypeArg, "api", "/team/groups/members/set_access_type", Dropbox.Api.Team.GroupMembersSetAccessTypeArg.Encoder, enc.Decoder.CreateListDecoder(Dropbox.Api.Team.GroupsGetInfoItem.Decoder), Dropbox.Api.Team.GroupMemberSetAccessTypeError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the groups members set access type
        /// route.</para>
        /// </summary>
        /// <param name="groupMembersSetAccessTypeArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginGroupsMembersSetAccessType(GroupMembersSetAccessTypeArg groupMembersSetAccessTypeArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.GroupsMembersSetAccessTypeAsync(groupMembersSetAccessTypeArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Sets a member's access type in a group.</para>
        /// <para>Permission : Team member management</para>
        /// </summary>
        /// <param name="group">Specify a group.</param>
        /// <param name="user">Identity of a user that is a member of <paramref name="group"
        /// />.</param>
        /// <param name="accessType">New group access type the user will have.</param>
        /// <param name="returnMembers">Whether to return the list of members in the group.
        /// Note that the default value will cause all the group members  to be returned in the
        /// response. This may take a long time for large groups.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GroupMemberSetAccessTypeError"/>.</exception>
        public t.Task<col.List<GroupsGetInfoItem>> GroupsMembersSetAccessTypeAsync(GroupSelector @group,
                                                                                   UserSelectorArg user,
                                                                                   GroupAccessType accessType,
                                                                                   bool returnMembers = true)
        {
            var groupMembersSetAccessTypeArg = new GroupMembersSetAccessTypeArg(@group,
                                                                                user,
                                                                                accessType,
                                                                                returnMembers);

            return this.GroupsMembersSetAccessTypeAsync(groupMembersSetAccessTypeArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the groups members set access type
        /// route.</para>
        /// </summary>
        /// <param name="group">Specify a group.</param>
        /// <param name="user">Identity of a user that is a member of <paramref name="group"
        /// />.</param>
        /// <param name="accessType">New group access type the user will have.</param>
        /// <param name="returnMembers">Whether to return the list of members in the group.
        /// Note that the default value will cause all the group members  to be returned in the
        /// response. This may take a long time for large groups.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginGroupsMembersSetAccessType(GroupSelector @group,
                                                                UserSelectorArg user,
                                                                GroupAccessType accessType,
                                                                bool returnMembers = true,
                                                                sys.AsyncCallback callback = null,
                                                                object callbackState = null)
        {
            var groupMembersSetAccessTypeArg = new GroupMembersSetAccessTypeArg(@group,
                                                                                user,
                                                                                accessType,
                                                                                returnMembers);

            return this.BeginGroupsMembersSetAccessType(groupMembersSetAccessTypeArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the groups members set access type
        /// route to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GroupMemberSetAccessTypeError"/>.</exception>
        public col.List<GroupsGetInfoItem> EndGroupsMembersSetAccessType(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<col.List<GroupsGetInfoItem>>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Updates a group's name and/or external ID.</para>
        /// <para>Permission : Team member management</para>
        /// </summary>
        /// <param name="groupUpdateArgs">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GroupUpdateError"/>.</exception>
        public t.Task<GroupFullInfo> GroupsUpdateAsync(GroupUpdateArgs groupUpdateArgs)
        {
            return this.Transport.SendRpcRequestAsync<GroupUpdateArgs, GroupFullInfo, GroupUpdateError>(groupUpdateArgs, "api", "/team/groups/update", Dropbox.Api.Team.GroupUpdateArgs.Encoder, Dropbox.Api.Team.GroupFullInfo.Decoder, Dropbox.Api.Team.GroupUpdateError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the groups update route.</para>
        /// </summary>
        /// <param name="groupUpdateArgs">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginGroupsUpdate(GroupUpdateArgs groupUpdateArgs, sys.AsyncCallback callback, object state = null)
        {
            var task = this.GroupsUpdateAsync(groupUpdateArgs);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Updates a group's name and/or external ID.</para>
        /// <para>Permission : Team member management</para>
        /// </summary>
        /// <param name="group">Specify a group.</param>
        /// <param name="returnMembers">Whether to return the list of members in the group.
        /// Note that the default value will cause all the group members  to be returned in the
        /// response. This may take a long time for large groups.</param>
        /// <param name="newGroupName">Optional argument. Set group name to this if
        /// provided.</param>
        /// <param name="newGroupExternalId">Optional argument. New group external ID. If the
        /// argument is None, the group's external_id won't be updated. If the argument is
        /// empty string, the group's external id will be cleared.</param>
        /// <param name="newGroupManagementType">Set new group management type, if
        /// provided.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GroupUpdateError"/>.</exception>
        public t.Task<GroupFullInfo> GroupsUpdateAsync(GroupSelector @group,
                                                       bool returnMembers = true,
                                                       string newGroupName = null,
                                                       string newGroupExternalId = null,
                                                       Dropbox.Api.TeamCommon.GroupManagementType newGroupManagementType = null)
        {
            var groupUpdateArgs = new GroupUpdateArgs(@group,
                                                      returnMembers,
                                                      newGroupName,
                                                      newGroupExternalId,
                                                      newGroupManagementType);

            return this.GroupsUpdateAsync(groupUpdateArgs);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the groups update route.</para>
        /// </summary>
        /// <param name="group">Specify a group.</param>
        /// <param name="returnMembers">Whether to return the list of members in the group.
        /// Note that the default value will cause all the group members  to be returned in the
        /// response. This may take a long time for large groups.</param>
        /// <param name="newGroupName">Optional argument. Set group name to this if
        /// provided.</param>
        /// <param name="newGroupExternalId">Optional argument. New group external ID. If the
        /// argument is None, the group's external_id won't be updated. If the argument is
        /// empty string, the group's external id will be cleared.</param>
        /// <param name="newGroupManagementType">Set new group management type, if
        /// provided.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginGroupsUpdate(GroupSelector @group,
                                                  bool returnMembers = true,
                                                  string newGroupName = null,
                                                  string newGroupExternalId = null,
                                                  Dropbox.Api.TeamCommon.GroupManagementType newGroupManagementType = null,
                                                  sys.AsyncCallback callback = null,
                                                  object callbackState = null)
        {
            var groupUpdateArgs = new GroupUpdateArgs(@group,
                                                      returnMembers,
                                                      newGroupName,
                                                      newGroupExternalId,
                                                      newGroupManagementType);

            return this.BeginGroupsUpdate(groupUpdateArgs, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the groups update route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GroupUpdateError"/>.</exception>
        public GroupFullInfo EndGroupsUpdate(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<GroupFullInfo>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>List all linked applications of the team member.</para>
        /// <para>Note, this endpoint does not list any team-linked applications.</para>
        /// </summary>
        /// <param name="listMemberAppsArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListMemberAppsError"/>.</exception>
        public t.Task<ListMemberAppsResult> LinkedAppsListMemberLinkedAppsAsync(ListMemberAppsArg listMemberAppsArg)
        {
            return this.Transport.SendRpcRequestAsync<ListMemberAppsArg, ListMemberAppsResult, ListMemberAppsError>(listMemberAppsArg, "api", "/team/linked_apps/list_member_linked_apps", Dropbox.Api.Team.ListMemberAppsArg.Encoder, Dropbox.Api.Team.ListMemberAppsResult.Decoder, Dropbox.Api.Team.ListMemberAppsError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the linked apps list member linked apps
        /// route.</para>
        /// </summary>
        /// <param name="listMemberAppsArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginLinkedAppsListMemberLinkedApps(ListMemberAppsArg listMemberAppsArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.LinkedAppsListMemberLinkedAppsAsync(listMemberAppsArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>List all linked applications of the team member.</para>
        /// <para>Note, this endpoint does not list any team-linked applications.</para>
        /// </summary>
        /// <param name="teamMemberId">The team member id</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListMemberAppsError"/>.</exception>
        public t.Task<ListMemberAppsResult> LinkedAppsListMemberLinkedAppsAsync(string teamMemberId)
        {
            var listMemberAppsArg = new ListMemberAppsArg(teamMemberId);

            return this.LinkedAppsListMemberLinkedAppsAsync(listMemberAppsArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the linked apps list member linked apps
        /// route.</para>
        /// </summary>
        /// <param name="teamMemberId">The team member id</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginLinkedAppsListMemberLinkedApps(string teamMemberId,
                                                                    sys.AsyncCallback callback,
                                                                    object callbackState = null)
        {
            var listMemberAppsArg = new ListMemberAppsArg(teamMemberId);

            return this.BeginLinkedAppsListMemberLinkedApps(listMemberAppsArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the linked apps list member linked
        /// apps route to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListMemberAppsError"/>.</exception>
        public ListMemberAppsResult EndLinkedAppsListMemberLinkedApps(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<ListMemberAppsResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>List all applications linked to the team members' accounts.</para>
        /// <para>Note, this endpoint does not list any team-linked applications.</para>
        /// </summary>
        /// <param name="listMembersAppsArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListMembersAppsError"/>.</exception>
        public t.Task<ListMembersAppsResult> LinkedAppsListMembersLinkedAppsAsync(ListMembersAppsArg listMembersAppsArg)
        {
            return this.Transport.SendRpcRequestAsync<ListMembersAppsArg, ListMembersAppsResult, ListMembersAppsError>(listMembersAppsArg, "api", "/team/linked_apps/list_members_linked_apps", Dropbox.Api.Team.ListMembersAppsArg.Encoder, Dropbox.Api.Team.ListMembersAppsResult.Decoder, Dropbox.Api.Team.ListMembersAppsError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the linked apps list members linked apps
        /// route.</para>
        /// </summary>
        /// <param name="listMembersAppsArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginLinkedAppsListMembersLinkedApps(ListMembersAppsArg listMembersAppsArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.LinkedAppsListMembersLinkedAppsAsync(listMembersAppsArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>List all applications linked to the team members' accounts.</para>
        /// <para>Note, this endpoint does not list any team-linked applications.</para>
        /// </summary>
        /// <param name="cursor">At the first call to the <see
        /// cref="Dropbox.Api.Team.Routes.TeamRoutes.LinkedAppsListMembersLinkedAppsAsync" />
        /// the cursor shouldn't be passed. Then, if the result of the call includes a cursor,
        /// the following requests should include the received cursors in order to receive the
        /// next sub list of the team applications</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListMembersAppsError"/>.</exception>
        public t.Task<ListMembersAppsResult> LinkedAppsListMembersLinkedAppsAsync(string cursor = null)
        {
            var listMembersAppsArg = new ListMembersAppsArg(cursor);

            return this.LinkedAppsListMembersLinkedAppsAsync(listMembersAppsArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the linked apps list members linked apps
        /// route.</para>
        /// </summary>
        /// <param name="cursor">At the first call to the <see
        /// cref="Dropbox.Api.Team.Routes.TeamRoutes.LinkedAppsListMembersLinkedAppsAsync" />
        /// the cursor shouldn't be passed. Then, if the result of the call includes a cursor,
        /// the following requests should include the received cursors in order to receive the
        /// next sub list of the team applications</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginLinkedAppsListMembersLinkedApps(string cursor = null,
                                                                     sys.AsyncCallback callback = null,
                                                                     object callbackState = null)
        {
            var listMembersAppsArg = new ListMembersAppsArg(cursor);

            return this.BeginLinkedAppsListMembersLinkedApps(listMembersAppsArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the linked apps list members
        /// linked apps route to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListMembersAppsError"/>.</exception>
        public ListMembersAppsResult EndLinkedAppsListMembersLinkedApps(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<ListMembersAppsResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>List all applications linked to the team members' accounts.</para>
        /// <para>Note, this endpoint doesn't list any team-linked applications.</para>
        /// </summary>
        /// <param name="listTeamAppsArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListTeamAppsError"/>.</exception>
        [sys.Obsolete("This function is deprecated, please use LinkedAppsListMembersLinkedAppsAsync instead.")]
        public t.Task<ListTeamAppsResult> LinkedAppsListTeamLinkedAppsAsync(ListTeamAppsArg listTeamAppsArg)
        {
            return this.Transport.SendRpcRequestAsync<ListTeamAppsArg, ListTeamAppsResult, ListTeamAppsError>(listTeamAppsArg, "api", "/team/linked_apps/list_team_linked_apps", Dropbox.Api.Team.ListTeamAppsArg.Encoder, Dropbox.Api.Team.ListTeamAppsResult.Decoder, Dropbox.Api.Team.ListTeamAppsError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the linked apps list team linked apps
        /// route.</para>
        /// </summary>
        /// <param name="listTeamAppsArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        [sys.Obsolete("This function is deprecated, please use BeginLinkedAppsListMembersLinkedApps instead.")]
        public sys.IAsyncResult BeginLinkedAppsListTeamLinkedApps(ListTeamAppsArg listTeamAppsArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.LinkedAppsListTeamLinkedAppsAsync(listTeamAppsArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>List all applications linked to the team members' accounts.</para>
        /// <para>Note, this endpoint doesn't list any team-linked applications.</para>
        /// </summary>
        /// <param name="cursor">At the first call to the <see
        /// cref="Dropbox.Api.Team.Routes.TeamRoutes.LinkedAppsListTeamLinkedAppsAsync" /> the
        /// cursor shouldn't be passed. Then, if the result of the call includes a cursor, the
        /// following requests should include the received cursors in order to receive the next
        /// sub list of the team applications</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListTeamAppsError"/>.</exception>
        [sys.Obsolete("This function is deprecated, please use LinkedAppsListMembersLinkedAppsAsync instead.")]
        public t.Task<ListTeamAppsResult> LinkedAppsListTeamLinkedAppsAsync(string cursor = null)
        {
            var listTeamAppsArg = new ListTeamAppsArg(cursor);

            return this.LinkedAppsListTeamLinkedAppsAsync(listTeamAppsArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the linked apps list team linked apps
        /// route.</para>
        /// </summary>
        /// <param name="cursor">At the first call to the <see
        /// cref="Dropbox.Api.Team.Routes.TeamRoutes.LinkedAppsListTeamLinkedAppsAsync" /> the
        /// cursor shouldn't be passed. Then, if the result of the call includes a cursor, the
        /// following requests should include the received cursors in order to receive the next
        /// sub list of the team applications</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        [sys.Obsolete("This function is deprecated, please use BeginLinkedAppsListMembersLinkedApps instead.")]
        public sys.IAsyncResult BeginLinkedAppsListTeamLinkedApps(string cursor = null,
                                                                  sys.AsyncCallback callback = null,
                                                                  object callbackState = null)
        {
            var listTeamAppsArg = new ListTeamAppsArg(cursor);

            return this.BeginLinkedAppsListTeamLinkedApps(listTeamAppsArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the linked apps list team linked
        /// apps route to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListTeamAppsError"/>.</exception>
        [sys.Obsolete("This function is deprecated, please use EndLinkedAppsListMembersLinkedApps instead.")]
        public ListTeamAppsResult EndLinkedAppsListTeamLinkedApps(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<ListTeamAppsResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Revoke a linked application of the team member</para>
        /// </summary>
        /// <param name="revokeLinkedApiAppArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="RevokeLinkedAppError"/>.</exception>
        public t.Task LinkedAppsRevokeLinkedAppAsync(RevokeLinkedApiAppArg revokeLinkedApiAppArg)
        {
            return this.Transport.SendRpcRequestAsync<RevokeLinkedApiAppArg, enc.Empty, RevokeLinkedAppError>(revokeLinkedApiAppArg, "api", "/team/linked_apps/revoke_linked_app", Dropbox.Api.Team.RevokeLinkedApiAppArg.Encoder, enc.EmptyDecoder.Instance, Dropbox.Api.Team.RevokeLinkedAppError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the linked apps revoke linked app
        /// route.</para>
        /// </summary>
        /// <param name="revokeLinkedApiAppArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginLinkedAppsRevokeLinkedApp(RevokeLinkedApiAppArg revokeLinkedApiAppArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.LinkedAppsRevokeLinkedAppAsync(revokeLinkedApiAppArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Revoke a linked application of the team member</para>
        /// </summary>
        /// <param name="appId">The application's unique id</param>
        /// <param name="teamMemberId">The unique id of the member owning the device</param>
        /// <param name="keepAppFolder">Whether to keep the application dedicated folder (in
        /// case the application uses  one)</param>
        /// <returns>The task that represents the asynchronous send operation.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="RevokeLinkedAppError"/>.</exception>
        public t.Task LinkedAppsRevokeLinkedAppAsync(string appId,
                                                     string teamMemberId,
                                                     bool keepAppFolder = true)
        {
            var revokeLinkedApiAppArg = new RevokeLinkedApiAppArg(appId,
                                                                  teamMemberId,
                                                                  keepAppFolder);

            return this.LinkedAppsRevokeLinkedAppAsync(revokeLinkedApiAppArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the linked apps revoke linked app
        /// route.</para>
        /// </summary>
        /// <param name="appId">The application's unique id</param>
        /// <param name="teamMemberId">The unique id of the member owning the device</param>
        /// <param name="keepAppFolder">Whether to keep the application dedicated folder (in
        /// case the application uses  one)</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginLinkedAppsRevokeLinkedApp(string appId,
                                                               string teamMemberId,
                                                               bool keepAppFolder = true,
                                                               sys.AsyncCallback callback = null,
                                                               object callbackState = null)
        {
            var revokeLinkedApiAppArg = new RevokeLinkedApiAppArg(appId,
                                                                  teamMemberId,
                                                                  keepAppFolder);

            return this.BeginLinkedAppsRevokeLinkedApp(revokeLinkedApiAppArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the linked apps revoke linked app
        /// route to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="RevokeLinkedAppError"/>.</exception>
        public void EndLinkedAppsRevokeLinkedApp(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }
        }

        /// <summary>
        /// <para>Revoke a list of linked applications of the team members</para>
        /// </summary>
        /// <param name="revokeLinkedApiAppBatchArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="RevokeLinkedAppBatchError"/>.</exception>
        public t.Task<RevokeLinkedAppBatchResult> LinkedAppsRevokeLinkedAppBatchAsync(RevokeLinkedApiAppBatchArg revokeLinkedApiAppBatchArg)
        {
            return this.Transport.SendRpcRequestAsync<RevokeLinkedApiAppBatchArg, RevokeLinkedAppBatchResult, RevokeLinkedAppBatchError>(revokeLinkedApiAppBatchArg, "api", "/team/linked_apps/revoke_linked_app_batch", Dropbox.Api.Team.RevokeLinkedApiAppBatchArg.Encoder, Dropbox.Api.Team.RevokeLinkedAppBatchResult.Decoder, Dropbox.Api.Team.RevokeLinkedAppBatchError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the linked apps revoke linked app batch
        /// route.</para>
        /// </summary>
        /// <param name="revokeLinkedApiAppBatchArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginLinkedAppsRevokeLinkedAppBatch(RevokeLinkedApiAppBatchArg revokeLinkedApiAppBatchArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.LinkedAppsRevokeLinkedAppBatchAsync(revokeLinkedApiAppBatchArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Revoke a list of linked applications of the team members</para>
        /// </summary>
        /// <param name="revokeLinkedApp">The revoke linked app</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="RevokeLinkedAppBatchError"/>.</exception>
        public t.Task<RevokeLinkedAppBatchResult> LinkedAppsRevokeLinkedAppBatchAsync(col.IEnumerable<RevokeLinkedApiAppArg> revokeLinkedApp)
        {
            var revokeLinkedApiAppBatchArg = new RevokeLinkedApiAppBatchArg(revokeLinkedApp);

            return this.LinkedAppsRevokeLinkedAppBatchAsync(revokeLinkedApiAppBatchArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the linked apps revoke linked app batch
        /// route.</para>
        /// </summary>
        /// <param name="revokeLinkedApp">The revoke linked app</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginLinkedAppsRevokeLinkedAppBatch(col.IEnumerable<RevokeLinkedApiAppArg> revokeLinkedApp,
                                                                    sys.AsyncCallback callback,
                                                                    object callbackState = null)
        {
            var revokeLinkedApiAppBatchArg = new RevokeLinkedApiAppBatchArg(revokeLinkedApp);

            return this.BeginLinkedAppsRevokeLinkedAppBatch(revokeLinkedApiAppBatchArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the linked apps revoke linked app
        /// batch route to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="RevokeLinkedAppBatchError"/>.</exception>
        public RevokeLinkedAppBatchResult EndLinkedAppsRevokeLinkedAppBatch(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<RevokeLinkedAppBatchResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Adds members to a team.</para>
        /// <para>Permission : Team member management</para>
        /// <para>A maximum of 20 members can be specified in a single call.</para>
        /// <para>If no Dropbox account exists with the email address specified, a new Dropbox
        /// account will be created with the given email address, and that account will be
        /// invited to the team.</para>
        /// <para>If a personal Dropbox account exists with the email address specified in the
        /// call, this call will create a placeholder Dropbox account for the user on the team
        /// and send an email inviting the user to migrate their existing personal account onto
        /// the team.</para>
        /// <para>Team member management apps are required to set an initial given_name and
        /// surname for a user to use in the team invitation and for 'Perform as team member'
        /// actions taken on the user before they become 'active'.</para>
        /// </summary>
        /// <param name="membersAddArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        public t.Task<MembersAddLaunch> MembersAddAsync(MembersAddArg membersAddArg)
        {
            return this.Transport.SendRpcRequestAsync<MembersAddArg, MembersAddLaunch, enc.Empty>(membersAddArg, "api", "/team/members/add", Dropbox.Api.Team.MembersAddArg.Encoder, Dropbox.Api.Team.MembersAddLaunch.Decoder, enc.EmptyDecoder.Instance);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the members add route.</para>
        /// </summary>
        /// <param name="membersAddArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginMembersAdd(MembersAddArg membersAddArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.MembersAddAsync(membersAddArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Adds members to a team.</para>
        /// <para>Permission : Team member management</para>
        /// <para>A maximum of 20 members can be specified in a single call.</para>
        /// <para>If no Dropbox account exists with the email address specified, a new Dropbox
        /// account will be created with the given email address, and that account will be
        /// invited to the team.</para>
        /// <para>If a personal Dropbox account exists with the email address specified in the
        /// call, this call will create a placeholder Dropbox account for the user on the team
        /// and send an email inviting the user to migrate their existing personal account onto
        /// the team.</para>
        /// <para>Team member management apps are required to set an initial given_name and
        /// surname for a user to use in the team invitation and for 'Perform as team member'
        /// actions taken on the user before they become 'active'.</para>
        /// </summary>
        /// <param name="newMembers">Details of new members to be added to the team.</param>
        /// <param name="forceAsync">Whether to force the add to happen asynchronously.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        public t.Task<MembersAddLaunch> MembersAddAsync(col.IEnumerable<MemberAddArg> newMembers,
                                                        bool forceAsync = false)
        {
            var membersAddArg = new MembersAddArg(newMembers,
                                                  forceAsync);

            return this.MembersAddAsync(membersAddArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the members add route.</para>
        /// </summary>
        /// <param name="newMembers">Details of new members to be added to the team.</param>
        /// <param name="forceAsync">Whether to force the add to happen asynchronously.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginMembersAdd(col.IEnumerable<MemberAddArg> newMembers,
                                                bool forceAsync = false,
                                                sys.AsyncCallback callback = null,
                                                object callbackState = null)
        {
            var membersAddArg = new MembersAddArg(newMembers,
                                                  forceAsync);

            return this.BeginMembersAdd(membersAddArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the members add route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        public MembersAddLaunch EndMembersAdd(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<MembersAddLaunch>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Once an async_job_id is returned from <see
        /// cref="Dropbox.Api.Team.Routes.TeamRoutes.MembersAddAsync" /> , use this to poll the
        /// status of the asynchronous request.</para>
        /// <para>Permission : Team member management</para>
        /// </summary>
        /// <param name="pollArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="Dropbox.Api.Async.PollError"/>.</exception>
        public t.Task<MembersAddJobStatus> MembersAddJobStatusGetAsync(Dropbox.Api.Async.PollArg pollArg)
        {
            return this.Transport.SendRpcRequestAsync<Dropbox.Api.Async.PollArg, MembersAddJobStatus, Dropbox.Api.Async.PollError>(pollArg, "api", "/team/members/add/job_status/get", Dropbox.Api.Async.PollArg.Encoder, Dropbox.Api.Team.MembersAddJobStatus.Decoder, Dropbox.Api.Async.PollError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the members add job status get route.</para>
        /// </summary>
        /// <param name="pollArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginMembersAddJobStatusGet(Dropbox.Api.Async.PollArg pollArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.MembersAddJobStatusGetAsync(pollArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Once an async_job_id is returned from <see
        /// cref="Dropbox.Api.Team.Routes.TeamRoutes.MembersAddAsync" /> , use this to poll the
        /// status of the asynchronous request.</para>
        /// <para>Permission : Team member management</para>
        /// </summary>
        /// <param name="asyncJobId">Id of the asynchronous job. This is the value of a
        /// response returned from the method that launched the job.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="Dropbox.Api.Async.PollError"/>.</exception>
        public t.Task<MembersAddJobStatus> MembersAddJobStatusGetAsync(string asyncJobId)
        {
            var pollArg = new Dropbox.Api.Async.PollArg(asyncJobId);

            return this.MembersAddJobStatusGetAsync(pollArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the members add job status get route.</para>
        /// </summary>
        /// <param name="asyncJobId">Id of the asynchronous job. This is the value of a
        /// response returned from the method that launched the job.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginMembersAddJobStatusGet(string asyncJobId,
                                                            sys.AsyncCallback callback,
                                                            object callbackState = null)
        {
            var pollArg = new Dropbox.Api.Async.PollArg(asyncJobId);

            return this.BeginMembersAddJobStatusGet(pollArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the members add job status get
        /// route to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="Dropbox.Api.Async.PollError"/>.</exception>
        public MembersAddJobStatus EndMembersAddJobStatusGet(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<MembersAddJobStatus>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Returns information about multiple team members.</para>
        /// <para>Permission : Team information</para>
        /// <para>This endpoint will return <see
        /// cref="Dropbox.Api.Team.MembersGetInfoItem.IdNotFound" />, for IDs (or emails) that
        /// cannot be matched to a valid team member.</para>
        /// </summary>
        /// <param name="membersGetInfoArgs">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="MembersGetInfoError"/>.</exception>
        public t.Task<col.List<MembersGetInfoItem>> MembersGetInfoAsync(MembersGetInfoArgs membersGetInfoArgs)
        {
            return this.Transport.SendRpcRequestAsync<MembersGetInfoArgs, col.List<MembersGetInfoItem>, MembersGetInfoError>(membersGetInfoArgs, "api", "/team/members/get_info", Dropbox.Api.Team.MembersGetInfoArgs.Encoder, enc.Decoder.CreateListDecoder(Dropbox.Api.Team.MembersGetInfoItem.Decoder), Dropbox.Api.Team.MembersGetInfoError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the members get info route.</para>
        /// </summary>
        /// <param name="membersGetInfoArgs">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginMembersGetInfo(MembersGetInfoArgs membersGetInfoArgs, sys.AsyncCallback callback, object state = null)
        {
            var task = this.MembersGetInfoAsync(membersGetInfoArgs);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Returns information about multiple team members.</para>
        /// <para>Permission : Team information</para>
        /// <para>This endpoint will return <see
        /// cref="Dropbox.Api.Team.MembersGetInfoItem.IdNotFound" />, for IDs (or emails) that
        /// cannot be matched to a valid team member.</para>
        /// </summary>
        /// <param name="members">List of team members.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="MembersGetInfoError"/>.</exception>
        public t.Task<col.List<MembersGetInfoItem>> MembersGetInfoAsync(col.IEnumerable<UserSelectorArg> members)
        {
            var membersGetInfoArgs = new MembersGetInfoArgs(members);

            return this.MembersGetInfoAsync(membersGetInfoArgs);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the members get info route.</para>
        /// </summary>
        /// <param name="members">List of team members.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginMembersGetInfo(col.IEnumerable<UserSelectorArg> members,
                                                    sys.AsyncCallback callback,
                                                    object callbackState = null)
        {
            var membersGetInfoArgs = new MembersGetInfoArgs(members);

            return this.BeginMembersGetInfo(membersGetInfoArgs, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the members get info route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="MembersGetInfoError"/>.</exception>
        public col.List<MembersGetInfoItem> EndMembersGetInfo(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<col.List<MembersGetInfoItem>>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Lists members of a team.</para>
        /// <para>Permission : Team information</para>
        /// </summary>
        /// <param name="membersListArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="MembersListError"/>.</exception>
        public t.Task<MembersListResult> MembersListAsync(MembersListArg membersListArg)
        {
            return this.Transport.SendRpcRequestAsync<MembersListArg, MembersListResult, MembersListError>(membersListArg, "api", "/team/members/list", Dropbox.Api.Team.MembersListArg.Encoder, Dropbox.Api.Team.MembersListResult.Decoder, Dropbox.Api.Team.MembersListError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the members list route.</para>
        /// </summary>
        /// <param name="membersListArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginMembersList(MembersListArg membersListArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.MembersListAsync(membersListArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Lists members of a team.</para>
        /// <para>Permission : Team information</para>
        /// </summary>
        /// <param name="limit">Number of results to return per call.</param>
        /// <param name="includeRemoved">Whether to return removed members.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="MembersListError"/>.</exception>
        public t.Task<MembersListResult> MembersListAsync(uint limit = 1000,
                                                          bool includeRemoved = false)
        {
            var membersListArg = new MembersListArg(limit,
                                                    includeRemoved);

            return this.MembersListAsync(membersListArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the members list route.</para>
        /// </summary>
        /// <param name="limit">Number of results to return per call.</param>
        /// <param name="includeRemoved">Whether to return removed members.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginMembersList(uint limit = 1000,
                                                 bool includeRemoved = false,
                                                 sys.AsyncCallback callback = null,
                                                 object callbackState = null)
        {
            var membersListArg = new MembersListArg(limit,
                                                    includeRemoved);

            return this.BeginMembersList(membersListArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the members list route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="MembersListError"/>.</exception>
        public MembersListResult EndMembersList(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<MembersListResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Once a cursor has been retrieved from <see
        /// cref="Dropbox.Api.Team.Routes.TeamRoutes.MembersListAsync" />, use this to paginate
        /// through all team members.</para>
        /// <para>Permission : Team information</para>
        /// </summary>
        /// <param name="membersListContinueArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="MembersListContinueError"/>.</exception>
        public t.Task<MembersListResult> MembersListContinueAsync(MembersListContinueArg membersListContinueArg)
        {
            return this.Transport.SendRpcRequestAsync<MembersListContinueArg, MembersListResult, MembersListContinueError>(membersListContinueArg, "api", "/team/members/list/continue", Dropbox.Api.Team.MembersListContinueArg.Encoder, Dropbox.Api.Team.MembersListResult.Decoder, Dropbox.Api.Team.MembersListContinueError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the members list continue route.</para>
        /// </summary>
        /// <param name="membersListContinueArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginMembersListContinue(MembersListContinueArg membersListContinueArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.MembersListContinueAsync(membersListContinueArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Once a cursor has been retrieved from <see
        /// cref="Dropbox.Api.Team.Routes.TeamRoutes.MembersListAsync" />, use this to paginate
        /// through all team members.</para>
        /// <para>Permission : Team information</para>
        /// </summary>
        /// <param name="cursor">Indicates from what point to get the next set of
        /// members.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="MembersListContinueError"/>.</exception>
        public t.Task<MembersListResult> MembersListContinueAsync(string cursor)
        {
            var membersListContinueArg = new MembersListContinueArg(cursor);

            return this.MembersListContinueAsync(membersListContinueArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the members list continue route.</para>
        /// </summary>
        /// <param name="cursor">Indicates from what point to get the next set of
        /// members.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginMembersListContinue(string cursor,
                                                         sys.AsyncCallback callback,
                                                         object callbackState = null)
        {
            var membersListContinueArg = new MembersListContinueArg(cursor);

            return this.BeginMembersListContinue(membersListContinueArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the members list continue route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="MembersListContinueError"/>.</exception>
        public MembersListResult EndMembersListContinue(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<MembersListResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Recover a deleted member.</para>
        /// <para>Permission : Team member management</para>
        /// <para>Exactly one of team_member_id, email, or external_id must be provided to
        /// identify the user account.</para>
        /// </summary>
        /// <param name="membersRecoverArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="MembersRecoverError"/>.</exception>
        public t.Task MembersRecoverAsync(MembersRecoverArg membersRecoverArg)
        {
            return this.Transport.SendRpcRequestAsync<MembersRecoverArg, enc.Empty, MembersRecoverError>(membersRecoverArg, "api", "/team/members/recover", Dropbox.Api.Team.MembersRecoverArg.Encoder, enc.EmptyDecoder.Instance, Dropbox.Api.Team.MembersRecoverError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the members recover route.</para>
        /// </summary>
        /// <param name="membersRecoverArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginMembersRecover(MembersRecoverArg membersRecoverArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.MembersRecoverAsync(membersRecoverArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Recover a deleted member.</para>
        /// <para>Permission : Team member management</para>
        /// <para>Exactly one of team_member_id, email, or external_id must be provided to
        /// identify the user account.</para>
        /// </summary>
        /// <param name="user">Identity of user to recover.</param>
        /// <returns>The task that represents the asynchronous send operation.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="MembersRecoverError"/>.</exception>
        public t.Task MembersRecoverAsync(UserSelectorArg user)
        {
            var membersRecoverArg = new MembersRecoverArg(user);

            return this.MembersRecoverAsync(membersRecoverArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the members recover route.</para>
        /// </summary>
        /// <param name="user">Identity of user to recover.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginMembersRecover(UserSelectorArg user,
                                                    sys.AsyncCallback callback,
                                                    object callbackState = null)
        {
            var membersRecoverArg = new MembersRecoverArg(user);

            return this.BeginMembersRecover(membersRecoverArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the members recover route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="MembersRecoverError"/>.</exception>
        public void EndMembersRecover(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }
        }

        /// <summary>
        /// <para>Removes a member from a team.</para>
        /// <para>Permission : Team member management</para>
        /// <para>Exactly one of team_member_id, email, or external_id must be provided to
        /// identify the user account.</para>
        /// <para>This is not a deactivation where the account can be re-activated again.
        /// Calling <see cref="Dropbox.Api.Team.Routes.TeamRoutes.MembersAddAsync" /> with the
        /// removed user's email address will create a new account with a new team_member_id
        /// that will not have access to any content that was shared with the initial
        /// account.</para>
        /// <para>This endpoint may initiate an asynchronous job. To obtain the final result of
        /// the job, the client should periodically poll <see
        /// cref="Dropbox.Api.Team.Routes.TeamRoutes.MembersRemoveJobStatusGetAsync" />.</para>
        /// </summary>
        /// <param name="membersRemoveArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="MembersRemoveError"/>.</exception>
        public t.Task<Dropbox.Api.Async.LaunchEmptyResult> MembersRemoveAsync(MembersRemoveArg membersRemoveArg)
        {
            return this.Transport.SendRpcRequestAsync<MembersRemoveArg, Dropbox.Api.Async.LaunchEmptyResult, MembersRemoveError>(membersRemoveArg, "api", "/team/members/remove", Dropbox.Api.Team.MembersRemoveArg.Encoder, Dropbox.Api.Async.LaunchEmptyResult.Decoder, Dropbox.Api.Team.MembersRemoveError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the members remove route.</para>
        /// </summary>
        /// <param name="membersRemoveArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginMembersRemove(MembersRemoveArg membersRemoveArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.MembersRemoveAsync(membersRemoveArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Removes a member from a team.</para>
        /// <para>Permission : Team member management</para>
        /// <para>Exactly one of team_member_id, email, or external_id must be provided to
        /// identify the user account.</para>
        /// <para>This is not a deactivation where the account can be re-activated again.
        /// Calling <see cref="Dropbox.Api.Team.Routes.TeamRoutes.MembersAddAsync" /> with the
        /// removed user's email address will create a new account with a new team_member_id
        /// that will not have access to any content that was shared with the initial
        /// account.</para>
        /// <para>This endpoint may initiate an asynchronous job. To obtain the final result of
        /// the job, the client should periodically poll <see
        /// cref="Dropbox.Api.Team.Routes.TeamRoutes.MembersRemoveJobStatusGetAsync" />.</para>
        /// </summary>
        /// <param name="user">Identity of user to remove/suspend.</param>
        /// <param name="wipeData">If provided, controls if the user's data will be deleted on
        /// their linked devices.</param>
        /// <param name="transferDestId">If provided, files from the deleted member account
        /// will be transferred to this user.</param>
        /// <param name="transferAdminId">If provided, errors during the transfer process will
        /// be sent via email to this user. If the transfer_dest_id argument was provided, then
        /// this argument must be provided as well.</param>
        /// <param name="keepAccount">Downgrade the member to a Basic account. The user will
        /// retain the email address associated with their Dropbox  account and data in their
        /// account that is not restricted to team members.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="MembersRemoveError"/>.</exception>
        public t.Task<Dropbox.Api.Async.LaunchEmptyResult> MembersRemoveAsync(UserSelectorArg user,
                                                                              bool wipeData = true,
                                                                              UserSelectorArg transferDestId = null,
                                                                              UserSelectorArg transferAdminId = null,
                                                                              bool keepAccount = false)
        {
            var membersRemoveArg = new MembersRemoveArg(user,
                                                        wipeData,
                                                        transferDestId,
                                                        transferAdminId,
                                                        keepAccount);

            return this.MembersRemoveAsync(membersRemoveArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the members remove route.</para>
        /// </summary>
        /// <param name="user">Identity of user to remove/suspend.</param>
        /// <param name="wipeData">If provided, controls if the user's data will be deleted on
        /// their linked devices.</param>
        /// <param name="transferDestId">If provided, files from the deleted member account
        /// will be transferred to this user.</param>
        /// <param name="transferAdminId">If provided, errors during the transfer process will
        /// be sent via email to this user. If the transfer_dest_id argument was provided, then
        /// this argument must be provided as well.</param>
        /// <param name="keepAccount">Downgrade the member to a Basic account. The user will
        /// retain the email address associated with their Dropbox  account and data in their
        /// account that is not restricted to team members.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginMembersRemove(UserSelectorArg user,
                                                   bool wipeData = true,
                                                   UserSelectorArg transferDestId = null,
                                                   UserSelectorArg transferAdminId = null,
                                                   bool keepAccount = false,
                                                   sys.AsyncCallback callback = null,
                                                   object callbackState = null)
        {
            var membersRemoveArg = new MembersRemoveArg(user,
                                                        wipeData,
                                                        transferDestId,
                                                        transferAdminId,
                                                        keepAccount);

            return this.BeginMembersRemove(membersRemoveArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the members remove route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="MembersRemoveError"/>.</exception>
        public Dropbox.Api.Async.LaunchEmptyResult EndMembersRemove(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<Dropbox.Api.Async.LaunchEmptyResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Once an async_job_id is returned from <see
        /// cref="Dropbox.Api.Team.Routes.TeamRoutes.MembersRemoveAsync" /> , use this to poll
        /// the status of the asynchronous request.</para>
        /// <para>Permission : Team member management</para>
        /// </summary>
        /// <param name="pollArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="Dropbox.Api.Async.PollError"/>.</exception>
        public t.Task<Dropbox.Api.Async.PollEmptyResult> MembersRemoveJobStatusGetAsync(Dropbox.Api.Async.PollArg pollArg)
        {
            return this.Transport.SendRpcRequestAsync<Dropbox.Api.Async.PollArg, Dropbox.Api.Async.PollEmptyResult, Dropbox.Api.Async.PollError>(pollArg, "api", "/team/members/remove/job_status/get", Dropbox.Api.Async.PollArg.Encoder, Dropbox.Api.Async.PollEmptyResult.Decoder, Dropbox.Api.Async.PollError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the members remove job status get
        /// route.</para>
        /// </summary>
        /// <param name="pollArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginMembersRemoveJobStatusGet(Dropbox.Api.Async.PollArg pollArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.MembersRemoveJobStatusGetAsync(pollArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Once an async_job_id is returned from <see
        /// cref="Dropbox.Api.Team.Routes.TeamRoutes.MembersRemoveAsync" /> , use this to poll
        /// the status of the asynchronous request.</para>
        /// <para>Permission : Team member management</para>
        /// </summary>
        /// <param name="asyncJobId">Id of the asynchronous job. This is the value of a
        /// response returned from the method that launched the job.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="Dropbox.Api.Async.PollError"/>.</exception>
        public t.Task<Dropbox.Api.Async.PollEmptyResult> MembersRemoveJobStatusGetAsync(string asyncJobId)
        {
            var pollArg = new Dropbox.Api.Async.PollArg(asyncJobId);

            return this.MembersRemoveJobStatusGetAsync(pollArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the members remove job status get
        /// route.</para>
        /// </summary>
        /// <param name="asyncJobId">Id of the asynchronous job. This is the value of a
        /// response returned from the method that launched the job.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginMembersRemoveJobStatusGet(string asyncJobId,
                                                               sys.AsyncCallback callback,
                                                               object callbackState = null)
        {
            var pollArg = new Dropbox.Api.Async.PollArg(asyncJobId);

            return this.BeginMembersRemoveJobStatusGet(pollArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the members remove job status get
        /// route to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="Dropbox.Api.Async.PollError"/>.</exception>
        public Dropbox.Api.Async.PollEmptyResult EndMembersRemoveJobStatusGet(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<Dropbox.Api.Async.PollEmptyResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Sends welcome email to pending team member.</para>
        /// <para>Permission : Team member management</para>
        /// <para>Exactly one of team_member_id, email, or external_id must be provided to
        /// identify the user account.</para>
        /// <para>No-op if team member is not pending.</para>
        /// </summary>
        /// <param name="userSelectorArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="MembersSendWelcomeError"/>.</exception>
        public t.Task MembersSendWelcomeEmailAsync(UserSelectorArg userSelectorArg)
        {
            return this.Transport.SendRpcRequestAsync<UserSelectorArg, enc.Empty, MembersSendWelcomeError>(userSelectorArg, "api", "/team/members/send_welcome_email", Dropbox.Api.Team.UserSelectorArg.Encoder, enc.EmptyDecoder.Instance, Dropbox.Api.Team.MembersSendWelcomeError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the members send welcome email route.</para>
        /// </summary>
        /// <param name="userSelectorArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginMembersSendWelcomeEmail(UserSelectorArg userSelectorArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.MembersSendWelcomeEmailAsync(userSelectorArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the members send welcome email
        /// route to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="MembersSendWelcomeError"/>.</exception>
        public void EndMembersSendWelcomeEmail(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }
        }

        /// <summary>
        /// <para>Updates a team member's permissions.</para>
        /// <para>Permission : Team member management</para>
        /// </summary>
        /// <param name="membersSetPermissionsArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="MembersSetPermissionsError"/>.</exception>
        public t.Task<MembersSetPermissionsResult> MembersSetAdminPermissionsAsync(MembersSetPermissionsArg membersSetPermissionsArg)
        {
            return this.Transport.SendRpcRequestAsync<MembersSetPermissionsArg, MembersSetPermissionsResult, MembersSetPermissionsError>(membersSetPermissionsArg, "api", "/team/members/set_admin_permissions", Dropbox.Api.Team.MembersSetPermissionsArg.Encoder, Dropbox.Api.Team.MembersSetPermissionsResult.Decoder, Dropbox.Api.Team.MembersSetPermissionsError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the members set admin permissions
        /// route.</para>
        /// </summary>
        /// <param name="membersSetPermissionsArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginMembersSetAdminPermissions(MembersSetPermissionsArg membersSetPermissionsArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.MembersSetAdminPermissionsAsync(membersSetPermissionsArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Updates a team member's permissions.</para>
        /// <para>Permission : Team member management</para>
        /// </summary>
        /// <param name="user">Identity of user whose role will be set.</param>
        /// <param name="newRole">The new role of the member.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="MembersSetPermissionsError"/>.</exception>
        public t.Task<MembersSetPermissionsResult> MembersSetAdminPermissionsAsync(UserSelectorArg user,
                                                                                   AdminTier newRole)
        {
            var membersSetPermissionsArg = new MembersSetPermissionsArg(user,
                                                                        newRole);

            return this.MembersSetAdminPermissionsAsync(membersSetPermissionsArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the members set admin permissions
        /// route.</para>
        /// </summary>
        /// <param name="user">Identity of user whose role will be set.</param>
        /// <param name="newRole">The new role of the member.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginMembersSetAdminPermissions(UserSelectorArg user,
                                                                AdminTier newRole,
                                                                sys.AsyncCallback callback,
                                                                object callbackState = null)
        {
            var membersSetPermissionsArg = new MembersSetPermissionsArg(user,
                                                                        newRole);

            return this.BeginMembersSetAdminPermissions(membersSetPermissionsArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the members set admin permissions
        /// route to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="MembersSetPermissionsError"/>.</exception>
        public MembersSetPermissionsResult EndMembersSetAdminPermissions(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<MembersSetPermissionsResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Updates a team member's profile.</para>
        /// <para>Permission : Team member management</para>
        /// </summary>
        /// <param name="membersSetProfileArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="MembersSetProfileError"/>.</exception>
        public t.Task<TeamMemberInfo> MembersSetProfileAsync(MembersSetProfileArg membersSetProfileArg)
        {
            return this.Transport.SendRpcRequestAsync<MembersSetProfileArg, TeamMemberInfo, MembersSetProfileError>(membersSetProfileArg, "api", "/team/members/set_profile", Dropbox.Api.Team.MembersSetProfileArg.Encoder, Dropbox.Api.Team.TeamMemberInfo.Decoder, Dropbox.Api.Team.MembersSetProfileError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the members set profile route.</para>
        /// </summary>
        /// <param name="membersSetProfileArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginMembersSetProfile(MembersSetProfileArg membersSetProfileArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.MembersSetProfileAsync(membersSetProfileArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Updates a team member's profile.</para>
        /// <para>Permission : Team member management</para>
        /// </summary>
        /// <param name="user">Identity of user whose profile will be set.</param>
        /// <param name="newEmail">New email for member.</param>
        /// <param name="newExternalId">New external ID for member.</param>
        /// <param name="newGivenName">New given name for member.</param>
        /// <param name="newSurname">New surname for member.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="MembersSetProfileError"/>.</exception>
        public t.Task<TeamMemberInfo> MembersSetProfileAsync(UserSelectorArg user,
                                                             string newEmail = null,
                                                             string newExternalId = null,
                                                             string newGivenName = null,
                                                             string newSurname = null)
        {
            var membersSetProfileArg = new MembersSetProfileArg(user,
                                                                newEmail,
                                                                newExternalId,
                                                                newGivenName,
                                                                newSurname);

            return this.MembersSetProfileAsync(membersSetProfileArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the members set profile route.</para>
        /// </summary>
        /// <param name="user">Identity of user whose profile will be set.</param>
        /// <param name="newEmail">New email for member.</param>
        /// <param name="newExternalId">New external ID for member.</param>
        /// <param name="newGivenName">New given name for member.</param>
        /// <param name="newSurname">New surname for member.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginMembersSetProfile(UserSelectorArg user,
                                                       string newEmail = null,
                                                       string newExternalId = null,
                                                       string newGivenName = null,
                                                       string newSurname = null,
                                                       sys.AsyncCallback callback = null,
                                                       object callbackState = null)
        {
            var membersSetProfileArg = new MembersSetProfileArg(user,
                                                                newEmail,
                                                                newExternalId,
                                                                newGivenName,
                                                                newSurname);

            return this.BeginMembersSetProfile(membersSetProfileArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the members set profile route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="MembersSetProfileError"/>.</exception>
        public TeamMemberInfo EndMembersSetProfile(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<TeamMemberInfo>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Suspend a member from a team.</para>
        /// <para>Permission : Team member management</para>
        /// <para>Exactly one of team_member_id, email, or external_id must be provided to
        /// identify the user account.</para>
        /// </summary>
        /// <param name="membersDeactivateArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="MembersSuspendError"/>.</exception>
        public t.Task MembersSuspendAsync(MembersDeactivateArg membersDeactivateArg)
        {
            return this.Transport.SendRpcRequestAsync<MembersDeactivateArg, enc.Empty, MembersSuspendError>(membersDeactivateArg, "api", "/team/members/suspend", Dropbox.Api.Team.MembersDeactivateArg.Encoder, enc.EmptyDecoder.Instance, Dropbox.Api.Team.MembersSuspendError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the members suspend route.</para>
        /// </summary>
        /// <param name="membersDeactivateArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginMembersSuspend(MembersDeactivateArg membersDeactivateArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.MembersSuspendAsync(membersDeactivateArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Suspend a member from a team.</para>
        /// <para>Permission : Team member management</para>
        /// <para>Exactly one of team_member_id, email, or external_id must be provided to
        /// identify the user account.</para>
        /// </summary>
        /// <param name="user">Identity of user to remove/suspend.</param>
        /// <param name="wipeData">If provided, controls if the user's data will be deleted on
        /// their linked devices.</param>
        /// <returns>The task that represents the asynchronous send operation.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="MembersSuspendError"/>.</exception>
        public t.Task MembersSuspendAsync(UserSelectorArg user,
                                          bool wipeData = true)
        {
            var membersDeactivateArg = new MembersDeactivateArg(user,
                                                                wipeData);

            return this.MembersSuspendAsync(membersDeactivateArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the members suspend route.</para>
        /// </summary>
        /// <param name="user">Identity of user to remove/suspend.</param>
        /// <param name="wipeData">If provided, controls if the user's data will be deleted on
        /// their linked devices.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginMembersSuspend(UserSelectorArg user,
                                                    bool wipeData = true,
                                                    sys.AsyncCallback callback = null,
                                                    object callbackState = null)
        {
            var membersDeactivateArg = new MembersDeactivateArg(user,
                                                                wipeData);

            return this.BeginMembersSuspend(membersDeactivateArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the members suspend route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="MembersSuspendError"/>.</exception>
        public void EndMembersSuspend(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }
        }

        /// <summary>
        /// <para>Unsuspend a member from a team.</para>
        /// <para>Permission : Team member management</para>
        /// <para>Exactly one of team_member_id, email, or external_id must be provided to
        /// identify the user account.</para>
        /// </summary>
        /// <param name="membersUnsuspendArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="MembersUnsuspendError"/>.</exception>
        public t.Task MembersUnsuspendAsync(MembersUnsuspendArg membersUnsuspendArg)
        {
            return this.Transport.SendRpcRequestAsync<MembersUnsuspendArg, enc.Empty, MembersUnsuspendError>(membersUnsuspendArg, "api", "/team/members/unsuspend", Dropbox.Api.Team.MembersUnsuspendArg.Encoder, enc.EmptyDecoder.Instance, Dropbox.Api.Team.MembersUnsuspendError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the members unsuspend route.</para>
        /// </summary>
        /// <param name="membersUnsuspendArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginMembersUnsuspend(MembersUnsuspendArg membersUnsuspendArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.MembersUnsuspendAsync(membersUnsuspendArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Unsuspend a member from a team.</para>
        /// <para>Permission : Team member management</para>
        /// <para>Exactly one of team_member_id, email, or external_id must be provided to
        /// identify the user account.</para>
        /// </summary>
        /// <param name="user">Identity of user to unsuspend.</param>
        /// <returns>The task that represents the asynchronous send operation.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="MembersUnsuspendError"/>.</exception>
        public t.Task MembersUnsuspendAsync(UserSelectorArg user)
        {
            var membersUnsuspendArg = new MembersUnsuspendArg(user);

            return this.MembersUnsuspendAsync(membersUnsuspendArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the members unsuspend route.</para>
        /// </summary>
        /// <param name="user">Identity of user to unsuspend.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginMembersUnsuspend(UserSelectorArg user,
                                                      sys.AsyncCallback callback,
                                                      object callbackState = null)
        {
            var membersUnsuspendArg = new MembersUnsuspendArg(user);

            return this.BeginMembersUnsuspend(membersUnsuspendArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the members unsuspend route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="MembersUnsuspendError"/>.</exception>
        public void EndMembersUnsuspend(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }
        }

        /// <summary>
        /// <para>Add a property template. See route files/properties/add to add properties to
        /// a file.</para>
        /// </summary>
        /// <param name="addPropertyTemplateArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="Dropbox.Api.Properties.ModifyPropertyTemplateError"/>.</exception>
        public t.Task<AddPropertyTemplateResult> PropertiesTemplateAddAsync(AddPropertyTemplateArg addPropertyTemplateArg)
        {
            return this.Transport.SendRpcRequestAsync<AddPropertyTemplateArg, AddPropertyTemplateResult, Dropbox.Api.Properties.ModifyPropertyTemplateError>(addPropertyTemplateArg, "api", "/team/properties/template/add", Dropbox.Api.Team.AddPropertyTemplateArg.Encoder, Dropbox.Api.Team.AddPropertyTemplateResult.Decoder, Dropbox.Api.Properties.ModifyPropertyTemplateError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the properties template add route.</para>
        /// </summary>
        /// <param name="addPropertyTemplateArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginPropertiesTemplateAdd(AddPropertyTemplateArg addPropertyTemplateArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.PropertiesTemplateAddAsync(addPropertyTemplateArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Add a property template. See route files/properties/add to add properties to
        /// a file.</para>
        /// </summary>
        /// <param name="name">A display name for the property template. Property template
        /// names can be up to 256 bytes.</param>
        /// <param name="description">Description for new property template. Property template
        /// descriptions can be up to 1024 bytes.</param>
        /// <param name="fields">This is a list of custom properties associated with a property
        /// template. There can be up to 64 properties in a single property template.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="Dropbox.Api.Properties.ModifyPropertyTemplateError"/>.</exception>
        public t.Task<AddPropertyTemplateResult> PropertiesTemplateAddAsync(string name,
                                                                            string description,
                                                                            col.IEnumerable<Dropbox.Api.Properties.PropertyFieldTemplate> fields)
        {
            var addPropertyTemplateArg = new AddPropertyTemplateArg(name,
                                                                    description,
                                                                    fields);

            return this.PropertiesTemplateAddAsync(addPropertyTemplateArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the properties template add route.</para>
        /// </summary>
        /// <param name="name">A display name for the property template. Property template
        /// names can be up to 256 bytes.</param>
        /// <param name="description">Description for new property template. Property template
        /// descriptions can be up to 1024 bytes.</param>
        /// <param name="fields">This is a list of custom properties associated with a property
        /// template. There can be up to 64 properties in a single property template.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginPropertiesTemplateAdd(string name,
                                                           string description,
                                                           col.IEnumerable<Dropbox.Api.Properties.PropertyFieldTemplate> fields,
                                                           sys.AsyncCallback callback,
                                                           object callbackState = null)
        {
            var addPropertyTemplateArg = new AddPropertyTemplateArg(name,
                                                                    description,
                                                                    fields);

            return this.BeginPropertiesTemplateAdd(addPropertyTemplateArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the properties template add route
        /// to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="Dropbox.Api.Properties.ModifyPropertyTemplateError"/>.</exception>
        public AddPropertyTemplateResult EndPropertiesTemplateAdd(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<AddPropertyTemplateResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Get the schema for a specified template.</para>
        /// </summary>
        /// <param name="getPropertyTemplateArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="Dropbox.Api.Properties.PropertyTemplateError"/>.</exception>
        public t.Task<Dropbox.Api.Properties.GetPropertyTemplateResult> PropertiesTemplateGetAsync(Dropbox.Api.Properties.GetPropertyTemplateArg getPropertyTemplateArg)
        {
            return this.Transport.SendRpcRequestAsync<Dropbox.Api.Properties.GetPropertyTemplateArg, Dropbox.Api.Properties.GetPropertyTemplateResult, Dropbox.Api.Properties.PropertyTemplateError>(getPropertyTemplateArg, "api", "/team/properties/template/get", Dropbox.Api.Properties.GetPropertyTemplateArg.Encoder, Dropbox.Api.Properties.GetPropertyTemplateResult.Decoder, Dropbox.Api.Properties.PropertyTemplateError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the properties template get route.</para>
        /// </summary>
        /// <param name="getPropertyTemplateArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginPropertiesTemplateGet(Dropbox.Api.Properties.GetPropertyTemplateArg getPropertyTemplateArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.PropertiesTemplateGetAsync(getPropertyTemplateArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Get the schema for a specified template.</para>
        /// </summary>
        /// <param name="templateId">An identifier for property template added by route
        /// properties/template/add.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="Dropbox.Api.Properties.PropertyTemplateError"/>.</exception>
        public t.Task<Dropbox.Api.Properties.GetPropertyTemplateResult> PropertiesTemplateGetAsync(string templateId)
        {
            var getPropertyTemplateArg = new Dropbox.Api.Properties.GetPropertyTemplateArg(templateId);

            return this.PropertiesTemplateGetAsync(getPropertyTemplateArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the properties template get route.</para>
        /// </summary>
        /// <param name="templateId">An identifier for property template added by route
        /// properties/template/add.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginPropertiesTemplateGet(string templateId,
                                                           sys.AsyncCallback callback,
                                                           object callbackState = null)
        {
            var getPropertyTemplateArg = new Dropbox.Api.Properties.GetPropertyTemplateArg(templateId);

            return this.BeginPropertiesTemplateGet(getPropertyTemplateArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the properties template get route
        /// to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="Dropbox.Api.Properties.PropertyTemplateError"/>.</exception>
        public Dropbox.Api.Properties.GetPropertyTemplateResult EndPropertiesTemplateGet(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<Dropbox.Api.Properties.GetPropertyTemplateResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Get the property template identifiers for a team. To get the schema of each
        /// template use <see
        /// cref="Dropbox.Api.Team.Routes.TeamRoutes.PropertiesTemplateGetAsync" />.</para>
        /// </summary>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="Dropbox.Api.Properties.PropertyTemplateError"/>.</exception>
        public t.Task<Dropbox.Api.Properties.ListPropertyTemplateIds> PropertiesTemplateListAsync()
        {
            return this.Transport.SendRpcRequestAsync<enc.Empty, Dropbox.Api.Properties.ListPropertyTemplateIds, Dropbox.Api.Properties.PropertyTemplateError>(enc.Empty.Instance, "api", "/team/properties/template/list", enc.EmptyEncoder.Instance, Dropbox.Api.Properties.ListPropertyTemplateIds.Decoder, Dropbox.Api.Properties.PropertyTemplateError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the properties template list route.</para>
        /// </summary>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginPropertiesTemplateList(sys.AsyncCallback callback, object state = null)
        {
            var task = this.PropertiesTemplateListAsync();

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the properties template list route
        /// to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="Dropbox.Api.Properties.PropertyTemplateError"/>.</exception>
        public Dropbox.Api.Properties.ListPropertyTemplateIds EndPropertiesTemplateList(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<Dropbox.Api.Properties.ListPropertyTemplateIds>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Update a property template. This route can update the template name, the
        /// template description and add optional properties to templates.</para>
        /// </summary>
        /// <param name="updatePropertyTemplateArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="Dropbox.Api.Properties.ModifyPropertyTemplateError"/>.</exception>
        public t.Task<UpdatePropertyTemplateResult> PropertiesTemplateUpdateAsync(UpdatePropertyTemplateArg updatePropertyTemplateArg)
        {
            return this.Transport.SendRpcRequestAsync<UpdatePropertyTemplateArg, UpdatePropertyTemplateResult, Dropbox.Api.Properties.ModifyPropertyTemplateError>(updatePropertyTemplateArg, "api", "/team/properties/template/update", Dropbox.Api.Team.UpdatePropertyTemplateArg.Encoder, Dropbox.Api.Team.UpdatePropertyTemplateResult.Decoder, Dropbox.Api.Properties.ModifyPropertyTemplateError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the properties template update route.</para>
        /// </summary>
        /// <param name="updatePropertyTemplateArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginPropertiesTemplateUpdate(UpdatePropertyTemplateArg updatePropertyTemplateArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.PropertiesTemplateUpdateAsync(updatePropertyTemplateArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Update a property template. This route can update the template name, the
        /// template description and add optional properties to templates.</para>
        /// </summary>
        /// <param name="templateId">An identifier for property template added by <see
        /// cref="Dropbox.Api.Team.Routes.TeamRoutes.PropertiesTemplateAddAsync" />.</param>
        /// <param name="name">A display name for the property template. Property template
        /// names can be up to 256 bytes.</param>
        /// <param name="description">Description for new property template. Property template
        /// descriptions can be up to 1024 bytes.</param>
        /// <param name="addFields">This is a list of custom properties to add to the property
        /// template. There can be up to 64 properties in a single property template.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="Dropbox.Api.Properties.ModifyPropertyTemplateError"/>.</exception>
        public t.Task<UpdatePropertyTemplateResult> PropertiesTemplateUpdateAsync(string templateId,
                                                                                  string name = null,
                                                                                  string description = null,
                                                                                  col.IEnumerable<Dropbox.Api.Properties.PropertyFieldTemplate> addFields = null)
        {
            var updatePropertyTemplateArg = new UpdatePropertyTemplateArg(templateId,
                                                                          name,
                                                                          description,
                                                                          addFields);

            return this.PropertiesTemplateUpdateAsync(updatePropertyTemplateArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the properties template update route.</para>
        /// </summary>
        /// <param name="templateId">An identifier for property template added by <see
        /// cref="Dropbox.Api.Team.Routes.TeamRoutes.PropertiesTemplateAddAsync" />.</param>
        /// <param name="name">A display name for the property template. Property template
        /// names can be up to 256 bytes.</param>
        /// <param name="description">Description for new property template. Property template
        /// descriptions can be up to 1024 bytes.</param>
        /// <param name="addFields">This is a list of custom properties to add to the property
        /// template. There can be up to 64 properties in a single property template.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginPropertiesTemplateUpdate(string templateId,
                                                              string name = null,
                                                              string description = null,
                                                              col.IEnumerable<Dropbox.Api.Properties.PropertyFieldTemplate> addFields = null,
                                                              sys.AsyncCallback callback = null,
                                                              object callbackState = null)
        {
            var updatePropertyTemplateArg = new UpdatePropertyTemplateArg(templateId,
                                                                          name,
                                                                          description,
                                                                          addFields);

            return this.BeginPropertiesTemplateUpdate(updatePropertyTemplateArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the properties template update
        /// route to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="Dropbox.Api.Properties.ModifyPropertyTemplateError"/>.</exception>
        public UpdatePropertyTemplateResult EndPropertiesTemplateUpdate(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<UpdatePropertyTemplateResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Retrieves reporting data about a team's user activity.</para>
        /// </summary>
        /// <param name="dateRange">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="DateRangeError"/>.</exception>
        public t.Task<GetActivityReport> ReportsGetActivityAsync(DateRange dateRange)
        {
            return this.Transport.SendRpcRequestAsync<DateRange, GetActivityReport, DateRangeError>(dateRange, "api", "/team/reports/get_activity", Dropbox.Api.Team.DateRange.Encoder, Dropbox.Api.Team.GetActivityReport.Decoder, Dropbox.Api.Team.DateRangeError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the reports get activity route.</para>
        /// </summary>
        /// <param name="dateRange">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginReportsGetActivity(DateRange dateRange, sys.AsyncCallback callback, object state = null)
        {
            var task = this.ReportsGetActivityAsync(dateRange);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Retrieves reporting data about a team's user activity.</para>
        /// </summary>
        /// <param name="startDate">Optional starting date (inclusive)</param>
        /// <param name="endDate">Optional ending date (exclusive)</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="DateRangeError"/>.</exception>
        public t.Task<GetActivityReport> ReportsGetActivityAsync(sys.DateTime? startDate = null,
                                                                 sys.DateTime? endDate = null)
        {
            var dateRange = new DateRange(startDate,
                                          endDate);

            return this.ReportsGetActivityAsync(dateRange);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the reports get activity route.</para>
        /// </summary>
        /// <param name="startDate">Optional starting date (inclusive)</param>
        /// <param name="endDate">Optional ending date (exclusive)</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginReportsGetActivity(sys.DateTime? startDate = null,
                                                        sys.DateTime? endDate = null,
                                                        sys.AsyncCallback callback = null,
                                                        object callbackState = null)
        {
            var dateRange = new DateRange(startDate,
                                          endDate);

            return this.BeginReportsGetActivity(dateRange, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the reports get activity route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="DateRangeError"/>.</exception>
        public GetActivityReport EndReportsGetActivity(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<GetActivityReport>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Retrieves reporting data about a team's linked devices.</para>
        /// </summary>
        /// <param name="dateRange">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="DateRangeError"/>.</exception>
        public t.Task<GetDevicesReport> ReportsGetDevicesAsync(DateRange dateRange)
        {
            return this.Transport.SendRpcRequestAsync<DateRange, GetDevicesReport, DateRangeError>(dateRange, "api", "/team/reports/get_devices", Dropbox.Api.Team.DateRange.Encoder, Dropbox.Api.Team.GetDevicesReport.Decoder, Dropbox.Api.Team.DateRangeError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the reports get devices route.</para>
        /// </summary>
        /// <param name="dateRange">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginReportsGetDevices(DateRange dateRange, sys.AsyncCallback callback, object state = null)
        {
            var task = this.ReportsGetDevicesAsync(dateRange);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Retrieves reporting data about a team's linked devices.</para>
        /// </summary>
        /// <param name="startDate">Optional starting date (inclusive)</param>
        /// <param name="endDate">Optional ending date (exclusive)</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="DateRangeError"/>.</exception>
        public t.Task<GetDevicesReport> ReportsGetDevicesAsync(sys.DateTime? startDate = null,
                                                               sys.DateTime? endDate = null)
        {
            var dateRange = new DateRange(startDate,
                                          endDate);

            return this.ReportsGetDevicesAsync(dateRange);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the reports get devices route.</para>
        /// </summary>
        /// <param name="startDate">Optional starting date (inclusive)</param>
        /// <param name="endDate">Optional ending date (exclusive)</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginReportsGetDevices(sys.DateTime? startDate = null,
                                                       sys.DateTime? endDate = null,
                                                       sys.AsyncCallback callback = null,
                                                       object callbackState = null)
        {
            var dateRange = new DateRange(startDate,
                                          endDate);

            return this.BeginReportsGetDevices(dateRange, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the reports get devices route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="DateRangeError"/>.</exception>
        public GetDevicesReport EndReportsGetDevices(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<GetDevicesReport>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Retrieves reporting data about a team's membership.</para>
        /// </summary>
        /// <param name="dateRange">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="DateRangeError"/>.</exception>
        public t.Task<GetMembershipReport> ReportsGetMembershipAsync(DateRange dateRange)
        {
            return this.Transport.SendRpcRequestAsync<DateRange, GetMembershipReport, DateRangeError>(dateRange, "api", "/team/reports/get_membership", Dropbox.Api.Team.DateRange.Encoder, Dropbox.Api.Team.GetMembershipReport.Decoder, Dropbox.Api.Team.DateRangeError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the reports get membership route.</para>
        /// </summary>
        /// <param name="dateRange">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginReportsGetMembership(DateRange dateRange, sys.AsyncCallback callback, object state = null)
        {
            var task = this.ReportsGetMembershipAsync(dateRange);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Retrieves reporting data about a team's membership.</para>
        /// </summary>
        /// <param name="startDate">Optional starting date (inclusive)</param>
        /// <param name="endDate">Optional ending date (exclusive)</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="DateRangeError"/>.</exception>
        public t.Task<GetMembershipReport> ReportsGetMembershipAsync(sys.DateTime? startDate = null,
                                                                     sys.DateTime? endDate = null)
        {
            var dateRange = new DateRange(startDate,
                                          endDate);

            return this.ReportsGetMembershipAsync(dateRange);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the reports get membership route.</para>
        /// </summary>
        /// <param name="startDate">Optional starting date (inclusive)</param>
        /// <param name="endDate">Optional ending date (exclusive)</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginReportsGetMembership(sys.DateTime? startDate = null,
                                                          sys.DateTime? endDate = null,
                                                          sys.AsyncCallback callback = null,
                                                          object callbackState = null)
        {
            var dateRange = new DateRange(startDate,
                                          endDate);

            return this.BeginReportsGetMembership(dateRange, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the reports get membership route
        /// to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="DateRangeError"/>.</exception>
        public GetMembershipReport EndReportsGetMembership(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<GetMembershipReport>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Retrieves reporting data about a team's storage usage.</para>
        /// </summary>
        /// <param name="dateRange">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="DateRangeError"/>.</exception>
        public t.Task<GetStorageReport> ReportsGetStorageAsync(DateRange dateRange)
        {
            return this.Transport.SendRpcRequestAsync<DateRange, GetStorageReport, DateRangeError>(dateRange, "api", "/team/reports/get_storage", Dropbox.Api.Team.DateRange.Encoder, Dropbox.Api.Team.GetStorageReport.Decoder, Dropbox.Api.Team.DateRangeError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the reports get storage route.</para>
        /// </summary>
        /// <param name="dateRange">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginReportsGetStorage(DateRange dateRange, sys.AsyncCallback callback, object state = null)
        {
            var task = this.ReportsGetStorageAsync(dateRange);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Retrieves reporting data about a team's storage usage.</para>
        /// </summary>
        /// <param name="startDate">Optional starting date (inclusive)</param>
        /// <param name="endDate">Optional ending date (exclusive)</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="DateRangeError"/>.</exception>
        public t.Task<GetStorageReport> ReportsGetStorageAsync(sys.DateTime? startDate = null,
                                                               sys.DateTime? endDate = null)
        {
            var dateRange = new DateRange(startDate,
                                          endDate);

            return this.ReportsGetStorageAsync(dateRange);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the reports get storage route.</para>
        /// </summary>
        /// <param name="startDate">Optional starting date (inclusive)</param>
        /// <param name="endDate">Optional ending date (exclusive)</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginReportsGetStorage(sys.DateTime? startDate = null,
                                                       sys.DateTime? endDate = null,
                                                       sys.AsyncCallback callback = null,
                                                       object callbackState = null)
        {
            var dateRange = new DateRange(startDate,
                                          endDate);

            return this.BeginReportsGetStorage(dateRange, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the reports get storage route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="DateRangeError"/>.</exception>
        public GetStorageReport EndReportsGetStorage(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<GetStorageReport>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }
    }
}
