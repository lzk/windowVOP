// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Team
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>Information on linked third party applications</para>
    /// </summary>
    public class ApiApp
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<ApiApp> Encoder = new ApiAppEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<ApiApp> Decoder = new ApiAppDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="ApiApp" /> class.</para>
        /// </summary>
        /// <param name="appId">The application unique id</param>
        /// <param name="appName">The application name</param>
        /// <param name="isAppFolder">Whether the linked application uses a dedicated
        /// folder</param>
        /// <param name="publisher">The application publisher name</param>
        /// <param name="publisherUrl">The publisher's URL</param>
        /// <param name="linked">The time this application was linked</param>
        public ApiApp(string appId,
                      string appName,
                      bool isAppFolder,
                      string publisher = null,
                      string publisherUrl = null,
                      sys.DateTime? linked = null)
        {
            if (appId == null)
            {
                throw new sys.ArgumentNullException("appId");
            }

            if (appName == null)
            {
                throw new sys.ArgumentNullException("appName");
            }

            this.AppId = appId;
            this.AppName = appName;
            this.IsAppFolder = isAppFolder;
            this.Publisher = publisher;
            this.PublisherUrl = publisherUrl;
            this.Linked = linked;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="ApiApp" /> class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        public ApiApp()
        {
        }

        /// <summary>
        /// <para>The application unique id</para>
        /// </summary>
        public string AppId { get; protected set; }

        /// <summary>
        /// <para>The application name</para>
        /// </summary>
        public string AppName { get; protected set; }

        /// <summary>
        /// <para>Whether the linked application uses a dedicated folder</para>
        /// </summary>
        public bool IsAppFolder { get; protected set; }

        /// <summary>
        /// <para>The application publisher name</para>
        /// </summary>
        public string Publisher { get; protected set; }

        /// <summary>
        /// <para>The publisher's URL</para>
        /// </summary>
        public string PublisherUrl { get; protected set; }

        /// <summary>
        /// <para>The time this application was linked</para>
        /// </summary>
        public sys.DateTime? Linked { get; protected set; }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="ApiApp" />.</para>
        /// </summary>
        private class ApiAppEncoder : enc.StructEncoder<ApiApp>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(ApiApp value, enc.IJsonWriter writer)
            {
                WriteProperty("app_id", value.AppId, writer, enc.StringEncoder.Instance);
                WriteProperty("app_name", value.AppName, writer, enc.StringEncoder.Instance);
                WriteProperty("is_app_folder", value.IsAppFolder, writer, enc.BooleanEncoder.Instance);
                if (value.Publisher != null)
                {
                    WriteProperty("publisher", value.Publisher, writer, enc.StringEncoder.Instance);
                }
                if (value.PublisherUrl != null)
                {
                    WriteProperty("publisher_url", value.PublisherUrl, writer, enc.StringEncoder.Instance);
                }
                if (value.Linked != null)
                {
                    WriteProperty("linked", value.Linked.Value, writer, enc.DateTimeEncoder.Instance);
                }
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="ApiApp" />.</para>
        /// </summary>
        private class ApiAppDecoder : enc.StructDecoder<ApiApp>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="ApiApp" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override ApiApp Create()
            {
                return new ApiApp();
            }

            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(ApiApp value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "app_id":
                        value.AppId = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "app_name":
                        value.AppName = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "is_app_folder":
                        value.IsAppFolder = enc.BooleanDecoder.Instance.Decode(reader);
                        break;
                    case "publisher":
                        value.Publisher = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "publisher_url":
                        value.PublisherUrl = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "linked":
                        value.Linked = enc.DateTimeDecoder.Instance.Decode(reader);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }
        }

        #endregion
    }
}
