// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Team
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The team membership type object</para>
    /// </summary>
    public class TeamMembershipType
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<TeamMembershipType> Encoder = new TeamMembershipTypeEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<TeamMembershipType> Decoder = new TeamMembershipTypeDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="TeamMembershipType" />
        /// class.</para>
        /// </summary>
        public TeamMembershipType()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Full</para>
        /// </summary>
        public bool IsFull
        {
            get
            {
                return this is Full;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Full, or <c>null</c>.</para>
        /// </summary>
        public Full AsFull
        {
            get
            {
                return this as Full;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Limited</para>
        /// </summary>
        public bool IsLimited
        {
            get
            {
                return this is Limited;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Limited, or <c>null</c>.</para>
        /// </summary>
        public Limited AsLimited
        {
            get
            {
                return this as Limited;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="TeamMembershipType" />.</para>
        /// </summary>
        private class TeamMembershipTypeEncoder : enc.StructEncoder<TeamMembershipType>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(TeamMembershipType value, enc.IJsonWriter writer)
            {
                if (value is Full)
                {
                    WriteProperty(".tag", "full", writer, enc.StringEncoder.Instance);
                    Full.Encoder.EncodeFields((Full)value, writer);
                    return;
                }
                if (value is Limited)
                {
                    WriteProperty(".tag", "limited", writer, enc.StringEncoder.Instance);
                    Limited.Encoder.EncodeFields((Limited)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="TeamMembershipType" />.</para>
        /// </summary>
        private class TeamMembershipTypeDecoder : enc.UnionDecoder<TeamMembershipType>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="TeamMembershipType" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override TeamMembershipType Create()
            {
                return new TeamMembershipType();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override TeamMembershipType Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "full":
                        return Full.Decoder.DecodeFields(reader);
                    case "limited":
                        return Limited.Decoder.DecodeFields(reader);
                    default:
                        throw new sys.InvalidOperationException();
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>User uses a license and has full access to team resources like the shared
        /// quota.</para>
        /// </summary>
        public sealed class Full : TeamMembershipType
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Full> Encoder = new FullEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Full> Decoder = new FullDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Full" /> class.</para>
            /// </summary>
            private Full()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Full</para>
            /// </summary>
            public static readonly Full Instance = new Full();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Full" />.</para>
            /// </summary>
            private class FullEncoder : enc.StructEncoder<Full>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Full value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Full" />.</para>
            /// </summary>
            private class FullDecoder : enc.StructDecoder<Full>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Full" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Full Create()
                {
                    return new Full();
                }

                /// <summary>
                /// <para>Decode fields without ensuring start and end object.</para>
                /// </summary>
                /// <param name="reader">The json reader.</param>
                /// <returns>The decoded object.</returns>
                public override Full DecodeFields(enc.IJsonReader reader)
                {
                    return Full.Instance;
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>User does not have access to the shared quota and team admins have restricted
        /// administrative control.</para>
        /// </summary>
        public sealed class Limited : TeamMembershipType
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Limited> Encoder = new LimitedEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Limited> Decoder = new LimitedDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Limited" /> class.</para>
            /// </summary>
            private Limited()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Limited</para>
            /// </summary>
            public static readonly Limited Instance = new Limited();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Limited" />.</para>
            /// </summary>
            private class LimitedEncoder : enc.StructEncoder<Limited>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Limited value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Limited" />.</para>
            /// </summary>
            private class LimitedDecoder : enc.StructDecoder<Limited>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Limited" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Limited Create()
                {
                    return new Limited();
                }

                /// <summary>
                /// <para>Decode fields without ensuring start and end object.</para>
                /// </summary>
                /// <param name="reader">The json reader.</param>
                /// <returns>The decoded object.</returns>
                public override Limited DecodeFields(enc.IJsonReader reader)
                {
                    return Limited.Instance;
                }
            }

            #endregion
        }
    }
}
