// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Team
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>Devices Report Result. Contains subsections for different time ranges of
    /// activity. Each of the items in each subsection of the storage report is an array of
    /// values, one value per day. If there is no data for a day, then the value will be
    /// None.</para>
    /// </summary>
    /// <seealso cref="Dropbox.Api.Team.BaseDfbReport" />
    public class GetDevicesReport : BaseDfbReport
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<GetDevicesReport> Encoder = new GetDevicesReportEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<GetDevicesReport> Decoder = new GetDevicesReportDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="GetDevicesReport" />
        /// class.</para>
        /// </summary>
        /// <param name="startDate">First date present in the results as 'YYYY-MM-DD' or
        /// None.</param>
        /// <param name="active1Day">Report of the number of devices active in the last
        /// day.</param>
        /// <param name="active7Day">Report of the number of devices active in the last 7
        /// days.</param>
        /// <param name="active28Day">Report of the number of devices active in the last 28
        /// days.</param>
        public GetDevicesReport(string startDate,
                                DevicesActive active1Day,
                                DevicesActive active7Day,
                                DevicesActive active28Day)
            : base(startDate)
        {
            if (active1Day == null)
            {
                throw new sys.ArgumentNullException("active1Day");
            }

            if (active7Day == null)
            {
                throw new sys.ArgumentNullException("active7Day");
            }

            if (active28Day == null)
            {
                throw new sys.ArgumentNullException("active28Day");
            }

            this.Active1Day = active1Day;
            this.Active7Day = active7Day;
            this.Active28Day = active28Day;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="GetDevicesReport" />
        /// class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        public GetDevicesReport()
        {
        }

        /// <summary>
        /// <para>Report of the number of devices active in the last day.</para>
        /// </summary>
        public DevicesActive Active1Day { get; protected set; }

        /// <summary>
        /// <para>Report of the number of devices active in the last 7 days.</para>
        /// </summary>
        public DevicesActive Active7Day { get; protected set; }

        /// <summary>
        /// <para>Report of the number of devices active in the last 28 days.</para>
        /// </summary>
        public DevicesActive Active28Day { get; protected set; }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="GetDevicesReport" />.</para>
        /// </summary>
        private class GetDevicesReportEncoder : enc.StructEncoder<GetDevicesReport>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(GetDevicesReport value, enc.IJsonWriter writer)
            {
                WriteProperty("start_date", value.StartDate, writer, enc.StringEncoder.Instance);
                WriteProperty("active_1_day", value.Active1Day, writer, Dropbox.Api.Team.DevicesActive.Encoder);
                WriteProperty("active_7_day", value.Active7Day, writer, Dropbox.Api.Team.DevicesActive.Encoder);
                WriteProperty("active_28_day", value.Active28Day, writer, Dropbox.Api.Team.DevicesActive.Encoder);
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="GetDevicesReport" />.</para>
        /// </summary>
        private class GetDevicesReportDecoder : enc.StructDecoder<GetDevicesReport>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="GetDevicesReport" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override GetDevicesReport Create()
            {
                return new GetDevicesReport();
            }

            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(GetDevicesReport value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "start_date":
                        value.StartDate = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "active_1_day":
                        value.Active1Day = Dropbox.Api.Team.DevicesActive.Decoder.Decode(reader);
                        break;
                    case "active_7_day":
                        value.Active7Day = Dropbox.Api.Team.DevicesActive.Decoder.Decode(reader);
                        break;
                    case "active_28_day":
                        value.Active28Day = Dropbox.Api.Team.DevicesActive.Decoder.Decode(reader);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }
        }

        #endregion
    }
}
