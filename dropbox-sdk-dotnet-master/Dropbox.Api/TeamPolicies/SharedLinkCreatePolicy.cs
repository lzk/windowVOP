// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.TeamPolicies
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>Policy governing the visibility of newly created shared links.</para>
    /// </summary>
    public class SharedLinkCreatePolicy
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<SharedLinkCreatePolicy> Encoder = new SharedLinkCreatePolicyEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<SharedLinkCreatePolicy> Decoder = new SharedLinkCreatePolicyDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="SharedLinkCreatePolicy" />
        /// class.</para>
        /// </summary>
        public SharedLinkCreatePolicy()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is DefaultPublic</para>
        /// </summary>
        public bool IsDefaultPublic
        {
            get
            {
                return this is DefaultPublic;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a DefaultPublic, or <c>null</c>.</para>
        /// </summary>
        public DefaultPublic AsDefaultPublic
        {
            get
            {
                return this as DefaultPublic;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is DefaultTeamOnly</para>
        /// </summary>
        public bool IsDefaultTeamOnly
        {
            get
            {
                return this is DefaultTeamOnly;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a DefaultTeamOnly, or <c>null</c>.</para>
        /// </summary>
        public DefaultTeamOnly AsDefaultTeamOnly
        {
            get
            {
                return this as DefaultTeamOnly;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is TeamOnly</para>
        /// </summary>
        public bool IsTeamOnly
        {
            get
            {
                return this is TeamOnly;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a TeamOnly, or <c>null</c>.</para>
        /// </summary>
        public TeamOnly AsTeamOnly
        {
            get
            {
                return this as TeamOnly;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="SharedLinkCreatePolicy" />.</para>
        /// </summary>
        private class SharedLinkCreatePolicyEncoder : enc.StructEncoder<SharedLinkCreatePolicy>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(SharedLinkCreatePolicy value, enc.IJsonWriter writer)
            {
                if (value is DefaultPublic)
                {
                    WriteProperty(".tag", "default_public", writer, enc.StringEncoder.Instance);
                    DefaultPublic.Encoder.EncodeFields((DefaultPublic)value, writer);
                    return;
                }
                if (value is DefaultTeamOnly)
                {
                    WriteProperty(".tag", "default_team_only", writer, enc.StringEncoder.Instance);
                    DefaultTeamOnly.Encoder.EncodeFields((DefaultTeamOnly)value, writer);
                    return;
                }
                if (value is TeamOnly)
                {
                    WriteProperty(".tag", "team_only", writer, enc.StringEncoder.Instance);
                    TeamOnly.Encoder.EncodeFields((TeamOnly)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="SharedLinkCreatePolicy" />.</para>
        /// </summary>
        private class SharedLinkCreatePolicyDecoder : enc.UnionDecoder<SharedLinkCreatePolicy>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="SharedLinkCreatePolicy"
            /// />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override SharedLinkCreatePolicy Create()
            {
                return new SharedLinkCreatePolicy();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override SharedLinkCreatePolicy Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "default_public":
                        return DefaultPublic.Decoder.DecodeFields(reader);
                    case "default_team_only":
                        return DefaultTeamOnly.Decoder.DecodeFields(reader);
                    case "team_only":
                        return TeamOnly.Decoder.DecodeFields(reader);
                    default:
                        return Other.Decoder.DecodeFields(reader);
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>By default, anyone can access newly created shared links. No login will be
        /// required to access the shared links unless overridden.</para>
        /// </summary>
        public sealed class DefaultPublic : SharedLinkCreatePolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<DefaultPublic> Encoder = new DefaultPublicEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<DefaultPublic> Decoder = new DefaultPublicDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="DefaultPublic" />
            /// class.</para>
            /// </summary>
            private DefaultPublic()
            {
            }

            /// <summary>
            /// <para>A singleton instance of DefaultPublic</para>
            /// </summary>
            public static readonly DefaultPublic Instance = new DefaultPublic();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="DefaultPublic" />.</para>
            /// </summary>
            private class DefaultPublicEncoder : enc.StructEncoder<DefaultPublic>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(DefaultPublic value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="DefaultPublic" />.</para>
            /// </summary>
            private class DefaultPublicDecoder : enc.StructDecoder<DefaultPublic>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="DefaultPublic" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override DefaultPublic Create()
                {
                    return new DefaultPublic();
                }

                /// <summary>
                /// <para>Decode fields without ensuring start and end object.</para>
                /// </summary>
                /// <param name="reader">The json reader.</param>
                /// <returns>The decoded object.</returns>
                public override DefaultPublic DecodeFields(enc.IJsonReader reader)
                {
                    return DefaultPublic.Instance;
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>By default, only members of the same team can access newly created shared
        /// links. Login will be required to access the shared links unless overridden.</para>
        /// </summary>
        public sealed class DefaultTeamOnly : SharedLinkCreatePolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<DefaultTeamOnly> Encoder = new DefaultTeamOnlyEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<DefaultTeamOnly> Decoder = new DefaultTeamOnlyDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="DefaultTeamOnly" />
            /// class.</para>
            /// </summary>
            private DefaultTeamOnly()
            {
            }

            /// <summary>
            /// <para>A singleton instance of DefaultTeamOnly</para>
            /// </summary>
            public static readonly DefaultTeamOnly Instance = new DefaultTeamOnly();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="DefaultTeamOnly" />.</para>
            /// </summary>
            private class DefaultTeamOnlyEncoder : enc.StructEncoder<DefaultTeamOnly>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(DefaultTeamOnly value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="DefaultTeamOnly" />.</para>
            /// </summary>
            private class DefaultTeamOnlyDecoder : enc.StructDecoder<DefaultTeamOnly>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="DefaultTeamOnly" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override DefaultTeamOnly Create()
                {
                    return new DefaultTeamOnly();
                }

                /// <summary>
                /// <para>Decode fields without ensuring start and end object.</para>
                /// </summary>
                /// <param name="reader">The json reader.</param>
                /// <returns>The decoded object.</returns>
                public override DefaultTeamOnly DecodeFields(enc.IJsonReader reader)
                {
                    return DefaultTeamOnly.Instance;
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>Only members of the same team can access newly created shared links. Login
        /// will be required to access the shared links.</para>
        /// </summary>
        public sealed class TeamOnly : SharedLinkCreatePolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<TeamOnly> Encoder = new TeamOnlyEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<TeamOnly> Decoder = new TeamOnlyDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="TeamOnly" /> class.</para>
            /// </summary>
            private TeamOnly()
            {
            }

            /// <summary>
            /// <para>A singleton instance of TeamOnly</para>
            /// </summary>
            public static readonly TeamOnly Instance = new TeamOnly();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="TeamOnly" />.</para>
            /// </summary>
            private class TeamOnlyEncoder : enc.StructEncoder<TeamOnly>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(TeamOnly value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="TeamOnly" />.</para>
            /// </summary>
            private class TeamOnlyDecoder : enc.StructDecoder<TeamOnly>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="TeamOnly" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override TeamOnly Create()
                {
                    return new TeamOnly();
                }

                /// <summary>
                /// <para>Decode fields without ensuring start and end object.</para>
                /// </summary>
                /// <param name="reader">The json reader.</param>
                /// <returns>The decoded object.</returns>
                public override TeamOnly DecodeFields(enc.IJsonReader reader)
                {
                    return TeamOnly.Instance;
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : SharedLinkCreatePolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return new Other();
                }

                /// <summary>
                /// <para>Decode fields without ensuring start and end object.</para>
                /// </summary>
                /// <param name="reader">The json reader.</param>
                /// <returns>The decoded object.</returns>
                public override Other DecodeFields(enc.IJsonReader reader)
                {
                    return Other.Instance;
                }
            }

            #endregion
        }
    }
}
