// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.TeamPolicies
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>Policy governing which shared folders a team member can join.</para>
    /// </summary>
    public class SharedFolderJoinPolicy
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<SharedFolderJoinPolicy> Encoder = new SharedFolderJoinPolicyEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<SharedFolderJoinPolicy> Decoder = new SharedFolderJoinPolicyDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="SharedFolderJoinPolicy" />
        /// class.</para>
        /// </summary>
        public SharedFolderJoinPolicy()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is FromTeamOnly</para>
        /// </summary>
        public bool IsFromTeamOnly
        {
            get
            {
                return this is FromTeamOnly;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a FromTeamOnly, or <c>null</c>.</para>
        /// </summary>
        public FromTeamOnly AsFromTeamOnly
        {
            get
            {
                return this as FromTeamOnly;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is FromAnyone</para>
        /// </summary>
        public bool IsFromAnyone
        {
            get
            {
                return this is FromAnyone;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a FromAnyone, or <c>null</c>.</para>
        /// </summary>
        public FromAnyone AsFromAnyone
        {
            get
            {
                return this as FromAnyone;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="SharedFolderJoinPolicy" />.</para>
        /// </summary>
        private class SharedFolderJoinPolicyEncoder : enc.StructEncoder<SharedFolderJoinPolicy>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(SharedFolderJoinPolicy value, enc.IJsonWriter writer)
            {
                if (value is FromTeamOnly)
                {
                    WriteProperty(".tag", "from_team_only", writer, enc.StringEncoder.Instance);
                    FromTeamOnly.Encoder.EncodeFields((FromTeamOnly)value, writer);
                    return;
                }
                if (value is FromAnyone)
                {
                    WriteProperty(".tag", "from_anyone", writer, enc.StringEncoder.Instance);
                    FromAnyone.Encoder.EncodeFields((FromAnyone)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="SharedFolderJoinPolicy" />.</para>
        /// </summary>
        private class SharedFolderJoinPolicyDecoder : enc.UnionDecoder<SharedFolderJoinPolicy>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="SharedFolderJoinPolicy"
            /// />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override SharedFolderJoinPolicy Create()
            {
                return new SharedFolderJoinPolicy();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override SharedFolderJoinPolicy Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "from_team_only":
                        return FromTeamOnly.Decoder.DecodeFields(reader);
                    case "from_anyone":
                        return FromAnyone.Decoder.DecodeFields(reader);
                    default:
                        return Other.Decoder.DecodeFields(reader);
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>Team members can only join folders shared by teammates.</para>
        /// </summary>
        public sealed class FromTeamOnly : SharedFolderJoinPolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<FromTeamOnly> Encoder = new FromTeamOnlyEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<FromTeamOnly> Decoder = new FromTeamOnlyDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="FromTeamOnly" />
            /// class.</para>
            /// </summary>
            private FromTeamOnly()
            {
            }

            /// <summary>
            /// <para>A singleton instance of FromTeamOnly</para>
            /// </summary>
            public static readonly FromTeamOnly Instance = new FromTeamOnly();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="FromTeamOnly" />.</para>
            /// </summary>
            private class FromTeamOnlyEncoder : enc.StructEncoder<FromTeamOnly>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(FromTeamOnly value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="FromTeamOnly" />.</para>
            /// </summary>
            private class FromTeamOnlyDecoder : enc.StructDecoder<FromTeamOnly>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="FromTeamOnly" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override FromTeamOnly Create()
                {
                    return new FromTeamOnly();
                }

                /// <summary>
                /// <para>Decode fields without ensuring start and end object.</para>
                /// </summary>
                /// <param name="reader">The json reader.</param>
                /// <returns>The decoded object.</returns>
                public override FromTeamOnly DecodeFields(enc.IJsonReader reader)
                {
                    return FromTeamOnly.Instance;
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>Team members can join any shared folder, including those shared by users
        /// outside the team.</para>
        /// </summary>
        public sealed class FromAnyone : SharedFolderJoinPolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<FromAnyone> Encoder = new FromAnyoneEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<FromAnyone> Decoder = new FromAnyoneDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="FromAnyone" /> class.</para>
            /// </summary>
            private FromAnyone()
            {
            }

            /// <summary>
            /// <para>A singleton instance of FromAnyone</para>
            /// </summary>
            public static readonly FromAnyone Instance = new FromAnyone();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="FromAnyone" />.</para>
            /// </summary>
            private class FromAnyoneEncoder : enc.StructEncoder<FromAnyone>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(FromAnyone value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="FromAnyone" />.</para>
            /// </summary>
            private class FromAnyoneDecoder : enc.StructDecoder<FromAnyone>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="FromAnyone" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override FromAnyone Create()
                {
                    return new FromAnyone();
                }

                /// <summary>
                /// <para>Decode fields without ensuring start and end object.</para>
                /// </summary>
                /// <param name="reader">The json reader.</param>
                /// <returns>The decoded object.</returns>
                public override FromAnyone DecodeFields(enc.IJsonReader reader)
                {
                    return FromAnyone.Instance;
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : SharedFolderJoinPolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return new Other();
                }

                /// <summary>
                /// <para>Decode fields without ensuring start and end object.</para>
                /// </summary>
                /// <param name="reader">The json reader.</param>
                /// <returns>The decoded object.</returns>
                public override Other DecodeFields(enc.IJsonReader reader)
                {
                    return Other.Instance;
                }
            }

            #endregion
        }
    }
}
