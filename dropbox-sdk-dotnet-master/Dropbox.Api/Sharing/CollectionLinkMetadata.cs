// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Sharing
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>Metadata for a collection-based shared link.</para>
    /// </summary>
    /// <seealso cref="Dropbox.Api.Sharing.LinkMetadata" />
    public class CollectionLinkMetadata : LinkMetadata
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<CollectionLinkMetadata> Encoder = new CollectionLinkMetadataEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<CollectionLinkMetadata> Decoder = new CollectionLinkMetadataDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="CollectionLinkMetadata" />
        /// class.</para>
        /// </summary>
        /// <param name="url">URL of the shared link.</param>
        /// <param name="visibility">Who can access the link.</param>
        /// <param name="expires">Expiration time, if set. By default the link won't
        /// expire.</param>
        public CollectionLinkMetadata(string url,
                                      Visibility visibility,
                                      sys.DateTime? expires = null)
            : base(url, visibility, expires)
        {
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="CollectionLinkMetadata" />
        /// class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        public CollectionLinkMetadata()
        {
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="CollectionLinkMetadata" />.</para>
        /// </summary>
        private class CollectionLinkMetadataEncoder : enc.StructEncoder<CollectionLinkMetadata>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(CollectionLinkMetadata value, enc.IJsonWriter writer)
            {
                WriteProperty("url", value.Url, writer, enc.StringEncoder.Instance);
                WriteProperty("visibility", value.Visibility, writer, Dropbox.Api.Sharing.Visibility.Encoder);
                if (value.Expires != null)
                {
                    WriteProperty("expires", value.Expires.Value, writer, enc.DateTimeEncoder.Instance);
                }
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="CollectionLinkMetadata" />.</para>
        /// </summary>
        private class CollectionLinkMetadataDecoder : enc.StructDecoder<CollectionLinkMetadata>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="CollectionLinkMetadata"
            /// />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override CollectionLinkMetadata Create()
            {
                return new CollectionLinkMetadata();
            }

            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(CollectionLinkMetadata value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "url":
                        value.Url = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "visibility":
                        value.Visibility = Dropbox.Api.Sharing.Visibility.Decoder.Decode(reader);
                        break;
                    case "expires":
                        value.Expires = enc.DateTimeDecoder.Instance.Decode(reader);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }
        }

        #endregion
    }
}
