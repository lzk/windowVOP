// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Sharing
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>Arguments for <see
    /// cref="Dropbox.Api.Sharing.Routes.SharingRoutes.ListFileMembersBatchAsync" />.</para>
    /// </summary>
    public class ListFileMembersBatchArg
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<ListFileMembersBatchArg> Encoder = new ListFileMembersBatchArgEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<ListFileMembersBatchArg> Decoder = new ListFileMembersBatchArgDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="ListFileMembersBatchArg" />
        /// class.</para>
        /// </summary>
        /// <param name="files">Files for which to return members.</param>
        /// <param name="limit">Number of members to return max per query. Defaults to 10 if no
        /// limit is specified.</param>
        public ListFileMembersBatchArg(col.IEnumerable<string> files,
                                       uint limit = 10)
        {
            var filesList = enc.Util.ToList(files);

            if (files == null)
            {
                throw new sys.ArgumentNullException("files");
            }
            if (filesList.Count > 100)
            {
                throw new sys.ArgumentOutOfRangeException("files", "List should at at most 100 items");
            }

            if (limit > 20U)
            {
                throw new sys.ArgumentOutOfRangeException("limit", "Value should be less of equal than 20");
            }

            this.Files = filesList;
            this.Limit = limit;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="ListFileMembersBatchArg" />
        /// class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        public ListFileMembersBatchArg()
        {
            this.Limit = 10;
        }

        /// <summary>
        /// <para>Files for which to return members.</para>
        /// </summary>
        public col.IList<string> Files { get; protected set; }

        /// <summary>
        /// <para>Number of members to return max per query. Defaults to 10 if no limit is
        /// specified.</para>
        /// </summary>
        public uint Limit { get; protected set; }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="ListFileMembersBatchArg" />.</para>
        /// </summary>
        private class ListFileMembersBatchArgEncoder : enc.StructEncoder<ListFileMembersBatchArg>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(ListFileMembersBatchArg value, enc.IJsonWriter writer)
            {
                WriteListProperty("files", value.Files, writer, enc.StringEncoder.Instance);
                WriteProperty("limit", value.Limit, writer, enc.UInt32Encoder.Instance);
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="ListFileMembersBatchArg" />.</para>
        /// </summary>
        private class ListFileMembersBatchArgDecoder : enc.StructDecoder<ListFileMembersBatchArg>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="ListFileMembersBatchArg"
            /// />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override ListFileMembersBatchArg Create()
            {
                return new ListFileMembersBatchArg();
            }

            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(ListFileMembersBatchArg value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "files":
                        value.Files = ReadList<string>(reader, enc.StringDecoder.Instance);
                        break;
                    case "limit":
                        value.Limit = enc.UInt32Decoder.Instance.Decode(reader);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }
        }

        #endregion
    }
}
