// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Sharing
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>User could not access this file.</para>
    /// </summary>
    public class SharingFileAccessError
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<SharingFileAccessError> Encoder = new SharingFileAccessErrorEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<SharingFileAccessError> Decoder = new SharingFileAccessErrorDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="SharingFileAccessError" />
        /// class.</para>
        /// </summary>
        public SharingFileAccessError()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is NoPermission</para>
        /// </summary>
        public bool IsNoPermission
        {
            get
            {
                return this is NoPermission;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a NoPermission, or <c>null</c>.</para>
        /// </summary>
        public NoPermission AsNoPermission
        {
            get
            {
                return this as NoPermission;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is InvalidFile</para>
        /// </summary>
        public bool IsInvalidFile
        {
            get
            {
                return this is InvalidFile;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a InvalidFile, or <c>null</c>.</para>
        /// </summary>
        public InvalidFile AsInvalidFile
        {
            get
            {
                return this as InvalidFile;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is IsFolder</para>
        /// </summary>
        public bool IsIsFolder
        {
            get
            {
                return this is IsFolder;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a IsFolder, or <c>null</c>.</para>
        /// </summary>
        public IsFolder AsIsFolder
        {
            get
            {
                return this as IsFolder;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is InsidePublicFolder</para>
        /// </summary>
        public bool IsInsidePublicFolder
        {
            get
            {
                return this is InsidePublicFolder;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a InsidePublicFolder, or <c>null</c>.</para>
        /// </summary>
        public InsidePublicFolder AsInsidePublicFolder
        {
            get
            {
                return this as InsidePublicFolder;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is InsideOsxPackage</para>
        /// </summary>
        public bool IsInsideOsxPackage
        {
            get
            {
                return this is InsideOsxPackage;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a InsideOsxPackage, or <c>null</c>.</para>
        /// </summary>
        public InsideOsxPackage AsInsideOsxPackage
        {
            get
            {
                return this as InsideOsxPackage;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="SharingFileAccessError" />.</para>
        /// </summary>
        private class SharingFileAccessErrorEncoder : enc.StructEncoder<SharingFileAccessError>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(SharingFileAccessError value, enc.IJsonWriter writer)
            {
                if (value is NoPermission)
                {
                    WriteProperty(".tag", "no_permission", writer, enc.StringEncoder.Instance);
                    NoPermission.Encoder.EncodeFields((NoPermission)value, writer);
                    return;
                }
                if (value is InvalidFile)
                {
                    WriteProperty(".tag", "invalid_file", writer, enc.StringEncoder.Instance);
                    InvalidFile.Encoder.EncodeFields((InvalidFile)value, writer);
                    return;
                }
                if (value is IsFolder)
                {
                    WriteProperty(".tag", "is_folder", writer, enc.StringEncoder.Instance);
                    IsFolder.Encoder.EncodeFields((IsFolder)value, writer);
                    return;
                }
                if (value is InsidePublicFolder)
                {
                    WriteProperty(".tag", "inside_public_folder", writer, enc.StringEncoder.Instance);
                    InsidePublicFolder.Encoder.EncodeFields((InsidePublicFolder)value, writer);
                    return;
                }
                if (value is InsideOsxPackage)
                {
                    WriteProperty(".tag", "inside_osx_package", writer, enc.StringEncoder.Instance);
                    InsideOsxPackage.Encoder.EncodeFields((InsideOsxPackage)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="SharingFileAccessError" />.</para>
        /// </summary>
        private class SharingFileAccessErrorDecoder : enc.UnionDecoder<SharingFileAccessError>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="SharingFileAccessError"
            /// />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override SharingFileAccessError Create()
            {
                return new SharingFileAccessError();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override SharingFileAccessError Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "no_permission":
                        return NoPermission.Decoder.DecodeFields(reader);
                    case "invalid_file":
                        return InvalidFile.Decoder.DecodeFields(reader);
                    case "is_folder":
                        return IsFolder.Decoder.DecodeFields(reader);
                    case "inside_public_folder":
                        return InsidePublicFolder.Decoder.DecodeFields(reader);
                    case "inside_osx_package":
                        return InsideOsxPackage.Decoder.DecodeFields(reader);
                    default:
                        return Other.Decoder.DecodeFields(reader);
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>Current user does not have sufficient privileges to perform the desired
        /// action.</para>
        /// </summary>
        public sealed class NoPermission : SharingFileAccessError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<NoPermission> Encoder = new NoPermissionEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<NoPermission> Decoder = new NoPermissionDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="NoPermission" />
            /// class.</para>
            /// </summary>
            private NoPermission()
            {
            }

            /// <summary>
            /// <para>A singleton instance of NoPermission</para>
            /// </summary>
            public static readonly NoPermission Instance = new NoPermission();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="NoPermission" />.</para>
            /// </summary>
            private class NoPermissionEncoder : enc.StructEncoder<NoPermission>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(NoPermission value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="NoPermission" />.</para>
            /// </summary>
            private class NoPermissionDecoder : enc.StructDecoder<NoPermission>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="NoPermission" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override NoPermission Create()
                {
                    return new NoPermission();
                }

                /// <summary>
                /// <para>Decode fields without ensuring start and end object.</para>
                /// </summary>
                /// <param name="reader">The json reader.</param>
                /// <returns>The decoded object.</returns>
                public override NoPermission DecodeFields(enc.IJsonReader reader)
                {
                    return NoPermission.Instance;
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>File specified was not found.</para>
        /// </summary>
        public sealed class InvalidFile : SharingFileAccessError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<InvalidFile> Encoder = new InvalidFileEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<InvalidFile> Decoder = new InvalidFileDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="InvalidFile" />
            /// class.</para>
            /// </summary>
            private InvalidFile()
            {
            }

            /// <summary>
            /// <para>A singleton instance of InvalidFile</para>
            /// </summary>
            public static readonly InvalidFile Instance = new InvalidFile();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="InvalidFile" />.</para>
            /// </summary>
            private class InvalidFileEncoder : enc.StructEncoder<InvalidFile>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(InvalidFile value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="InvalidFile" />.</para>
            /// </summary>
            private class InvalidFileDecoder : enc.StructDecoder<InvalidFile>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="InvalidFile" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override InvalidFile Create()
                {
                    return new InvalidFile();
                }

                /// <summary>
                /// <para>Decode fields without ensuring start and end object.</para>
                /// </summary>
                /// <param name="reader">The json reader.</param>
                /// <returns>The decoded object.</returns>
                public override InvalidFile DecodeFields(enc.IJsonReader reader)
                {
                    return InvalidFile.Instance;
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>A folder can't be shared this way. Use folder sharing or a shared link
        /// instead.</para>
        /// </summary>
        public sealed class IsFolder : SharingFileAccessError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<IsFolder> Encoder = new IsFolderEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<IsFolder> Decoder = new IsFolderDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="IsFolder" /> class.</para>
            /// </summary>
            private IsFolder()
            {
            }

            /// <summary>
            /// <para>A singleton instance of IsFolder</para>
            /// </summary>
            public static readonly IsFolder Instance = new IsFolder();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="IsFolder" />.</para>
            /// </summary>
            private class IsFolderEncoder : enc.StructEncoder<IsFolder>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(IsFolder value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="IsFolder" />.</para>
            /// </summary>
            private class IsFolderDecoder : enc.StructDecoder<IsFolder>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="IsFolder" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override IsFolder Create()
                {
                    return new IsFolder();
                }

                /// <summary>
                /// <para>Decode fields without ensuring start and end object.</para>
                /// </summary>
                /// <param name="reader">The json reader.</param>
                /// <returns>The decoded object.</returns>
                public override IsFolder DecodeFields(enc.IJsonReader reader)
                {
                    return IsFolder.Instance;
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>A file inside a public folder can't be shared this way. Use a public link
        /// instead.</para>
        /// </summary>
        public sealed class InsidePublicFolder : SharingFileAccessError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<InsidePublicFolder> Encoder = new InsidePublicFolderEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<InsidePublicFolder> Decoder = new InsidePublicFolderDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="InsidePublicFolder" />
            /// class.</para>
            /// </summary>
            private InsidePublicFolder()
            {
            }

            /// <summary>
            /// <para>A singleton instance of InsidePublicFolder</para>
            /// </summary>
            public static readonly InsidePublicFolder Instance = new InsidePublicFolder();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="InsidePublicFolder" />.</para>
            /// </summary>
            private class InsidePublicFolderEncoder : enc.StructEncoder<InsidePublicFolder>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(InsidePublicFolder value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="InsidePublicFolder" />.</para>
            /// </summary>
            private class InsidePublicFolderDecoder : enc.StructDecoder<InsidePublicFolder>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="InsidePublicFolder"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override InsidePublicFolder Create()
                {
                    return new InsidePublicFolder();
                }

                /// <summary>
                /// <para>Decode fields without ensuring start and end object.</para>
                /// </summary>
                /// <param name="reader">The json reader.</param>
                /// <returns>The decoded object.</returns>
                public override InsidePublicFolder DecodeFields(enc.IJsonReader reader)
                {
                    return InsidePublicFolder.Instance;
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>A Mac OS X package can't be shared this way. Use a shared link
        /// instead.</para>
        /// </summary>
        public sealed class InsideOsxPackage : SharingFileAccessError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<InsideOsxPackage> Encoder = new InsideOsxPackageEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<InsideOsxPackage> Decoder = new InsideOsxPackageDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="InsideOsxPackage" />
            /// class.</para>
            /// </summary>
            private InsideOsxPackage()
            {
            }

            /// <summary>
            /// <para>A singleton instance of InsideOsxPackage</para>
            /// </summary>
            public static readonly InsideOsxPackage Instance = new InsideOsxPackage();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="InsideOsxPackage" />.</para>
            /// </summary>
            private class InsideOsxPackageEncoder : enc.StructEncoder<InsideOsxPackage>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(InsideOsxPackage value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="InsideOsxPackage" />.</para>
            /// </summary>
            private class InsideOsxPackageDecoder : enc.StructDecoder<InsideOsxPackage>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="InsideOsxPackage" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override InsideOsxPackage Create()
                {
                    return new InsideOsxPackage();
                }

                /// <summary>
                /// <para>Decode fields without ensuring start and end object.</para>
                /// </summary>
                /// <param name="reader">The json reader.</param>
                /// <returns>The decoded object.</returns>
                public override InsideOsxPackage DecodeFields(enc.IJsonReader reader)
                {
                    return InsideOsxPackage.Instance;
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : SharingFileAccessError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return new Other();
                }

                /// <summary>
                /// <para>Decode fields without ensuring start and end object.</para>
                /// </summary>
                /// <param name="reader">The json reader.</param>
                /// <returns>The decoded object.</returns>
                public override Other DecodeFields(enc.IJsonReader reader)
                {
                    return Other.Instance;
                }
            }

            #endregion
        }
    }
}
