// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Sharing
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>Contains information about a parent folder that a member has access to.</para>
    /// </summary>
    public class ParentFolderAccessInfo
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<ParentFolderAccessInfo> Encoder = new ParentFolderAccessInfoEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<ParentFolderAccessInfo> Decoder = new ParentFolderAccessInfoDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="ParentFolderAccessInfo" />
        /// class.</para>
        /// </summary>
        /// <param name="folderName">Display name for the folder.</param>
        /// <param name="sharedFolderId">The identifier of the parent shared folder.</param>
        /// <param name="permissions">The user's permissions for the parent shared
        /// folder.</param>
        public ParentFolderAccessInfo(string folderName,
                                      string sharedFolderId,
                                      col.IEnumerable<MemberPermission> permissions)
        {
            if (folderName == null)
            {
                throw new sys.ArgumentNullException("folderName");
            }

            if (sharedFolderId == null)
            {
                throw new sys.ArgumentNullException("sharedFolderId");
            }
            if (!re.Regex.IsMatch(sharedFolderId, @"\A(?:[-_0-9a-zA-Z:]+)\z"))
            {
                throw new sys.ArgumentOutOfRangeException("sharedFolderId", @"Value should match pattern '\A(?:[-_0-9a-zA-Z:]+)\z'");
            }

            var permissionsList = enc.Util.ToList(permissions);

            if (permissions == null)
            {
                throw new sys.ArgumentNullException("permissions");
            }

            this.FolderName = folderName;
            this.SharedFolderId = sharedFolderId;
            this.Permissions = permissionsList;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="ParentFolderAccessInfo" />
        /// class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        public ParentFolderAccessInfo()
        {
        }

        /// <summary>
        /// <para>Display name for the folder.</para>
        /// </summary>
        public string FolderName { get; protected set; }

        /// <summary>
        /// <para>The identifier of the parent shared folder.</para>
        /// </summary>
        public string SharedFolderId { get; protected set; }

        /// <summary>
        /// <para>The user's permissions for the parent shared folder.</para>
        /// </summary>
        public col.IList<MemberPermission> Permissions { get; protected set; }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="ParentFolderAccessInfo" />.</para>
        /// </summary>
        private class ParentFolderAccessInfoEncoder : enc.StructEncoder<ParentFolderAccessInfo>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(ParentFolderAccessInfo value, enc.IJsonWriter writer)
            {
                WriteProperty("folder_name", value.FolderName, writer, enc.StringEncoder.Instance);
                WriteProperty("shared_folder_id", value.SharedFolderId, writer, enc.StringEncoder.Instance);
                WriteListProperty("permissions", value.Permissions, writer, Dropbox.Api.Sharing.MemberPermission.Encoder);
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="ParentFolderAccessInfo" />.</para>
        /// </summary>
        private class ParentFolderAccessInfoDecoder : enc.StructDecoder<ParentFolderAccessInfo>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="ParentFolderAccessInfo"
            /// />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override ParentFolderAccessInfo Create()
            {
                return new ParentFolderAccessInfo();
            }

            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(ParentFolderAccessInfo value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "folder_name":
                        value.FolderName = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "shared_folder_id":
                        value.SharedFolderId = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "permissions":
                        value.Permissions = ReadList<MemberPermission>(reader, Dropbox.Api.Sharing.MemberPermission.Decoder);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }
        }

        #endregion
    }
}
