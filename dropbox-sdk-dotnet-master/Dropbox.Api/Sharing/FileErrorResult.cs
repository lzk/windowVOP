// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Sharing
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The file error result object</para>
    /// </summary>
    public class FileErrorResult
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<FileErrorResult> Encoder = new FileErrorResultEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<FileErrorResult> Decoder = new FileErrorResultDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="FileErrorResult" />
        /// class.</para>
        /// </summary>
        public FileErrorResult()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is FileNotFoundError</para>
        /// </summary>
        public bool IsFileNotFoundError
        {
            get
            {
                return this is FileNotFoundError;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a FileNotFoundError, or <c>null</c>.</para>
        /// </summary>
        public FileNotFoundError AsFileNotFoundError
        {
            get
            {
                return this as FileNotFoundError;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is
        /// InvalidFileActionError</para>
        /// </summary>
        public bool IsInvalidFileActionError
        {
            get
            {
                return this is InvalidFileActionError;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a InvalidFileActionError, or <c>null</c>.</para>
        /// </summary>
        public InvalidFileActionError AsInvalidFileActionError
        {
            get
            {
                return this as InvalidFileActionError;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is PermissionDeniedError</para>
        /// </summary>
        public bool IsPermissionDeniedError
        {
            get
            {
                return this is PermissionDeniedError;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a PermissionDeniedError, or <c>null</c>.</para>
        /// </summary>
        public PermissionDeniedError AsPermissionDeniedError
        {
            get
            {
                return this as PermissionDeniedError;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="FileErrorResult" />.</para>
        /// </summary>
        private class FileErrorResultEncoder : enc.StructEncoder<FileErrorResult>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(FileErrorResult value, enc.IJsonWriter writer)
            {
                if (value is FileNotFoundError)
                {
                    WriteProperty(".tag", "file_not_found_error", writer, enc.StringEncoder.Instance);
                    FileNotFoundError.Encoder.EncodeFields((FileNotFoundError)value, writer);
                    return;
                }
                if (value is InvalidFileActionError)
                {
                    WriteProperty(".tag", "invalid_file_action_error", writer, enc.StringEncoder.Instance);
                    InvalidFileActionError.Encoder.EncodeFields((InvalidFileActionError)value, writer);
                    return;
                }
                if (value is PermissionDeniedError)
                {
                    WriteProperty(".tag", "permission_denied_error", writer, enc.StringEncoder.Instance);
                    PermissionDeniedError.Encoder.EncodeFields((PermissionDeniedError)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="FileErrorResult" />.</para>
        /// </summary>
        private class FileErrorResultDecoder : enc.UnionDecoder<FileErrorResult>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="FileErrorResult" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override FileErrorResult Create()
            {
                return new FileErrorResult();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override FileErrorResult Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "file_not_found_error":
                        return FileNotFoundError.Decoder.DecodeFields(reader);
                    case "invalid_file_action_error":
                        return InvalidFileActionError.Decoder.DecodeFields(reader);
                    case "permission_denied_error":
                        return PermissionDeniedError.Decoder.DecodeFields(reader);
                    default:
                        return Other.Decoder.DecodeFields(reader);
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>File specified by id was not found.</para>
        /// </summary>
        public sealed class FileNotFoundError : FileErrorResult
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<FileNotFoundError> Encoder = new FileNotFoundErrorEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<FileNotFoundError> Decoder = new FileNotFoundErrorDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="FileNotFoundError" />
            /// class.</para>
            /// </summary>
            /// <param name="value">The value</param>
            public FileNotFoundError(string value)
            {
                this.Value = value;
            }
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="FileNotFoundError" />
            /// class.</para>
            /// </summary>
            private FileNotFoundError()
            {
            }

            /// <summary>
            /// <para>Gets the value of this instance.</para>
            /// </summary>
            public string Value { get; private set; }

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="FileNotFoundError" />.</para>
            /// </summary>
            private class FileNotFoundErrorEncoder : enc.StructEncoder<FileNotFoundError>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(FileNotFoundError value, enc.IJsonWriter writer)
                {
                    WriteProperty("file_not_found_error", value.Value, writer, enc.StringEncoder.Instance);
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="FileNotFoundError" />.</para>
            /// </summary>
            private class FileNotFoundErrorDecoder : enc.StructDecoder<FileNotFoundError>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="FileNotFoundError"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override FileNotFoundError Create()
                {
                    return new FileNotFoundError();
                }

                /// <summary>
                /// <para>Set given field.</para>
                /// </summary>
                /// <param name="value">The field value.</param>
                /// <param name="fieldName">The field name.</param>
                /// <param name="reader">The json reader.</param>
                protected override void SetField(FileNotFoundError value, string fieldName, enc.IJsonReader reader)
                {
                    switch (fieldName)
                    {
                        case "file_not_found_error":
                            value.Value = enc.StringDecoder.Instance.Decode(reader);
                            break;
                        default:
                            reader.Skip();
                            break;
                    }
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>User does not have permission to take the specified action on the
        /// file.</para>
        /// </summary>
        public sealed class InvalidFileActionError : FileErrorResult
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<InvalidFileActionError> Encoder = new InvalidFileActionErrorEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<InvalidFileActionError> Decoder = new InvalidFileActionErrorDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="InvalidFileActionError" />
            /// class.</para>
            /// </summary>
            /// <param name="value">The value</param>
            public InvalidFileActionError(string value)
            {
                this.Value = value;
            }
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="InvalidFileActionError" />
            /// class.</para>
            /// </summary>
            private InvalidFileActionError()
            {
            }

            /// <summary>
            /// <para>Gets the value of this instance.</para>
            /// </summary>
            public string Value { get; private set; }

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="InvalidFileActionError" />.</para>
            /// </summary>
            private class InvalidFileActionErrorEncoder : enc.StructEncoder<InvalidFileActionError>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(InvalidFileActionError value, enc.IJsonWriter writer)
                {
                    WriteProperty("invalid_file_action_error", value.Value, writer, enc.StringEncoder.Instance);
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="InvalidFileActionError" />.</para>
            /// </summary>
            private class InvalidFileActionErrorDecoder : enc.StructDecoder<InvalidFileActionError>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="InvalidFileActionError"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override InvalidFileActionError Create()
                {
                    return new InvalidFileActionError();
                }

                /// <summary>
                /// <para>Set given field.</para>
                /// </summary>
                /// <param name="value">The field value.</param>
                /// <param name="fieldName">The field name.</param>
                /// <param name="reader">The json reader.</param>
                protected override void SetField(InvalidFileActionError value, string fieldName, enc.IJsonReader reader)
                {
                    switch (fieldName)
                    {
                        case "invalid_file_action_error":
                            value.Value = enc.StringDecoder.Instance.Decode(reader);
                            break;
                        default:
                            reader.Skip();
                            break;
                    }
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>User does not have permission to access file specified by file.Id.</para>
        /// </summary>
        public sealed class PermissionDeniedError : FileErrorResult
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<PermissionDeniedError> Encoder = new PermissionDeniedErrorEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<PermissionDeniedError> Decoder = new PermissionDeniedErrorDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="PermissionDeniedError" />
            /// class.</para>
            /// </summary>
            /// <param name="value">The value</param>
            public PermissionDeniedError(string value)
            {
                this.Value = value;
            }
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="PermissionDeniedError" />
            /// class.</para>
            /// </summary>
            private PermissionDeniedError()
            {
            }

            /// <summary>
            /// <para>Gets the value of this instance.</para>
            /// </summary>
            public string Value { get; private set; }

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="PermissionDeniedError" />.</para>
            /// </summary>
            private class PermissionDeniedErrorEncoder : enc.StructEncoder<PermissionDeniedError>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(PermissionDeniedError value, enc.IJsonWriter writer)
                {
                    WriteProperty("permission_denied_error", value.Value, writer, enc.StringEncoder.Instance);
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="PermissionDeniedError" />.</para>
            /// </summary>
            private class PermissionDeniedErrorDecoder : enc.StructDecoder<PermissionDeniedError>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="PermissionDeniedError"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override PermissionDeniedError Create()
                {
                    return new PermissionDeniedError();
                }

                /// <summary>
                /// <para>Set given field.</para>
                /// </summary>
                /// <param name="value">The field value.</param>
                /// <param name="fieldName">The field name.</param>
                /// <param name="reader">The json reader.</param>
                protected override void SetField(PermissionDeniedError value, string fieldName, enc.IJsonReader reader)
                {
                    switch (fieldName)
                    {
                        case "permission_denied_error":
                            value.Value = enc.StringDecoder.Instance.Decode(reader);
                            break;
                        default:
                            reader.Skip();
                            break;
                    }
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : FileErrorResult
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return new Other();
                }

                /// <summary>
                /// <para>Decode fields without ensuring start and end object.</para>
                /// </summary>
                /// <param name="reader">The json reader.</param>
                /// <returns>The decoded object.</returns>
                public override Other DecodeFields(enc.IJsonReader reader)
                {
                    return Other.Instance;
                }
            }

            #endregion
        }
    }
}
