// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Sharing
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>Arguments for <see
    /// cref="Dropbox.Api.Sharing.Routes.SharingRoutes.ListFileMembersAsync" />.</para>
    /// </summary>
    public class ListFileMembersArg
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<ListFileMembersArg> Encoder = new ListFileMembersArgEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<ListFileMembersArg> Decoder = new ListFileMembersArgDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="ListFileMembersArg" />
        /// class.</para>
        /// </summary>
        /// <param name="file">The file for which you want to see members.</param>
        /// <param name="actions">The actions for which to return permissions on a
        /// member</param>
        /// <param name="includeInherited">Whether to include members who only have access from
        /// a parent shared folder.</param>
        /// <param name="limit">Number of members to return max per query. Defaults to 100 if
        /// no limit is specified.</param>
        public ListFileMembersArg(string file,
                                  col.IEnumerable<MemberAction> actions = null,
                                  bool includeInherited = true,
                                  uint limit = 100)
        {
            if (file == null)
            {
                throw new sys.ArgumentNullException("file");
            }
            if (file.Length < 1)
            {
                throw new sys.ArgumentOutOfRangeException("file", "Length should be at least 1");
            }
            if (!re.Regex.IsMatch(file, @"\A(?:((/|id:).*|nspath:[^:]*:[^:]*))\z"))
            {
                throw new sys.ArgumentOutOfRangeException("file", @"Value should match pattern '\A(?:((/|id:).*|nspath:[^:]*:[^:]*))\z'");
            }

            var actionsList = enc.Util.ToList(actions);

            if (limit < 1U)
            {
                throw new sys.ArgumentOutOfRangeException("limit", "Value should be greater or equal than 1");
            }
            if (limit > 300U)
            {
                throw new sys.ArgumentOutOfRangeException("limit", "Value should be less of equal than 300");
            }

            this.File = file;
            this.Actions = actionsList;
            this.IncludeInherited = includeInherited;
            this.Limit = limit;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="ListFileMembersArg" />
        /// class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        public ListFileMembersArg()
        {
            this.IncludeInherited = true;
            this.Limit = 100;
        }

        /// <summary>
        /// <para>The file for which you want to see members.</para>
        /// </summary>
        public string File { get; protected set; }

        /// <summary>
        /// <para>The actions for which to return permissions on a member</para>
        /// </summary>
        public col.IList<MemberAction> Actions { get; protected set; }

        /// <summary>
        /// <para>Whether to include members who only have access from a parent shared
        /// folder.</para>
        /// </summary>
        public bool IncludeInherited { get; protected set; }

        /// <summary>
        /// <para>Number of members to return max per query. Defaults to 100 if no limit is
        /// specified.</para>
        /// </summary>
        public uint Limit { get; protected set; }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="ListFileMembersArg" />.</para>
        /// </summary>
        private class ListFileMembersArgEncoder : enc.StructEncoder<ListFileMembersArg>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(ListFileMembersArg value, enc.IJsonWriter writer)
            {
                WriteProperty("file", value.File, writer, enc.StringEncoder.Instance);
                if (value.Actions.Count > 0)
                {
                    WriteListProperty("actions", value.Actions, writer, Dropbox.Api.Sharing.MemberAction.Encoder);
                }
                WriteProperty("include_inherited", value.IncludeInherited, writer, enc.BooleanEncoder.Instance);
                WriteProperty("limit", value.Limit, writer, enc.UInt32Encoder.Instance);
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="ListFileMembersArg" />.</para>
        /// </summary>
        private class ListFileMembersArgDecoder : enc.StructDecoder<ListFileMembersArg>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="ListFileMembersArg" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override ListFileMembersArg Create()
            {
                return new ListFileMembersArg();
            }

            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(ListFileMembersArg value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "file":
                        value.File = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "actions":
                        value.Actions = ReadList<MemberAction>(reader, Dropbox.Api.Sharing.MemberAction.Decoder);
                        break;
                    case "include_inherited":
                        value.IncludeInherited = enc.BooleanDecoder.Instance.Decode(reader);
                        break;
                    case "limit":
                        value.Limit = enc.UInt32Decoder.Instance.Decode(reader);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }
        }

        #endregion
    }
}
