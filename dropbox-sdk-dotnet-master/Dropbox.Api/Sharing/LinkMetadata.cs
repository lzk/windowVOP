// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Sharing
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>Metadata for a shared link. This can be either a <see cref="PathLinkMetadata" />
    /// or <see cref="CollectionLinkMetadata" />.</para>
    /// </summary>
    /// <seealso cref="CollectionLinkMetadata" />
    /// <seealso cref="PathLinkMetadata" />
    public class LinkMetadata
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<LinkMetadata> Encoder = new LinkMetadataEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<LinkMetadata> Decoder = new LinkMetadataDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="LinkMetadata" /> class.</para>
        /// </summary>
        /// <param name="url">URL of the shared link.</param>
        /// <param name="visibility">Who can access the link.</param>
        /// <param name="expires">Expiration time, if set. By default the link won't
        /// expire.</param>
        protected LinkMetadata(string url,
                               Visibility visibility,
                               sys.DateTime? expires = null)
        {
            if (url == null)
            {
                throw new sys.ArgumentNullException("url");
            }

            if (visibility == null)
            {
                throw new sys.ArgumentNullException("visibility");
            }

            this.Url = url;
            this.Visibility = visibility;
            this.Expires = expires;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="LinkMetadata" /> class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        public LinkMetadata()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Path</para>
        /// </summary>
        public bool IsPath
        {
            get
            {
                return this is PathLinkMetadata;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a <see cref="PathLinkMetadata" />, or
        /// <c>null</c>.</para>
        /// </summary>
        public PathLinkMetadata AsPath
        {
            get
            {
                return this as PathLinkMetadata;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Collection</para>
        /// </summary>
        public bool IsCollection
        {
            get
            {
                return this is CollectionLinkMetadata;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a <see cref="CollectionLinkMetadata" />, or
        /// <c>null</c>.</para>
        /// </summary>
        public CollectionLinkMetadata AsCollection
        {
            get
            {
                return this as CollectionLinkMetadata;
            }
        }

        /// <summary>
        /// <para>URL of the shared link.</para>
        /// </summary>
        public string Url { get; protected set; }

        /// <summary>
        /// <para>Who can access the link.</para>
        /// </summary>
        public Visibility Visibility { get; protected set; }

        /// <summary>
        /// <para>Expiration time, if set. By default the link won't expire.</para>
        /// </summary>
        public sys.DateTime? Expires { get; protected set; }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="LinkMetadata" />.</para>
        /// </summary>
        private class LinkMetadataEncoder : enc.StructEncoder<LinkMetadata>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(LinkMetadata value, enc.IJsonWriter writer)
            {
                if (value is PathLinkMetadata)
                {
                    WriteProperty(".tag", "path", writer, enc.StringEncoder.Instance);
                    PathLinkMetadata.Encoder.EncodeFields((PathLinkMetadata)value, writer);
                    return;
                }
                if (value is CollectionLinkMetadata)
                {
                    WriteProperty(".tag", "collection", writer, enc.StringEncoder.Instance);
                    CollectionLinkMetadata.Encoder.EncodeFields((CollectionLinkMetadata)value, writer);
                    return;
                }
                WriteProperty("url", value.Url, writer, enc.StringEncoder.Instance);
                WriteProperty("visibility", value.Visibility, writer, Dropbox.Api.Sharing.Visibility.Encoder);
                if (value.Expires != null)
                {
                    WriteProperty("expires", value.Expires.Value, writer, enc.DateTimeEncoder.Instance);
                }
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="LinkMetadata" />.</para>
        /// </summary>
        private class LinkMetadataDecoder : enc.UnionDecoder<LinkMetadata>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="LinkMetadata" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override LinkMetadata Create()
            {
                return new LinkMetadata();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override LinkMetadata Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "path":
                        return PathLinkMetadata.Decoder.DecodeFields(reader);
                    case "collection":
                        return CollectionLinkMetadata.Decoder.DecodeFields(reader);
                    default:
                        return base.Decode(reader);
                }
            }
            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(LinkMetadata value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "url":
                        value.Url = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "visibility":
                        value.Visibility = Dropbox.Api.Sharing.Visibility.Decoder.Decode(reader);
                        break;
                    case "expires":
                        value.Expires = enc.DateTimeDecoder.Instance.Decode(reader);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }
        }

        #endregion
    }
}
