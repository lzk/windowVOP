// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Files
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>GPS coordinates for a photo or video.</para>
    /// </summary>
    public class GpsCoordinates
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<GpsCoordinates> Encoder = new GpsCoordinatesEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<GpsCoordinates> Decoder = new GpsCoordinatesDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="GpsCoordinates" /> class.</para>
        /// </summary>
        /// <param name="latitude">Latitude of the GPS coordinates.</param>
        /// <param name="longitude">Longitude of the GPS coordinates.</param>
        public GpsCoordinates(double latitude,
                              double longitude)
        {
            this.Latitude = latitude;
            this.Longitude = longitude;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="GpsCoordinates" /> class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        public GpsCoordinates()
        {
        }

        /// <summary>
        /// <para>Latitude of the GPS coordinates.</para>
        /// </summary>
        public double Latitude { get; protected set; }

        /// <summary>
        /// <para>Longitude of the GPS coordinates.</para>
        /// </summary>
        public double Longitude { get; protected set; }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="GpsCoordinates" />.</para>
        /// </summary>
        private class GpsCoordinatesEncoder : enc.StructEncoder<GpsCoordinates>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(GpsCoordinates value, enc.IJsonWriter writer)
            {
                WriteProperty("latitude", value.Latitude, writer, enc.DoubleEncoder.Instance);
                WriteProperty("longitude", value.Longitude, writer, enc.DoubleEncoder.Instance);
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="GpsCoordinates" />.</para>
        /// </summary>
        private class GpsCoordinatesDecoder : enc.StructDecoder<GpsCoordinates>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="GpsCoordinates" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override GpsCoordinates Create()
            {
                return new GpsCoordinates();
            }

            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(GpsCoordinates value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "latitude":
                        value.Latitude = enc.DoubleDecoder.Instance.Decode(reader);
                        break;
                    case "longitude":
                        value.Longitude = enc.DoubleDecoder.Instance.Decode(reader);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }
        }

        #endregion
    }
}
