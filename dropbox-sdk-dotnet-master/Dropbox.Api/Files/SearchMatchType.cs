// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Files
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>Indicates what type of match was found for a given item.</para>
    /// </summary>
    public class SearchMatchType
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<SearchMatchType> Encoder = new SearchMatchTypeEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<SearchMatchType> Decoder = new SearchMatchTypeDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="SearchMatchType" />
        /// class.</para>
        /// </summary>
        public SearchMatchType()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Filename</para>
        /// </summary>
        public bool IsFilename
        {
            get
            {
                return this is Filename;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Filename, or <c>null</c>.</para>
        /// </summary>
        public Filename AsFilename
        {
            get
            {
                return this as Filename;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Content</para>
        /// </summary>
        public bool IsContent
        {
            get
            {
                return this is Content;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Content, or <c>null</c>.</para>
        /// </summary>
        public Content AsContent
        {
            get
            {
                return this as Content;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Both</para>
        /// </summary>
        public bool IsBoth
        {
            get
            {
                return this is Both;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Both, or <c>null</c>.</para>
        /// </summary>
        public Both AsBoth
        {
            get
            {
                return this as Both;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="SearchMatchType" />.</para>
        /// </summary>
        private class SearchMatchTypeEncoder : enc.StructEncoder<SearchMatchType>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(SearchMatchType value, enc.IJsonWriter writer)
            {
                if (value is Filename)
                {
                    WriteProperty(".tag", "filename", writer, enc.StringEncoder.Instance);
                    Filename.Encoder.EncodeFields((Filename)value, writer);
                    return;
                }
                if (value is Content)
                {
                    WriteProperty(".tag", "content", writer, enc.StringEncoder.Instance);
                    Content.Encoder.EncodeFields((Content)value, writer);
                    return;
                }
                if (value is Both)
                {
                    WriteProperty(".tag", "both", writer, enc.StringEncoder.Instance);
                    Both.Encoder.EncodeFields((Both)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="SearchMatchType" />.</para>
        /// </summary>
        private class SearchMatchTypeDecoder : enc.UnionDecoder<SearchMatchType>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="SearchMatchType" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override SearchMatchType Create()
            {
                return new SearchMatchType();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override SearchMatchType Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "filename":
                        return Filename.Decoder.DecodeFields(reader);
                    case "content":
                        return Content.Decoder.DecodeFields(reader);
                    case "both":
                        return Both.Decoder.DecodeFields(reader);
                    default:
                        throw new sys.InvalidOperationException();
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>This item was matched on its file or folder name.</para>
        /// </summary>
        public sealed class Filename : SearchMatchType
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Filename> Encoder = new FilenameEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Filename> Decoder = new FilenameDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Filename" /> class.</para>
            /// </summary>
            private Filename()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Filename</para>
            /// </summary>
            public static readonly Filename Instance = new Filename();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Filename" />.</para>
            /// </summary>
            private class FilenameEncoder : enc.StructEncoder<Filename>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Filename value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Filename" />.</para>
            /// </summary>
            private class FilenameDecoder : enc.StructDecoder<Filename>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Filename" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Filename Create()
                {
                    return new Filename();
                }

                /// <summary>
                /// <para>Decode fields without ensuring start and end object.</para>
                /// </summary>
                /// <param name="reader">The json reader.</param>
                /// <returns>The decoded object.</returns>
                public override Filename DecodeFields(enc.IJsonReader reader)
                {
                    return Filename.Instance;
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>This item was matched based on its file contents.</para>
        /// </summary>
        public sealed class Content : SearchMatchType
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Content> Encoder = new ContentEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Content> Decoder = new ContentDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Content" /> class.</para>
            /// </summary>
            private Content()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Content</para>
            /// </summary>
            public static readonly Content Instance = new Content();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Content" />.</para>
            /// </summary>
            private class ContentEncoder : enc.StructEncoder<Content>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Content value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Content" />.</para>
            /// </summary>
            private class ContentDecoder : enc.StructDecoder<Content>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Content" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Content Create()
                {
                    return new Content();
                }

                /// <summary>
                /// <para>Decode fields without ensuring start and end object.</para>
                /// </summary>
                /// <param name="reader">The json reader.</param>
                /// <returns>The decoded object.</returns>
                public override Content DecodeFields(enc.IJsonReader reader)
                {
                    return Content.Instance;
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>This item was matched based on both its contents and its file name.</para>
        /// </summary>
        public sealed class Both : SearchMatchType
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Both> Encoder = new BothEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Both> Decoder = new BothDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Both" /> class.</para>
            /// </summary>
            private Both()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Both</para>
            /// </summary>
            public static readonly Both Instance = new Both();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Both" />.</para>
            /// </summary>
            private class BothEncoder : enc.StructEncoder<Both>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Both value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Both" />.</para>
            /// </summary>
            private class BothDecoder : enc.StructDecoder<Both>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Both" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Both Create()
                {
                    return new Both();
                }

                /// <summary>
                /// <para>Decode fields without ensuring start and end object.</para>
                /// </summary>
                /// <param name="reader">The json reader.</param>
                /// <returns>The decoded object.</returns>
                public override Both DecodeFields(enc.IJsonReader reader)
                {
                    return Both.Instance;
                }
            }

            #endregion
        }
    }
}
