// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Files
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>Metadata for a photo.</para>
    /// </summary>
    /// <seealso cref="Dropbox.Api.Files.MediaMetadata" />
    public class PhotoMetadata : MediaMetadata
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<PhotoMetadata> Encoder = new PhotoMetadataEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<PhotoMetadata> Decoder = new PhotoMetadataDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="PhotoMetadata" /> class.</para>
        /// </summary>
        /// <param name="dimensions">Dimension of the photo/video.</param>
        /// <param name="location">The GPS coordinate of the photo/video.</param>
        /// <param name="timeTaken">The timestamp when the photo/video is taken.</param>
        public PhotoMetadata(Dimensions dimensions = null,
                             GpsCoordinates location = null,
                             sys.DateTime? timeTaken = null)
            : base(dimensions, location, timeTaken)
        {
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="PhotoMetadata" /> class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        public PhotoMetadata()
        {
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="PhotoMetadata" />.</para>
        /// </summary>
        private class PhotoMetadataEncoder : enc.StructEncoder<PhotoMetadata>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(PhotoMetadata value, enc.IJsonWriter writer)
            {
                if (value.Dimensions != null)
                {
                    WriteProperty("dimensions", value.Dimensions, writer, Dropbox.Api.Files.Dimensions.Encoder);
                }
                if (value.Location != null)
                {
                    WriteProperty("location", value.Location, writer, Dropbox.Api.Files.GpsCoordinates.Encoder);
                }
                if (value.TimeTaken != null)
                {
                    WriteProperty("time_taken", value.TimeTaken.Value, writer, enc.DateTimeEncoder.Instance);
                }
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="PhotoMetadata" />.</para>
        /// </summary>
        private class PhotoMetadataDecoder : enc.StructDecoder<PhotoMetadata>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="PhotoMetadata" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override PhotoMetadata Create()
            {
                return new PhotoMetadata();
            }

            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(PhotoMetadata value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "dimensions":
                        value.Dimensions = Dropbox.Api.Files.Dimensions.Decoder.Decode(reader);
                        break;
                    case "location":
                        value.Location = Dropbox.Api.Files.GpsCoordinates.Decoder.Decode(reader);
                        break;
                    case "time_taken":
                        value.TimeTaken = enc.DateTimeDecoder.Instance.Decode(reader);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }
        }

        #endregion
    }
}
