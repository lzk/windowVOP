// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Files
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The save url error object</para>
    /// </summary>
    public class SaveUrlError
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<SaveUrlError> Encoder = new SaveUrlErrorEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<SaveUrlError> Decoder = new SaveUrlErrorDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="SaveUrlError" /> class.</para>
        /// </summary>
        public SaveUrlError()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Path</para>
        /// </summary>
        public bool IsPath
        {
            get
            {
                return this is Path;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Path, or <c>null</c>.</para>
        /// </summary>
        public Path AsPath
        {
            get
            {
                return this as Path;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is DownloadFailed</para>
        /// </summary>
        public bool IsDownloadFailed
        {
            get
            {
                return this is DownloadFailed;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a DownloadFailed, or <c>null</c>.</para>
        /// </summary>
        public DownloadFailed AsDownloadFailed
        {
            get
            {
                return this as DownloadFailed;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is InvalidUrl</para>
        /// </summary>
        public bool IsInvalidUrl
        {
            get
            {
                return this is InvalidUrl;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a InvalidUrl, or <c>null</c>.</para>
        /// </summary>
        public InvalidUrl AsInvalidUrl
        {
            get
            {
                return this as InvalidUrl;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is NotFound</para>
        /// </summary>
        public bool IsNotFound
        {
            get
            {
                return this is NotFound;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a NotFound, or <c>null</c>.</para>
        /// </summary>
        public NotFound AsNotFound
        {
            get
            {
                return this as NotFound;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="SaveUrlError" />.</para>
        /// </summary>
        private class SaveUrlErrorEncoder : enc.StructEncoder<SaveUrlError>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(SaveUrlError value, enc.IJsonWriter writer)
            {
                if (value is Path)
                {
                    WriteProperty(".tag", "path", writer, enc.StringEncoder.Instance);
                    Path.Encoder.EncodeFields((Path)value, writer);
                    return;
                }
                if (value is DownloadFailed)
                {
                    WriteProperty(".tag", "download_failed", writer, enc.StringEncoder.Instance);
                    DownloadFailed.Encoder.EncodeFields((DownloadFailed)value, writer);
                    return;
                }
                if (value is InvalidUrl)
                {
                    WriteProperty(".tag", "invalid_url", writer, enc.StringEncoder.Instance);
                    InvalidUrl.Encoder.EncodeFields((InvalidUrl)value, writer);
                    return;
                }
                if (value is NotFound)
                {
                    WriteProperty(".tag", "not_found", writer, enc.StringEncoder.Instance);
                    NotFound.Encoder.EncodeFields((NotFound)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="SaveUrlError" />.</para>
        /// </summary>
        private class SaveUrlErrorDecoder : enc.UnionDecoder<SaveUrlError>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="SaveUrlError" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override SaveUrlError Create()
            {
                return new SaveUrlError();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override SaveUrlError Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "path":
                        return Path.Decoder.DecodeFields(reader);
                    case "download_failed":
                        return DownloadFailed.Decoder.DecodeFields(reader);
                    case "invalid_url":
                        return InvalidUrl.Decoder.DecodeFields(reader);
                    case "not_found":
                        return NotFound.Decoder.DecodeFields(reader);
                    default:
                        return Other.Decoder.DecodeFields(reader);
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>The path object</para>
        /// </summary>
        public sealed class Path : SaveUrlError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Path> Encoder = new PathEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Path> Decoder = new PathDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Path" /> class.</para>
            /// </summary>
            /// <param name="value">The value</param>
            public Path(WriteError value)
            {
                this.Value = value;
            }
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Path" /> class.</para>
            /// </summary>
            private Path()
            {
            }

            /// <summary>
            /// <para>Gets the value of this instance.</para>
            /// </summary>
            public WriteError Value { get; private set; }

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Path" />.</para>
            /// </summary>
            private class PathEncoder : enc.StructEncoder<Path>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Path value, enc.IJsonWriter writer)
                {
                    Dropbox.Api.Files.WriteError.Encoder.EncodeFields(value.Value, writer);
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Path" />.</para>
            /// </summary>
            private class PathDecoder : enc.StructDecoder<Path>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Path" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Path Create()
                {
                    return new Path();
                }

                /// <summary>
                /// <para>Set given field.</para>
                /// </summary>
                /// <param name="value">The field value.</param>
                /// <param name="fieldName">The field name.</param>
                /// <param name="reader">The json reader.</param>
                protected override void SetField(Path value, string fieldName, enc.IJsonReader reader)
                {
                    switch (fieldName)
                    {
                        case "path":
                            value.Value = Dropbox.Api.Files.WriteError.Decoder.Decode(reader);
                            break;
                        default:
                            reader.Skip();
                            break;
                    }
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>Failed downloading the given URL.</para>
        /// </summary>
        public sealed class DownloadFailed : SaveUrlError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<DownloadFailed> Encoder = new DownloadFailedEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<DownloadFailed> Decoder = new DownloadFailedDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="DownloadFailed" />
            /// class.</para>
            /// </summary>
            private DownloadFailed()
            {
            }

            /// <summary>
            /// <para>A singleton instance of DownloadFailed</para>
            /// </summary>
            public static readonly DownloadFailed Instance = new DownloadFailed();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="DownloadFailed" />.</para>
            /// </summary>
            private class DownloadFailedEncoder : enc.StructEncoder<DownloadFailed>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(DownloadFailed value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="DownloadFailed" />.</para>
            /// </summary>
            private class DownloadFailedDecoder : enc.StructDecoder<DownloadFailed>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="DownloadFailed" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override DownloadFailed Create()
                {
                    return new DownloadFailed();
                }

                /// <summary>
                /// <para>Decode fields without ensuring start and end object.</para>
                /// </summary>
                /// <param name="reader">The json reader.</param>
                /// <returns>The decoded object.</returns>
                public override DownloadFailed DecodeFields(enc.IJsonReader reader)
                {
                    return DownloadFailed.Instance;
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>The given URL is invalid.</para>
        /// </summary>
        public sealed class InvalidUrl : SaveUrlError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<InvalidUrl> Encoder = new InvalidUrlEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<InvalidUrl> Decoder = new InvalidUrlDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="InvalidUrl" /> class.</para>
            /// </summary>
            private InvalidUrl()
            {
            }

            /// <summary>
            /// <para>A singleton instance of InvalidUrl</para>
            /// </summary>
            public static readonly InvalidUrl Instance = new InvalidUrl();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="InvalidUrl" />.</para>
            /// </summary>
            private class InvalidUrlEncoder : enc.StructEncoder<InvalidUrl>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(InvalidUrl value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="InvalidUrl" />.</para>
            /// </summary>
            private class InvalidUrlDecoder : enc.StructDecoder<InvalidUrl>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="InvalidUrl" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override InvalidUrl Create()
                {
                    return new InvalidUrl();
                }

                /// <summary>
                /// <para>Decode fields without ensuring start and end object.</para>
                /// </summary>
                /// <param name="reader">The json reader.</param>
                /// <returns>The decoded object.</returns>
                public override InvalidUrl DecodeFields(enc.IJsonReader reader)
                {
                    return InvalidUrl.Instance;
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>The file where the URL is saved to no longer exists.</para>
        /// </summary>
        public sealed class NotFound : SaveUrlError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<NotFound> Encoder = new NotFoundEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<NotFound> Decoder = new NotFoundDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="NotFound" /> class.</para>
            /// </summary>
            private NotFound()
            {
            }

            /// <summary>
            /// <para>A singleton instance of NotFound</para>
            /// </summary>
            public static readonly NotFound Instance = new NotFound();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="NotFound" />.</para>
            /// </summary>
            private class NotFoundEncoder : enc.StructEncoder<NotFound>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(NotFound value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="NotFound" />.</para>
            /// </summary>
            private class NotFoundDecoder : enc.StructDecoder<NotFound>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="NotFound" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override NotFound Create()
                {
                    return new NotFound();
                }

                /// <summary>
                /// <para>Decode fields without ensuring start and end object.</para>
                /// </summary>
                /// <param name="reader">The json reader.</param>
                /// <returns>The decoded object.</returns>
                public override NotFound DecodeFields(enc.IJsonReader reader)
                {
                    return NotFound.Instance;
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : SaveUrlError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return new Other();
                }

                /// <summary>
                /// <para>Decode fields without ensuring start and end object.</para>
                /// </summary>
                /// <param name="reader">The json reader.</param>
                /// <returns>The decoded object.</returns>
                public override Other DecodeFields(enc.IJsonReader reader)
                {
                    return Other.Instance;
                }
            }

            #endregion
        }
    }
}
