// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Files
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The media info object</para>
    /// </summary>
    public class MediaInfo
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<MediaInfo> Encoder = new MediaInfoEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<MediaInfo> Decoder = new MediaInfoDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="MediaInfo" /> class.</para>
        /// </summary>
        public MediaInfo()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Pending</para>
        /// </summary>
        public bool IsPending
        {
            get
            {
                return this is Pending;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Pending, or <c>null</c>.</para>
        /// </summary>
        public Pending AsPending
        {
            get
            {
                return this as Pending;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Metadata</para>
        /// </summary>
        public bool IsMetadata
        {
            get
            {
                return this is Metadata;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Metadata, or <c>null</c>.</para>
        /// </summary>
        public Metadata AsMetadata
        {
            get
            {
                return this as Metadata;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="MediaInfo" />.</para>
        /// </summary>
        private class MediaInfoEncoder : enc.StructEncoder<MediaInfo>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(MediaInfo value, enc.IJsonWriter writer)
            {
                if (value is Pending)
                {
                    WriteProperty(".tag", "pending", writer, enc.StringEncoder.Instance);
                    Pending.Encoder.EncodeFields((Pending)value, writer);
                    return;
                }
                if (value is Metadata)
                {
                    WriteProperty(".tag", "metadata", writer, enc.StringEncoder.Instance);
                    Metadata.Encoder.EncodeFields((Metadata)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="MediaInfo" />.</para>
        /// </summary>
        private class MediaInfoDecoder : enc.UnionDecoder<MediaInfo>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="MediaInfo" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override MediaInfo Create()
            {
                return new MediaInfo();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override MediaInfo Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "pending":
                        return Pending.Decoder.DecodeFields(reader);
                    case "metadata":
                        return Metadata.Decoder.DecodeFields(reader);
                    default:
                        throw new sys.InvalidOperationException();
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>Indicate the photo/video is still under processing and metadata is not
        /// available yet.</para>
        /// </summary>
        public sealed class Pending : MediaInfo
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Pending> Encoder = new PendingEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Pending> Decoder = new PendingDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Pending" /> class.</para>
            /// </summary>
            private Pending()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Pending</para>
            /// </summary>
            public static readonly Pending Instance = new Pending();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Pending" />.</para>
            /// </summary>
            private class PendingEncoder : enc.StructEncoder<Pending>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Pending value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Pending" />.</para>
            /// </summary>
            private class PendingDecoder : enc.StructDecoder<Pending>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Pending" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Pending Create()
                {
                    return new Pending();
                }

                /// <summary>
                /// <para>Decode fields without ensuring start and end object.</para>
                /// </summary>
                /// <param name="reader">The json reader.</param>
                /// <returns>The decoded object.</returns>
                public override Pending DecodeFields(enc.IJsonReader reader)
                {
                    return Pending.Instance;
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>The metadata for the photo/video.</para>
        /// </summary>
        public sealed class Metadata : MediaInfo
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Metadata> Encoder = new MetadataEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Metadata> Decoder = new MetadataDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Metadata" /> class.</para>
            /// </summary>
            /// <param name="value">The value</param>
            public Metadata(MediaMetadata value)
            {
                this.Value = value;
            }
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Metadata" /> class.</para>
            /// </summary>
            private Metadata()
            {
            }

            /// <summary>
            /// <para>Gets the value of this instance.</para>
            /// </summary>
            public MediaMetadata Value { get; private set; }

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Metadata" />.</para>
            /// </summary>
            private class MetadataEncoder : enc.StructEncoder<Metadata>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Metadata value, enc.IJsonWriter writer)
                {
                    Dropbox.Api.Files.MediaMetadata.Encoder.EncodeFields(value.Value, writer);
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Metadata" />.</para>
            /// </summary>
            private class MetadataDecoder : enc.StructDecoder<Metadata>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Metadata" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Metadata Create()
                {
                    return new Metadata();
                }

                /// <summary>
                /// <para>Set given field.</para>
                /// </summary>
                /// <param name="value">The field value.</param>
                /// <param name="fieldName">The field name.</param>
                /// <param name="reader">The json reader.</param>
                protected override void SetField(Metadata value, string fieldName, enc.IJsonReader reader)
                {
                    switch (fieldName)
                    {
                        case "metadata":
                            value.Value = Dropbox.Api.Files.MediaMetadata.Decoder.Decode(reader);
                            break;
                        default:
                            reader.Skip();
                            break;
                    }
                }
            }

            #endregion
        }
    }
}
