// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Files
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>Metadata for a photo or video.</para>
    /// </summary>
    /// <seealso cref="PhotoMetadata" />
    /// <seealso cref="VideoMetadata" />
    public class MediaMetadata
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<MediaMetadata> Encoder = new MediaMetadataEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<MediaMetadata> Decoder = new MediaMetadataDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="MediaMetadata" /> class.</para>
        /// </summary>
        /// <param name="dimensions">Dimension of the photo/video.</param>
        /// <param name="location">The GPS coordinate of the photo/video.</param>
        /// <param name="timeTaken">The timestamp when the photo/video is taken.</param>
        protected MediaMetadata(Dimensions dimensions = null,
                                GpsCoordinates location = null,
                                sys.DateTime? timeTaken = null)
        {
            this.Dimensions = dimensions;
            this.Location = location;
            this.TimeTaken = timeTaken;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="MediaMetadata" /> class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        public MediaMetadata()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Photo</para>
        /// </summary>
        public bool IsPhoto
        {
            get
            {
                return this is PhotoMetadata;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a <see cref="PhotoMetadata" />, or <c>null</c>.</para>
        /// </summary>
        public PhotoMetadata AsPhoto
        {
            get
            {
                return this as PhotoMetadata;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Video</para>
        /// </summary>
        public bool IsVideo
        {
            get
            {
                return this is VideoMetadata;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a <see cref="VideoMetadata" />, or <c>null</c>.</para>
        /// </summary>
        public VideoMetadata AsVideo
        {
            get
            {
                return this as VideoMetadata;
            }
        }

        /// <summary>
        /// <para>Dimension of the photo/video.</para>
        /// </summary>
        public Dimensions Dimensions { get; protected set; }

        /// <summary>
        /// <para>The GPS coordinate of the photo/video.</para>
        /// </summary>
        public GpsCoordinates Location { get; protected set; }

        /// <summary>
        /// <para>The timestamp when the photo/video is taken.</para>
        /// </summary>
        public sys.DateTime? TimeTaken { get; protected set; }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="MediaMetadata" />.</para>
        /// </summary>
        private class MediaMetadataEncoder : enc.StructEncoder<MediaMetadata>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(MediaMetadata value, enc.IJsonWriter writer)
            {
                if (value is PhotoMetadata)
                {
                    WriteProperty(".tag", "photo", writer, enc.StringEncoder.Instance);
                    PhotoMetadata.Encoder.EncodeFields((PhotoMetadata)value, writer);
                    return;
                }
                if (value is VideoMetadata)
                {
                    WriteProperty(".tag", "video", writer, enc.StringEncoder.Instance);
                    VideoMetadata.Encoder.EncodeFields((VideoMetadata)value, writer);
                    return;
                }
                if (value.Dimensions != null)
                {
                    WriteProperty("dimensions", value.Dimensions, writer, Dropbox.Api.Files.Dimensions.Encoder);
                }
                if (value.Location != null)
                {
                    WriteProperty("location", value.Location, writer, Dropbox.Api.Files.GpsCoordinates.Encoder);
                }
                if (value.TimeTaken != null)
                {
                    WriteProperty("time_taken", value.TimeTaken.Value, writer, enc.DateTimeEncoder.Instance);
                }
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="MediaMetadata" />.</para>
        /// </summary>
        private class MediaMetadataDecoder : enc.UnionDecoder<MediaMetadata>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="MediaMetadata" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override MediaMetadata Create()
            {
                return new MediaMetadata();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override MediaMetadata Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "photo":
                        return PhotoMetadata.Decoder.DecodeFields(reader);
                    case "video":
                        return VideoMetadata.Decoder.DecodeFields(reader);
                    default:
                        throw new sys.InvalidOperationException();
                }
            }
            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(MediaMetadata value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "dimensions":
                        value.Dimensions = Dropbox.Api.Files.Dimensions.Decoder.Decode(reader);
                        break;
                    case "location":
                        value.Location = Dropbox.Api.Files.GpsCoordinates.Decoder.Decode(reader);
                        break;
                    case "time_taken":
                        value.TimeTaken = enc.DateTimeDecoder.Instance.Decode(reader);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }
        }

        #endregion
    }
}
