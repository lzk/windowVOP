// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Files
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The search match object</para>
    /// </summary>
    public class SearchMatch
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<SearchMatch> Encoder = new SearchMatchEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<SearchMatch> Decoder = new SearchMatchDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="SearchMatch" /> class.</para>
        /// </summary>
        /// <param name="matchType">The type of the match.</param>
        /// <param name="metadata">The metadata for the matched file or folder.</param>
        public SearchMatch(SearchMatchType matchType,
                           Metadata metadata)
        {
            if (matchType == null)
            {
                throw new sys.ArgumentNullException("matchType");
            }

            if (metadata == null)
            {
                throw new sys.ArgumentNullException("metadata");
            }

            this.MatchType = matchType;
            this.Metadata = metadata;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="SearchMatch" /> class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        public SearchMatch()
        {
        }

        /// <summary>
        /// <para>The type of the match.</para>
        /// </summary>
        public SearchMatchType MatchType { get; protected set; }

        /// <summary>
        /// <para>The metadata for the matched file or folder.</para>
        /// </summary>
        public Metadata Metadata { get; protected set; }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="SearchMatch" />.</para>
        /// </summary>
        private class SearchMatchEncoder : enc.StructEncoder<SearchMatch>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(SearchMatch value, enc.IJsonWriter writer)
            {
                WriteProperty("match_type", value.MatchType, writer, Dropbox.Api.Files.SearchMatchType.Encoder);
                WriteProperty("metadata", value.Metadata, writer, Dropbox.Api.Files.Metadata.Encoder);
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="SearchMatch" />.</para>
        /// </summary>
        private class SearchMatchDecoder : enc.StructDecoder<SearchMatch>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="SearchMatch" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override SearchMatch Create()
            {
                return new SearchMatch();
            }

            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(SearchMatch value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "match_type":
                        value.MatchType = Dropbox.Api.Files.SearchMatchType.Decoder.Decode(reader);
                        break;
                    case "metadata":
                        value.Metadata = Dropbox.Api.Files.Metadata.Decoder.Decode(reader);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }
        }

        #endregion
    }
}
