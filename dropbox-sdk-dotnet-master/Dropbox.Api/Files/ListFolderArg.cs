// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Files
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The list folder arg object</para>
    /// </summary>
    public class ListFolderArg
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<ListFolderArg> Encoder = new ListFolderArgEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<ListFolderArg> Decoder = new ListFolderArgDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="ListFolderArg" /> class.</para>
        /// </summary>
        /// <param name="path">The path to the folder you want to see the contents of.</param>
        /// <param name="recursive">If true, the list folder operation will be applied
        /// recursively to all subfolders and the response will contain contents of all
        /// subfolders.</param>
        /// <param name="includeMediaInfo">If true, <see
        /// cref="Dropbox.Api.Files.FileMetadata.MediaInfo" /> is set for photo and
        /// video.</param>
        /// <param name="includeDeleted">If true, the results will include entries for files
        /// and folders that used to exist but were deleted.</param>
        /// <param name="includeHasExplicitSharedMembers">If true, the results will include a
        /// flag for each file indicating whether or not  that file has any explicit
        /// members.</param>
        public ListFolderArg(string path,
                             bool recursive = false,
                             bool includeMediaInfo = false,
                             bool includeDeleted = false,
                             bool includeHasExplicitSharedMembers = false)
        {
            if (path == null)
            {
                throw new sys.ArgumentNullException("path");
            }
            if (!re.Regex.IsMatch(path, @"\A(?:(/(.|[\r\n])*)?|(ns:[0-9]+(/.*)?))\z"))
            {
                throw new sys.ArgumentOutOfRangeException("path", @"Value should match pattern '\A(?:(/(.|[\r\n])*)?|(ns:[0-9]+(/.*)?))\z'");
            }

            this.Path = path;
            this.Recursive = recursive;
            this.IncludeMediaInfo = includeMediaInfo;
            this.IncludeDeleted = includeDeleted;
            this.IncludeHasExplicitSharedMembers = includeHasExplicitSharedMembers;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="ListFolderArg" /> class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        public ListFolderArg()
        {
            this.Recursive = false;
            this.IncludeMediaInfo = false;
            this.IncludeDeleted = false;
            this.IncludeHasExplicitSharedMembers = false;
        }

        /// <summary>
        /// <para>The path to the folder you want to see the contents of.</para>
        /// </summary>
        public string Path { get; protected set; }

        /// <summary>
        /// <para>If true, the list folder operation will be applied recursively to all
        /// subfolders and the response will contain contents of all subfolders.</para>
        /// </summary>
        public bool Recursive { get; protected set; }

        /// <summary>
        /// <para>If true, <see cref="Dropbox.Api.Files.FileMetadata.MediaInfo" /> is set for
        /// photo and video.</para>
        /// </summary>
        public bool IncludeMediaInfo { get; protected set; }

        /// <summary>
        /// <para>If true, the results will include entries for files and folders that used to
        /// exist but were deleted.</para>
        /// </summary>
        public bool IncludeDeleted { get; protected set; }

        /// <summary>
        /// <para>If true, the results will include a flag for each file indicating whether or
        /// not  that file has any explicit members.</para>
        /// </summary>
        public bool IncludeHasExplicitSharedMembers { get; protected set; }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="ListFolderArg" />.</para>
        /// </summary>
        private class ListFolderArgEncoder : enc.StructEncoder<ListFolderArg>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(ListFolderArg value, enc.IJsonWriter writer)
            {
                WriteProperty("path", value.Path, writer, enc.StringEncoder.Instance);
                WriteProperty("recursive", value.Recursive, writer, enc.BooleanEncoder.Instance);
                WriteProperty("include_media_info", value.IncludeMediaInfo, writer, enc.BooleanEncoder.Instance);
                WriteProperty("include_deleted", value.IncludeDeleted, writer, enc.BooleanEncoder.Instance);
                WriteProperty("include_has_explicit_shared_members", value.IncludeHasExplicitSharedMembers, writer, enc.BooleanEncoder.Instance);
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="ListFolderArg" />.</para>
        /// </summary>
        private class ListFolderArgDecoder : enc.StructDecoder<ListFolderArg>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="ListFolderArg" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override ListFolderArg Create()
            {
                return new ListFolderArg();
            }

            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(ListFolderArg value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "path":
                        value.Path = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "recursive":
                        value.Recursive = enc.BooleanDecoder.Instance.Decode(reader);
                        break;
                    case "include_media_info":
                        value.IncludeMediaInfo = enc.BooleanDecoder.Instance.Decode(reader);
                        break;
                    case "include_deleted":
                        value.IncludeDeleted = enc.BooleanDecoder.Instance.Decode(reader);
                        break;
                    case "include_has_explicit_shared_members":
                        value.IncludeHasExplicitSharedMembers = enc.BooleanDecoder.Instance.Decode(reader);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }
        }

        #endregion
    }
}
