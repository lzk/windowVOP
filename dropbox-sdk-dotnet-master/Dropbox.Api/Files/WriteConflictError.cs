// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Files
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The write conflict error object</para>
    /// </summary>
    public class WriteConflictError
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<WriteConflictError> Encoder = new WriteConflictErrorEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<WriteConflictError> Decoder = new WriteConflictErrorDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="WriteConflictError" />
        /// class.</para>
        /// </summary>
        public WriteConflictError()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is File</para>
        /// </summary>
        public bool IsFile
        {
            get
            {
                return this is File;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a File, or <c>null</c>.</para>
        /// </summary>
        public File AsFile
        {
            get
            {
                return this as File;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Folder</para>
        /// </summary>
        public bool IsFolder
        {
            get
            {
                return this is Folder;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Folder, or <c>null</c>.</para>
        /// </summary>
        public Folder AsFolder
        {
            get
            {
                return this as Folder;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is FileAncestor</para>
        /// </summary>
        public bool IsFileAncestor
        {
            get
            {
                return this is FileAncestor;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a FileAncestor, or <c>null</c>.</para>
        /// </summary>
        public FileAncestor AsFileAncestor
        {
            get
            {
                return this as FileAncestor;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="WriteConflictError" />.</para>
        /// </summary>
        private class WriteConflictErrorEncoder : enc.StructEncoder<WriteConflictError>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(WriteConflictError value, enc.IJsonWriter writer)
            {
                if (value is File)
                {
                    WriteProperty(".tag", "file", writer, enc.StringEncoder.Instance);
                    File.Encoder.EncodeFields((File)value, writer);
                    return;
                }
                if (value is Folder)
                {
                    WriteProperty(".tag", "folder", writer, enc.StringEncoder.Instance);
                    Folder.Encoder.EncodeFields((Folder)value, writer);
                    return;
                }
                if (value is FileAncestor)
                {
                    WriteProperty(".tag", "file_ancestor", writer, enc.StringEncoder.Instance);
                    FileAncestor.Encoder.EncodeFields((FileAncestor)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="WriteConflictError" />.</para>
        /// </summary>
        private class WriteConflictErrorDecoder : enc.UnionDecoder<WriteConflictError>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="WriteConflictError" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override WriteConflictError Create()
            {
                return new WriteConflictError();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override WriteConflictError Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "file":
                        return File.Decoder.DecodeFields(reader);
                    case "folder":
                        return Folder.Decoder.DecodeFields(reader);
                    case "file_ancestor":
                        return FileAncestor.Decoder.DecodeFields(reader);
                    default:
                        return Other.Decoder.DecodeFields(reader);
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>There's a file in the way.</para>
        /// </summary>
        public sealed class File : WriteConflictError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<File> Encoder = new FileEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<File> Decoder = new FileDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="File" /> class.</para>
            /// </summary>
            private File()
            {
            }

            /// <summary>
            /// <para>A singleton instance of File</para>
            /// </summary>
            public static readonly File Instance = new File();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="File" />.</para>
            /// </summary>
            private class FileEncoder : enc.StructEncoder<File>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(File value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="File" />.</para>
            /// </summary>
            private class FileDecoder : enc.StructDecoder<File>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="File" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override File Create()
                {
                    return new File();
                }

                /// <summary>
                /// <para>Decode fields without ensuring start and end object.</para>
                /// </summary>
                /// <param name="reader">The json reader.</param>
                /// <returns>The decoded object.</returns>
                public override File DecodeFields(enc.IJsonReader reader)
                {
                    return File.Instance;
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>There's a folder in the way.</para>
        /// </summary>
        public sealed class Folder : WriteConflictError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Folder> Encoder = new FolderEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Folder> Decoder = new FolderDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Folder" /> class.</para>
            /// </summary>
            private Folder()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Folder</para>
            /// </summary>
            public static readonly Folder Instance = new Folder();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Folder" />.</para>
            /// </summary>
            private class FolderEncoder : enc.StructEncoder<Folder>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Folder value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Folder" />.</para>
            /// </summary>
            private class FolderDecoder : enc.StructDecoder<Folder>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Folder" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Folder Create()
                {
                    return new Folder();
                }

                /// <summary>
                /// <para>Decode fields without ensuring start and end object.</para>
                /// </summary>
                /// <param name="reader">The json reader.</param>
                /// <returns>The decoded object.</returns>
                public override Folder DecodeFields(enc.IJsonReader reader)
                {
                    return Folder.Instance;
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>There's a file at an ancestor path, so we couldn't create the required parent
        /// folders.</para>
        /// </summary>
        public sealed class FileAncestor : WriteConflictError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<FileAncestor> Encoder = new FileAncestorEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<FileAncestor> Decoder = new FileAncestorDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="FileAncestor" />
            /// class.</para>
            /// </summary>
            private FileAncestor()
            {
            }

            /// <summary>
            /// <para>A singleton instance of FileAncestor</para>
            /// </summary>
            public static readonly FileAncestor Instance = new FileAncestor();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="FileAncestor" />.</para>
            /// </summary>
            private class FileAncestorEncoder : enc.StructEncoder<FileAncestor>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(FileAncestor value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="FileAncestor" />.</para>
            /// </summary>
            private class FileAncestorDecoder : enc.StructDecoder<FileAncestor>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="FileAncestor" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override FileAncestor Create()
                {
                    return new FileAncestor();
                }

                /// <summary>
                /// <para>Decode fields without ensuring start and end object.</para>
                /// </summary>
                /// <param name="reader">The json reader.</param>
                /// <returns>The decoded object.</returns>
                public override FileAncestor DecodeFields(enc.IJsonReader reader)
                {
                    return FileAncestor.Instance;
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : WriteConflictError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return new Other();
                }

                /// <summary>
                /// <para>Decode fields without ensuring start and end object.</para>
                /// </summary>
                /// <param name="reader">The json reader.</param>
                /// <returns>The decoded object.</returns>
                public override Other DecodeFields(enc.IJsonReader reader)
                {
                    return Other.Instance;
                }
            }

            #endregion
        }
    }
}
